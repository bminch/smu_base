
smu_base.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	7e 57 00    	nop       
Disassembly of section .aivt._AltAMP1Interrupt:

000001e2 <.aivt._AltAMP1Interrupt>:
 1e2:	7e 57 00    	nop       
Disassembly of section .aivt._AltAMP2Interrupt:

000001e4 <.aivt._AltAMP2Interrupt>:
 1e4:	7e 57 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	7e 57 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	7e 57 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	7e 57 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	7e 57 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	7e 57 00    	nop       
Disassembly of section .aivt._AltDAC1Interrupt:

000001b0 <.aivt._AltDAC1Interrupt>:
 1b0:	7e 57 00    	nop       
Disassembly of section .aivt._AltDAC2Interrupt:

000001b2 <.aivt._AltDAC2Interrupt>:
 1b2:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA0Interrupt:

0000011c <.aivt._AltDMA0Interrupt>:
 11c:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA1Interrupt:

00000130 <.aivt._AltDMA1Interrupt>:
 130:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA2Interrupt:

00000144 <.aivt._AltDMA2Interrupt>:
 144:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA3Interrupt:

0000015c <.aivt._AltDMA3Interrupt>:
 15c:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA4Interrupt:

00000170 <.aivt._AltDMA4Interrupt>:
 170:	7e 57 00    	nop       
Disassembly of section .aivt._AltDMA5Interrupt:

0000018e <.aivt._AltDMA5Interrupt>:
 18e:	7e 57 00    	nop       
Disassembly of section .aivt._AltFSTInterrupt:

000001e8 <.aivt._AltFSTInterrupt>:
 1e8:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <.aivt._AltIC2Interrupt>:
 11e:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <.aivt._AltIC3Interrupt>:
 15e:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <.aivt._AltIC4Interrupt>:
 160:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	7e 57 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	7e 57 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	7e 57 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	7e 57 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	7e 57 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	7e 57 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt101:

000001de <.aivt._AltInterrupt101>:
 1de:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt102:

000001e0 <.aivt._AltInterrupt102>:
 1e0:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt107:

000001ea <.aivt._AltInterrupt107>:
 1ea:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt108:

000001ec <.aivt._AltInterrupt108>:
 1ec:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt109:

000001ee <.aivt._AltInterrupt109>:
 1ee:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt110:

000001f0 <.aivt._AltInterrupt110>:
 1f0:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt111:

000001f2 <.aivt._AltInterrupt111>:
 1f2:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt112:

000001f4 <.aivt._AltInterrupt112>:
 1f4:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt113:

000001f6 <.aivt._AltInterrupt113>:
 1f6:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt114:

000001f8 <.aivt._AltInterrupt114>:
 1f8:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt115:

000001fa <.aivt._AltInterrupt115>:
 1fa:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt116:

000001fc <.aivt._AltInterrupt116>:
 1fc:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt84:

000001bc <.aivt._AltInterrupt84>:
 1bc:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt85:

000001be <.aivt._AltInterrupt85>:
 1be:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt90:

000001c8 <.aivt._AltInterrupt90>:
 1c8:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt91:

000001ca <.aivt._AltInterrupt91>:
 1ca:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt94:

000001d0 <.aivt._AltInterrupt94>:
 1d0:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt95:

000001d2 <.aivt._AltInterrupt95>:
 1d2:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt96:

000001d4 <.aivt._AltInterrupt96>:
 1d4:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt97:

000001d6 <.aivt._AltInterrupt97>:
 1d6:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt98:

000001d8 <.aivt._AltInterrupt98>:
 1d8:	7e 57 00    	nop       
Disassembly of section .aivt._AltInterrupt99:

000001da <.aivt._AltInterrupt99>:
 1da:	7e 57 00    	nop       
Disassembly of section .aivt._AltJTAGInterrupt:

000001fe <.aivt._AltJTAGInterrupt>:
 1fe:	7e 57 00    	nop       
Disassembly of section .aivt._AltLCDInterrupt:

000001dc <.aivt._AltLCDInterrupt>:
 1dc:	7e 57 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	7e 57 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	7e 57 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	7e 57 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	7e 57 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	7e 57 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	7e 57 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	7e 57 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	7e 57 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	7e 57 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	7e 57 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	7e 57 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	7e 57 00    	nop       
Disassembly of section .aivt._AltSDA1Interrupt:

000001e6 <.aivt._AltSDA1Interrupt>:
 1e6:	7e 57 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	7e 57 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	7e 57 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	7e 57 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	7e 57 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	7e 57 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	7e 57 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	7e 57 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	7e 57 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	7e 57 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	7e 57 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	7e 57 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	7e 57 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	7e 57 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	7e 57 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	7e 57 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	7e 57 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	7e 57 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	7e 57 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	7e 57 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	7e 57 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	7e 57 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	7e 57 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	7e 57 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	7e 57 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	7e 57 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	40 11 04    	goto      0x1140 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001140 <__reset>:
    1140:	0f 70 21    	mov.w     #0x1700, w15
    1142:	0e 7f 22    	mov.w     #0x27f0, w14
    1144:	0e 01 88    	mov.w     w14, 0x20
    1146:	00 00 00    	nop       
    1148:	00 00 20    	mov.w     #0x0, w0
    114a:	00 00 e0    	cp0.w     w0
    114c:	02 00 32    	bra       Z, 0x1152 <CORCON_RESET>
    114e:	00 01 20    	mov.w     #0x10, w0
    1150:	20 02 88    	mov.w     w0, 0x44

00001152 <CORCON_RESET>:
    1152:	14 00 07    	rcall     0x117c <__psv_init>
    1154:	59 01 07    	rcall     0x1408 <__crt_start_mode> <__crt_start_mode_normal>
    1156:	00 00 e0    	cp0.w     w0
    1158:	03 00 3a    	bra       NZ, 0x1160 <L11>
    115a:	40 51 25    	mov.w     #0x5514, w0
    115c:	01 00 20    	mov.w     #0x0, w1
    115e:	02 00 37    	bra       0x1164 <L21>

00001160 <L11>:
    1160:	00 00 20    	mov.w     #0x0, w0
    1162:	01 00 20    	mov.w     #0x0, w1

00001164 <L21>:
    1164:	81 0f 70    	ior.w     w0, w1, [w15]
    1166:	01 00 32    	bra       Z, 0x116a <L12>
    1168:	14 00 07    	rcall     0x1192 <__data_init> <__data_init_da>

0000116a <L12>:
    116a:	00 00 20    	mov.w     #0x0, w0
    116c:	00 00 e0    	cp0.w     w0
    116e:	02 00 32    	bra       Z, 0x1174 <L13>
    1170:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x1134>
    1172:	00 00 00 

00001174 <L13>:
    1174:	68 57 02    	call      0x5768 <_main>
    1176:	00 00 00 
    1178:	00 40 da    	break     
    117a:	00 00 fe    	reset     

0000117c <__psv_init>:
    117c:	44 40 a9    	bclr.b    0x44, #0x2
    117e:	e0 2d 20    	mov.w     #0x2de, w0
    1180:	00 00 e0    	cp0.w     w0
    1182:	03 00 32    	bra       Z, 0x118a <L14>
    1184:	00 20 20    	mov.w     #0x200, w0
    1186:	90 01 88    	mov.w     w0, 0x32
    1188:	44 40 a8    	bset.b    0x44, #0x2

0000118a <L14>:
    118a:	00 00 06    	return    

0000118c <__long_indirect_call>:
    118c:	8a 1f 78    	mov.w     w10, [w15++]
    118e:	8b 1f 78    	mov.w     w11, [w15++]
    1190:	00 00 06    	return    

00001192 <__data_init>:
    1192:	a1 02 88    	mov.w     w1, 0x54
    1194:	80 04 78    	mov.w     w0, w9
    1196:	00 00 eb    	clr.w     w0
    1198:	1f 00 37    	bra       0x11d8 <L41>

0000119a <L11>:
    119a:	e2 84 44    	add.w     w9, #0x2, w9
    119c:	54 a0 b4    	addc.w    0x54
    119e:	99 05 ba    	tblrdl.w  [w9], w11
    11a0:	e2 84 44    	add.w     w9, #0x2, w9
    11a2:	54 a0 b4    	addc.w    0x54
    11a4:	99 06 ba    	tblrdl.w  [w9], w13
    11a6:	e2 84 44    	add.w     w9, #0x2, w9
    11a8:	54 a0 b4    	addc.w    0x54
    11aa:	00 06 eb    	clr.w     w12
    11ac:	47 6f de    	lsr.w     w13, #0x7, w14
    11ae:	fd 07 b2    	and.w     #0x7f, w13
    11b0:	ae 01 88    	mov.w     w14, 0x34
    11b2:	63 6c e1    	cp.b      w13, #0x3
    11b4:	03 00 3a    	bra       NZ, 0x11bc <L21>
    11b6:	ea ff 07    	rcall     0x118c <__long_indirect_call>
    11b8:	00 00 eb    	clr.w     w0
    11ba:	0e 00 37    	bra       0x11d8 <L41>

000011bc <L21>:
    11bc:	60 6c e1    	cp.b      w13, #0x0
    11be:	08 00 3a    	bra       NZ, 0x11d0 <L22>

000011c0 <L91>:
    11c0:	00 4d eb    	clr.b     [w10]
    11c2:	0a 05 e8    	inc.w     w10, w10
    11c4:	02 00 39    	bra       NC, 0x11ca <L81>
    11c6:	34 20 ec    	inc.w     0x34
    11c8:	0a f0 a0    	bset.w    w10, #0xf

000011ca <L81>:
    11ca:	8b 05 e9    	dec.w     w11, w11
    11cc:	f9 ff 3e    	bra       GTU, 0x11c0 <L91>
    11ce:	04 00 37    	bra       0x11d8 <L41>

000011d0 <L22>:
    11d0:	61 68 e1    	cp.w      w13, #0x1
    11d2:	01 00 32    	bra       Z, 0x11d6 <L31>
    11d4:	00 86 eb    	setm.w    w12

000011d6 <L31>:
    11d6:	0b 00 07    	rcall     0x11ee <L13> <__memcpyd3extended>

000011d8 <L41>:
    11d8:	19 c7 ba    	tblrdh.b  [w9], w14
    11da:	19 05 ba    	tblrdl.w  [w9], w10
    11dc:	0e 04 e0    	cp0.b     w14
    11de:	03 00 3a    	bra       NZ, 0x11e6 <L12>
    11e0:	0a 00 e0    	cp0.w     w10
    11e2:	db ff 3a    	bra       NZ, 0x119a <L11>
    11e4:	00 00 06    	return    

000011e6 <L12>:
    11e6:	fe 07 b2    	and.w     #0x7f, w14
    11e8:	ae 02 88    	mov.w     w14, 0x54
    11ea:	8a 04 78    	mov.w     w10, w9
    11ec:	f5 ff 37    	bra       0x11d8 <L41>

000011ee <L13>:
    11ee:	0c d0 a3    	btst.c    w12, #0xd
    11f0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11f2:	1c 00 39    	bra       NC, 0x122c <L23>
    11f4:	89 02 78    	mov.w     w9, w5
    11f6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11f8:	0a 05 e8    	inc.w     w10, w10
    11fa:	02 00 39    	bra       NC, 0x1200 <L32>
    11fc:	34 20 ec    	inc.w     0x34
    11fe:	0a f0 a0    	bset.w    w10, #0xf

00001200 <L32>:
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	0f 00 32    	bra       Z, 0x1222 <L42>
    1204:	25 4d ba    	tblrdl.b  [w5--], [w10]
    1206:	0a 05 e8    	inc.w     w10, w10
    1208:	02 00 39    	bra       NC, 0x120e <L33>
    120a:	34 20 ec    	inc.w     0x34
    120c:	0a f0 a0    	bset.w    w10, #0xf

0000120e <L33>:
    120e:	8b 05 e9    	dec.w     w11, w11
    1210:	08 00 32    	bra       Z, 0x1222 <L42>
    1212:	0c 00 e0    	cp0.w     w12
    1214:	06 00 32    	bra       Z, 0x1222 <L42>
    1216:	15 cd ba    	tblrdh.b  [w5], [w10]
    1218:	0a 05 e8    	inc.w     w10, w10
    121a:	02 00 39    	bra       NC, 0x1220 <L34>
    121c:	34 20 ec    	inc.w     0x34
    121e:	0a f0 a0    	bset.w    w10, #0xf

00001220 <L34>:
    1220:	8b 05 e9    	dec.w     w11, w11

00001222 <L42>:
    1222:	89 84 e8    	inc2.w    w9, w9
    1224:	54 a0 b4    	addc.w    0x54
    1226:	0b 00 e0    	cp0.w     w11
    1228:	e2 ff 3a    	bra       NZ, 0x11ee <L13> <__memcpyd3extended>
    122a:	00 00 06    	return    

0000122c <L23>:
    122c:	99 02 ba    	tblrdl.w  [w9], w5
    122e:	05 5d 78    	mov.b     w5, [w10++]
    1230:	8b 05 e9    	dec.w     w11, w11
    1232:	f7 ff 32    	bra       Z, 0x1222 <L42>
    1234:	c8 2a de    	lsr.w     w5, #0x8, w5
    1236:	05 5d 78    	mov.b     w5, [w10++]
    1238:	8b 05 e9    	dec.w     w11, w11
    123a:	f3 ff 32    	bra       Z, 0x1222 <L42>
    123c:	0c 00 e0    	cp0.w     w12
    123e:	f1 ff 32    	bra       Z, 0x1222 <L42>
    1240:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1242:	ee ff 37    	bra       0x1220 <L34>

00001244 <.handle>:
    1244:	32 51 04    	goto      0x5132 <_cdc_setup_callback>
    1246:	00 00 00 
    1248:	d2 52 04    	goto      0x52d2 <_cdc_rx_service>
    124a:	00 00 00 
    124c:	5c 52 04    	goto      0x525c <_cdc_tx_service>
    124e:	00 00 00 
    1250:	1e 57 04    	goto      0x571e <.LFE45>
    1252:	00 00 00 
    1254:	ba 35 04    	goto      0x35ba <_parser_disconnected>
    1256:	00 00 00 
    1258:	f2 38 04    	goto      0x38f2 <_parser_forwarding>
    125a:	00 00 00 
    125c:	64 53 04    	goto      0x5364 <_cdc_putc>
    125e:	00 00 00 
    1260:	d2 53 04    	goto      0x53d2 <_cdc_puts>
    1262:	00 00 00 
    1264:	20 37 04    	goto      0x3720 <_parser_connected>
    1266:	00 00 00 
    1268:	d2 45 04    	goto      0x45d2 <_ble_putc>
    126a:	00 00 00 
    126c:	e8 45 04    	goto      0x45e8 <_ble_puts>
    126e:	00 00 00 
    1270:	ae 1a 04    	goto      0x1aae <_ui_handler>
    1272:	00 00 00 
    1274:	14 1d 04    	goto      0x1d14 <_pwr_handler>
    1276:	00 00 00 
    1278:	0c 1e 04    	goto      0x1e0c <_dac10_handler>
    127a:	00 00 00 
    127c:	6a 1f 04    	goto      0x1f6a <_dac16_handler>
    127e:	00 00 00 
    1280:	b4 21 04    	goto      0x21b4 <_adc16_handler>
    1282:	00 00 00 
    1284:	e0 22 04    	goto      0x22e0 <_adc24_handler>
    1286:	00 00 00 
    1288:	62 27 04    	goto      0x2762 <_digout_handler>
    128a:	00 00 00 
    128c:	80 31 04    	goto      0x3180 <_ble_handler>
    128e:	00 00 00 
    1290:	90 32 04    	goto      0x3290 <_flash_handler>
    1292:	00 00 00 
    1294:	00 1b 04    	goto      0x1b00 <_led1_handler>
    1296:	00 00 00 
    1298:	8a 1b 04    	goto      0x1b8a <_led1Q_handler>
    129a:	00 00 00 
    129c:	aa 1b 04    	goto      0x1baa <_led2_handler>
    129e:	00 00 00 
    12a0:	2e 1c 04    	goto      0x1c2e <_led2Q_handler>
    12a2:	00 00 00 
    12a4:	4c 1c 04    	goto      0x1c4c <_led3_handler>
    12a6:	00 00 00 
    12a8:	d4 1c 04    	goto      0x1cd4 <_led3Q_handler>
    12aa:	00 00 00 
    12ac:	f2 1c 04    	goto      0x1cf2 <_sw1Q_handler>
    12ae:	00 00 00 
    12b0:	66 1d 04    	goto      0x1d66 <_ena12V_handler>
    12b2:	00 00 00 
    12b4:	ee 1d 04    	goto      0x1dee <_ena12VQ_handler>
    12b6:	00 00 00 
    12b8:	5e 1e 04    	goto      0x1e5e <_dac10_dac1_handler>
    12ba:	00 00 00 
    12bc:	90 1e 04    	goto      0x1e90 <_dac10_dac1Q_handler>
    12be:	00 00 00 
    12c0:	aa 1e 04    	goto      0x1eaa <_dac10_dac2_handler>
    12c2:	00 00 00 
    12c4:	dc 1e 04    	goto      0x1edc <_dac10_dac2Q_handler>
    12c6:	00 00 00 
    12c8:	f6 1e 04    	goto      0x1ef6 <_dac10_diff_handler>
    12ca:	00 00 00 
    12cc:	4a 1f 04    	goto      0x1f4a <_dac10_diffQ_handler>
    12ce:	00 00 00 
    12d0:	bc 1f 04    	goto      0x1fbc <_dac16_dac0_handler>
    12d2:	00 00 00 
    12d4:	ea 1f 04    	goto      0x1fea <_dac16_dac0Q_handler>
    12d6:	00 00 00 
    12d8:	04 20 04    	goto      0x2004 <_dac16_dac1_handler>
    12da:	00 00 00 
    12dc:	32 20 04    	goto      0x2032 <_dac16_dac1Q_handler>
    12de:	00 00 00 
    12e0:	4c 20 04    	goto      0x204c <_dac16_dac2_handler>
    12e2:	00 00 00 
    12e4:	7a 20 04    	goto      0x207a <_dac16_dac2Q_handler>
    12e6:	00 00 00 
    12e8:	94 20 04    	goto      0x2094 <_dac16_dac3_handler>
    12ea:	00 00 00 
    12ec:	c2 20 04    	goto      0x20c2 <_dac16_dac3Q_handler>
    12ee:	00 00 00 
    12f0:	dc 20 04    	goto      0x20dc <_dac16_ch1_handler>
    12f2:	00 00 00 
    12f4:	1c 21 04    	goto      0x211c <_dac16_ch1Q_handler>
    12f6:	00 00 00 
    12f8:	48 21 04    	goto      0x2148 <_dac16_ch2_handler>
    12fa:	00 00 00 
    12fc:	88 21 04    	goto      0x2188 <_dac16_ch2Q_handler>
    12fe:	00 00 00 
    1300:	06 22 04    	goto      0x2206 <_adc16_ch1Q_handler>
    1302:	00 00 00 
    1304:	20 22 04    	goto      0x2220 <_adc16_ch2Q_handler>
    1306:	00 00 00 
    1308:	3a 22 04    	goto      0x223a <_adc16_ch1avgQ_handler>
    130a:	00 00 00 
    130c:	54 22 04    	goto      0x2254 <_adc16_ch2avgQ_handler>
    130e:	00 00 00 
    1310:	6e 22 04    	goto      0x226e <_adc16_ch1rawQ_handler>
    1312:	00 00 00 
    1314:	88 22 04    	goto      0x2288 <_adc16_ch2rawQ_handler>
    1316:	00 00 00 
    1318:	a2 22 04    	goto      0x22a2 <_adc16_calibrate_handler>
    131a:	00 00 00 
    131c:	ac 22 04    	goto      0x22ac <_adc16_offsetQ_handler>
    131e:	00 00 00 
    1320:	c6 22 04    	goto      0x22c6 <_adc16_maxvalQ_handler>
    1322:	00 00 00 
    1324:	32 23 04    	goto      0x2332 <_adc24_ch1Q_handler>
    1326:	00 00 00 
    1328:	6c 23 04    	goto      0x236c <_adc24_ch2Q_handler>
    132a:	00 00 00 
    132c:	aa 23 04    	goto      0x23aa <_adc24_ch1avgQ_handler>
    132e:	00 00 00 
    1330:	e4 23 04    	goto      0x23e4 <_adc24_ch2avgQ_handler>
    1332:	00 00 00 
    1334:	22 24 04    	goto      0x2422 <_adc24_ch1rawQ_handler>
    1336:	00 00 00 
    1338:	5c 24 04    	goto      0x245c <_adc24_ch2rawQ_handler>
    133a:	00 00 00 
    133c:	9a 24 04    	goto      0x249a <_adc24_ch1offset_handler>
    133e:	00 00 00 
    1340:	e6 24 04    	goto      0x24e6 <_adc24_ch1offsetQ_handler>
    1342:	00 00 00 
    1344:	1a 25 04    	goto      0x251a <_adc24_ch2offset_handler>
    1346:	00 00 00 
    1348:	66 25 04    	goto      0x2566 <_adc24_ch2offsetQ_handler>
    134a:	00 00 00 
    134c:	9a 25 04    	goto      0x259a <_adc24_bothQ_handler>
    134e:	00 00 00 
    1350:	02 26 04    	goto      0x2602 <_adc24_bothavgQ_handler>
    1352:	00 00 00 
    1354:	6a 26 04    	goto      0x266a <_adc24_bothrawQ_handler>
    1356:	00 00 00 
    1358:	d2 26 04    	goto      0x26d2 <_adc24_calibrate_handler>
    135a:	00 00 00 
    135c:	dc 26 04    	goto      0x26dc <_adc24_reg_handler>
    135e:	00 00 00 
    1360:	20 27 04    	goto      0x2720 <_adc24_regQ_handler>
    1362:	00 00 00 
    1364:	b4 27 04    	goto      0x27b4 <_portd_handler>
    1366:	00 00 00 
    1368:	ee 27 04    	goto      0x27ee <_portdQ_handler>
    136a:	00 00 00 
    136c:	0c 28 04    	goto      0x280c <_rd0_handler>
    136e:	00 00 00 
    1370:	90 28 04    	goto      0x2890 <_rd0Q_handler>
    1372:	00 00 00 
    1374:	ae 28 04    	goto      0x28ae <_rd1_handler>
    1376:	00 00 00 
    1378:	36 29 04    	goto      0x2936 <_rd1Q_handler>
    137a:	00 00 00 
    137c:	54 29 04    	goto      0x2954 <_rd2_handler>
    137e:	00 00 00 
    1380:	dc 29 04    	goto      0x29dc <_rd2Q_handler>
    1382:	00 00 00 
    1384:	fa 29 04    	goto      0x29fa <_rd3_handler>
    1386:	00 00 00 
    1388:	82 2a 04    	goto      0x2a82 <_rd3Q_handler>
    138a:	00 00 00 
    138c:	a0 2a 04    	goto      0x2aa0 <_rd4_handler>
    138e:	00 00 00 
    1390:	28 2b 04    	goto      0x2b28 <_rd4Q_handler>
    1392:	00 00 00 
    1394:	46 2b 04    	goto      0x2b46 <_rd5_handler>
    1396:	00 00 00 
    1398:	d0 2b 04    	goto      0x2bd0 <_rd5Q_handler>
    139a:	00 00 00 
    139c:	f0 2b 04    	goto      0x2bf0 <_rd6_handler>
    139e:	00 00 00 
    13a0:	7a 2c 04    	goto      0x2c7a <_rd6Q_handler>
    13a2:	00 00 00 
    13a4:	9a 2c 04    	goto      0x2c9a <_porte_handler>
    13a6:	00 00 00 
    13a8:	d4 2c 04    	goto      0x2cd4 <_porteQ_handler>
    13aa:	00 00 00 
    13ac:	f2 2c 04    	goto      0x2cf2 <_re0_handler>
    13ae:	00 00 00 
    13b0:	76 2d 04    	goto      0x2d76 <_re0Q_handler>
    13b2:	00 00 00 
    13b4:	94 2d 04    	goto      0x2d94 <_re1_handler>
    13b6:	00 00 00 
    13b8:	1c 2e 04    	goto      0x2e1c <_re1Q_handler>
    13ba:	00 00 00 
    13bc:	3a 2e 04    	goto      0x2e3a <_re2_handler>
    13be:	00 00 00 
    13c0:	c2 2e 04    	goto      0x2ec2 <_re2Q_handler>
    13c2:	00 00 00 
    13c4:	e0 2e 04    	goto      0x2ee0 <_re3_handler>
    13c6:	00 00 00 
    13c8:	68 2f 04    	goto      0x2f68 <_re3Q_handler>
    13ca:	00 00 00 
    13cc:	86 2f 04    	goto      0x2f86 <_re4_handler>
    13ce:	00 00 00 
    13d0:	0e 30 04    	goto      0x300e <_re4Q_handler>
    13d2:	00 00 00 
    13d4:	2c 30 04    	goto      0x302c <_re5_handler>
    13d6:	00 00 00 
    13d8:	b6 30 04    	goto      0x30b6 <_re5Q_handler>
    13da:	00 00 00 
    13dc:	d6 30 04    	goto      0x30d6 <_re6_handler>
    13de:	00 00 00 
    13e0:	60 31 04    	goto      0x3160 <_re6Q_handler>
    13e2:	00 00 00 
    13e4:	d2 31 04    	goto      0x31d2 <_ble_reset_handler>
    13e6:	00 00 00 
    13e8:	5c 32 04    	goto      0x325c <_ble_resetQ_handler>
    13ea:	00 00 00 
    13ec:	7c 32 04    	goto      0x327c <_ble_forward_handler>
    13ee:	00 00 00 
    13f0:	e2 32 04    	goto      0x32e2 <_flash_erase_handler>
    13f2:	00 00 00 
    13f4:	4c 33 04    	goto      0x334c <_flash_read_handler>
    13f6:	00 00 00 
    13f8:	3a 34 04    	goto      0x343a <_flash_write_handler>
    13fa:	00 00 00 
    13fc:	e4 50 04    	goto      0x50e4 <_cdc_set_line_coding_out_callback>
    13fe:	00 00 00 
    1400:	34 48 04    	goto      0x4834 <_usb_set_address_callback>
    1402:	00 00 00 
    1404:	f0 4f 04    	goto      0x4ff0 <_usb_send_data_packet>
    1406:	00 00 00 

00001408 <__crt_start_mode>:
    1408:	00 00 05    	retlw.w   #0x0, w0

0000140a <___divsi3>:
    140a:	83 9f 68    	xor.w     w1, w3, [w15++]
    140c:	01 00 e0    	cp0.w     w1
    140e:	02 00 3d    	bra       GE, 0x1414 <divtestb>
    1410:	60 00 10    	subr.w    w0, #0x0, w0
    1412:	e0 80 18    	subbr.w   w1, #0x0, w1

00001414 <divtestb>:
    1414:	03 00 e0    	cp0.w     w3
    1416:	02 00 3d    	bra       GE, 0x141c <calcquot>
    1418:	60 01 11    	subr.w    w2, #0x0, w2
    141a:	e0 81 19    	subbr.w   w3, #0x0, w3

0000141c <calcquot>:
    141c:	05 00 07    	rcall     0x1428 <___udivsi3>
    141e:	4f 00 e0    	cp0.w     [--w15]
    1420:	02 00 3b    	bra       NN, 0x1426 <returnq>
    1422:	60 00 10    	subr.w    w0, #0x0, w0
    1424:	e0 80 18    	subbr.w   w1, #0x0, w1

00001426 <returnq>:
    1426:	00 00 06    	return    

00001428 <___udivsi3>:
    1428:	60 22 b8    	mul.uu    w4, #0x0, w4
    142a:	06 02 20    	mov.w     #0x20, w6

0000142c <nextbit>:
    142c:	00 00 d0    	sl.w      w0, w0
    142e:	81 80 d2    	rlc.w     w1, w1
    1430:	04 82 d2    	rlc.w     w4, w4
    1432:	85 82 d2    	rlc.w     w5, w5
    1434:	00 00 a0    	bset.w    w0, #0x0
    1436:	02 02 52    	sub.w     w4, w2, w4
    1438:	83 82 5a    	subb.w    w5, w3, w5
    143a:	03 00 31    	bra       C, 0x1442 <iterate>
    143c:	02 02 42    	add.w     w4, w2, w4
    143e:	83 82 4a    	addc.w    w5, w3, w5
    1440:	00 00 a1    	bclr.w    w0, #0x0

00001442 <iterate>:
    1442:	06 03 e9    	dec.w     w6, w6
    1444:	f3 ff 3a    	bra       NZ, 0x142c <nextbit>
    1446:	00 00 06    	return    
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x134>:
    1000:	40 11 04    	goto      0x1140 <__reset>
    1002:	00 00 00 
    1004:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	c8 56 04    	goto      0x56c8 <__U1RXInterrupt>
    1046:	00 00 00 
    1048:	66 56 04    	goto      0x5666 <__U1TXInterrupt>
    104a:	00 00 00 
    104c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    110a:	00 00 00 
    110c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    110e:	00 00 00 
    1110:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1112:	00 00 00 
    1114:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1116:	00 00 00 
    1118:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    111a:	00 00 00 
    111c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    111e:	00 00 00 
    1120:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1122:	00 00 00 
    1124:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1126:	00 00 00 
    1128:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    112a:	00 00 00 
    112c:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    112e:	00 00 00 
    1130:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1132:	00 00 00 

00001134 <__DEFAULT_VECTOR>:
    1134:	7e 57 04    	goto      0x577e <__DefaultInterrupt>
    1136:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	34 11 00    	nop       
  10:	34 11 00    	nop       
  12:	34 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	28 10 00    	nop       
  1e:	2c 10 00    	nop       
  20:	30 10 00    	nop       
  22:	34 10 00    	nop       
  24:	38 10 00    	nop       
  26:	3c 10 00    	nop       
  28:	40 10 00    	nop       
  2a:	44 10 00    	nop       
  2c:	48 10 00    	nop       
  2e:	4c 10 00    	nop       
  30:	50 10 00    	nop       
  32:	34 11 00    	nop       
  34:	54 10 00    	nop       
  36:	58 10 00    	nop       
  38:	5c 10 00    	nop       
  3a:	60 10 00    	nop       
  3c:	64 10 00    	nop       
  3e:	34 11 00    	nop       
  40:	68 10 00    	nop       
  42:	6c 10 00    	nop       
  44:	70 10 00    	nop       
  46:	74 10 00    	nop       
  48:	78 10 00    	nop       
  4a:	7c 10 00    	nop       
  4c:	80 10 00    	nop       
  4e:	84 10 00    	nop       
  50:	88 10 00    	nop       
  52:	8c 10 00    	nop       
  54:	90 10 00    	nop       
  56:	94 10 00    	nop       
  58:	34 11 00    	nop       
  5a:	34 11 00    	nop       
  5c:	98 10 00    	nop       
  5e:	9c 10 00    	nop       
  60:	a0 10 00    	nop       
  62:	a4 10 00    	nop       
  64:	a8 10 00    	nop       
  66:	ac 10 00    	nop       
  68:	b0 10 00    	nop       
  6a:	b4 10 00    	nop       
  6c:	b8 10 00    	nop       
  6e:	bc 10 00    	nop       
  70:	c0 10 00    	nop       
  72:	34 11 00    	nop       
  74:	34 11 00    	nop       
  76:	c4 10 00    	nop       
  78:	c8 10 00    	nop       
  7a:	34 11 00    	nop       
  7c:	34 11 00    	nop       
  7e:	cc 10 00    	nop       
  80:	d0 10 00    	nop       
  82:	34 11 00    	nop       
  84:	34 11 00    	nop       
  86:	34 11 00    	nop       
  88:	34 11 00    	nop       
  8a:	34 11 00    	nop       
  8c:	34 11 00    	nop       
  8e:	d4 10 00    	nop       
  90:	d8 10 00    	nop       
  92:	34 11 00    	nop       
  94:	34 11 00    	nop       
  96:	dc 10 00    	nop       
  98:	e0 10 00    	nop       
  9a:	e4 10 00    	nop       
  9c:	34 11 00    	nop       
  9e:	34 11 00    	nop       
  a0:	34 11 00    	nop       
  a2:	34 11 00    	nop       
  a4:	e8 10 00    	nop       
  a6:	34 11 00    	nop       
  a8:	34 11 00    	nop       
  aa:	34 11 00    	nop       
  ac:	34 11 00    	nop       
  ae:	ec 10 00    	nop       
  b0:	f0 10 00    	nop       
  b2:	f4 10 00    	nop       
  b4:	34 11 00    	nop       
  b6:	f8 10 00    	nop       
  b8:	fc 10 00    	nop       
  ba:	00 11 00    	nop       
  bc:	34 11 00    	nop       
  be:	34 11 00    	nop       
  c0:	04 11 00    	nop       
  c2:	08 11 00    	nop       
  c4:	0c 11 00    	nop       
  c6:	10 11 00    	nop       
  c8:	34 11 00    	nop       
  ca:	34 11 00    	nop       
  cc:	14 11 00    	nop       
  ce:	18 11 00    	nop       
  d0:	34 11 00    	nop       
  d2:	34 11 00    	nop       
  d4:	34 11 00    	nop       
  d6:	34 11 00    	nop       
  d8:	34 11 00    	nop       
  da:	34 11 00    	nop       
  dc:	1c 11 00    	nop       
  de:	34 11 00    	nop       
  e0:	34 11 00    	nop       
  e2:	20 11 00    	nop       
  e4:	24 11 00    	nop       
  e6:	28 11 00    	nop       
  e8:	2c 11 00    	nop       
  ea:	34 11 00    	nop       
  ec:	34 11 00    	nop       
  ee:	34 11 00    	nop       
  f0:	34 11 00    	nop       
  f2:	34 11 00    	nop       
  f4:	34 11 00    	nop       
  f6:	34 11 00    	nop       
  f8:	34 11 00    	nop       
  fa:	34 11 00    	nop       
  fc:	34 11 00    	nop       
  fe:	30 11 00    	nop       
Disassembly of section .const:

00009448 <.LC0>:
    9448:	55 49       	.word 0x4955
    944a:	00 50       	.word 0x5000

0000944b <.LC1>:
    944b:	00 00       	.word 0
    944d:	00 00       	.word 0

0000944f <.LC2>:
    944f:	00 00       	.word 0
    9451:	00 00       	.word 0
    9453:	00 00       	.word 0

00009455 <.LC3>:
    9455:	00 00       	.word 0
    9457:	00 00       	.word 0
    9459:	00 00       	.word 0

0000945b <.LC4>:
    945b:	00 00       	.word 0
    945d:	00 00       	.word 0
    945f:	00 00       	.word 0

00009461 <.LC5>:
    9461:	00 00       	.word 0
    9463:	00 00       	.word 0
    9465:	00 00       	.word 0

00009467 <.LC6>:
    9467:	00 00       	.word 0
    9469:	00 00       	.word 0
    946b:	00 00       	.word 0
	...

0000946e <.LC7>:
    946e:	42 4c       	.word 0x4c42
    9470:	45 00       	.word 0x45

00009472 <.LC8>:
    9472:	46 4c       	.word 0x4c46
    9474:	41 53       	.word 0x5341
    9476:	48 00       	.word 0x48

00009478 <.LC9>:
    9478:	4c 45       	.word 0x454c
    947a:	44 31       	.word 0x3144
    947c:	00 4c       	.word 0x4c00

0000947d <.LC10>:
    947d:	00 00       	.word 0
    947f:	00 00       	.word 0
    9481:	00 00       	.word 0

00009483 <.LC11>:
    9483:	00 00       	.word 0
    9485:	00 00       	.word 0
	...

00009488 <.LC12>:
    9488:	4c 45       	.word 0x454c
    948a:	44 32       	.word 0x3244
    948c:	3f 00       	.word 0x3f

0000948e <.LC13>:
    948e:	4c 45       	.word 0x454c
    9490:	44 33       	.word 0x3344
    9492:	00 4c       	.word 0x4c00

00009493 <.LC14>:
    9493:	00 00       	.word 0
    9495:	00 00       	.word 0
    9497:	00 00       	.word 0

00009499 <.LC15>:
    9499:	00 00       	.word 0
    949b:	00 00       	.word 0
	...

0000949e <.LC16>:
    949e:	45 4e       	.word 0x4e45
    94a0:	41 31       	.word 0x3141
    94a2:	32 56       	.word 0x5632
    94a4:	00 45       	.word 0x4500

000094a5 <.LC17>:
    94a5:	00 00       	.word 0
    94a7:	00 00       	.word 0
    94a9:	00 00       	.word 0
    94ab:	00 00       	.word 0

000094ad <.LC18>:
    94ad:	00 00       	.word 0
    94af:	00 00       	.word 0
	...

000094b2 <.LC19>:
    94b2:	44 41       	.word 0x4144
    94b4:	43 31       	.word 0x3143
    94b6:	3f 00       	.word 0x3f

000094b8 <.LC20>:
    94b8:	44 41       	.word 0x4144
    94ba:	43 32       	.word 0x3243
    94bc:	00 44       	.word 0x4400

000094bd <.LC21>:
    94bd:	00 00       	.word 0
    94bf:	00 00       	.word 0
    94c1:	00 00       	.word 0

000094c3 <.LC22>:
    94c3:	00 00       	.word 0
    94c5:	00 00       	.word 0
	...

000094c8 <.LC23>:
    94c8:	44 49       	.word 0x4944
    94ca:	46 46       	.word 0x4646
    94cc:	3f 00       	.word 0x3f

000094ce <.LC24>:
    94ce:	44 41       	.word 0x4144
    94d0:	43 30       	.word 0x3043
    94d2:	00 44       	.word 0x4400

000094d3 <.LC25>:
    94d3:	00 00       	.word 0
    94d5:	00 00       	.word 0
    94d7:	00 00       	.word 0

000094d9 <.LC26>:
    94d9:	00 00       	.word 0
    94db:	00 00       	.word 0
	...

000094de <.LC27>:
    94de:	44 41       	.word 0x4144
    94e0:	43 33       	.word 0x3343
    94e2:	3f 00       	.word 0x3f

000094e4 <.LC28>:
    94e4:	43 48       	.word 0x4843
    94e6:	31 00       	.word 0x31

000094e8 <.LC29>:
    94e8:	43 48       	.word 0x4843
    94ea:	31 3f       	.word 0x3f31
    94ec:	00 43       	.word 0x4300

000094ed <.LC30>:
    94ed:	00 00       	.word 0
    94ef:	00 00       	.word 0

000094f1 <.LC31>:
    94f1:	00 00       	.word 0
    94f3:	00 00       	.word 0
	...

000094f6 <.LC32>:
    94f6:	43 48       	.word 0x4843
    94f8:	31 41       	.word 0x4131
    94fa:	56 47       	.word 0x4756
    94fc:	3f 00       	.word 0x3f

000094fe <.LC33>:
    94fe:	43 48       	.word 0x4843
    9500:	32 41       	.word 0x4132
    9502:	56 47       	.word 0x4756
    9504:	3f 00       	.word 0x3f

00009506 <.LC34>:
    9506:	43 48       	.word 0x4843
    9508:	31 52       	.word 0x5231
    950a:	41 57       	.word 0x5741
    950c:	3f 00       	.word 0x3f

0000950e <.LC35>:
    950e:	43 48       	.word 0x4843
    9510:	32 52       	.word 0x5232
    9512:	41 57       	.word 0x5741
    9514:	3f 00       	.word 0x3f

00009516 <.LC36>:
    9516:	43 41       	.word 0x4143
    9518:	4c 49       	.word 0x494c
    951a:	42 52       	.word 0x5242
    951c:	41 54       	.word 0x5441
    951e:	45 00       	.word 0x45

00009520 <.LC37>:
    9520:	4f 46       	.word 0x464f
    9522:	46 53       	.word 0x5346
    9524:	45 54       	.word 0x5445
    9526:	3f 00       	.word 0x3f

00009528 <.LC38>:
    9528:	4d 41       	.word 0x414d
    952a:	58 56       	.word 0x5658
    952c:	41 4c       	.word 0x4c41
    952e:	3f 00       	.word 0x3f

00009530 <.LC39>:
    9530:	43 48       	.word 0x4843
    9532:	31 4f       	.word 0x4f31
    9534:	46 46       	.word 0x4646
    9536:	53 45       	.word 0x4553
    9538:	54 00       	.word 0x54

0000953a <.LC40>:
    953a:	43 48       	.word 0x4843
    953c:	31 4f       	.word 0x4f31
    953e:	46 46       	.word 0x4646
    9540:	53 45       	.word 0x4553
    9542:	54 3f       	.word 0x3f54
    9544:	00 43       	.word 0x4300

00009545 <.LC41>:
    9545:	00 00       	.word 0
    9547:	00 00       	.word 0
    9549:	00 00       	.word 0
    954b:	00 00       	.word 0
    954d:	00 00       	.word 0

0000954f <.LC42>:
    954f:	00 00       	.word 0
    9551:	00 00       	.word 0
    9553:	00 00       	.word 0
    9555:	00 00       	.word 0
    9557:	00 00       	.word 0
	...

0000955a <.LC43>:
    955a:	42 4f       	.word 0x4f42
    955c:	54 48       	.word 0x4854
    955e:	3f 00       	.word 0x3f

00009560 <.LC44>:
    9560:	42 4f       	.word 0x4f42
    9562:	54 48       	.word 0x4854
    9564:	41 56       	.word 0x5641
    9566:	47 3f       	.word 0x3f47
    9568:	00 42       	.word 0x4200

00009569 <.LC45>:
    9569:	00 00       	.word 0
    956b:	00 00       	.word 0
    956d:	00 00       	.word 0
    956f:	00 00       	.word 0
	...

00009572 <.LC46>:
    9572:	52 45       	.word 0x4552
    9574:	47 00       	.word 0x47

00009576 <.LC47>:
    9576:	52 45       	.word 0x4552
    9578:	47 3f       	.word 0x3f47
    957a:	00 50       	.word 0x5000

0000957b <.LC48>:
    957b:	00 00       	.word 0
    957d:	00 00       	.word 0
    957f:	00 00       	.word 0

00009581 <.LC49>:
    9581:	00 00       	.word 0
    9583:	00 00       	.word 0
    9585:	00 00       	.word 0
	...

00009588 <.LC50>:
    9588:	52 44       	.word 0x4452
    958a:	30 00       	.word 0x30

0000958c <.LC51>:
    958c:	52 44       	.word 0x4452
    958e:	30 3f       	.word 0x3f30
    9590:	00 52       	.word 0x5200

00009591 <.LC52>:
    9591:	00 00       	.word 0
    9593:	00 00       	.word 0

00009595 <.LC53>:
    9595:	00 00       	.word 0
    9597:	00 00       	.word 0
	...

0000959a <.LC54>:
    959a:	52 44       	.word 0x4452
    959c:	32 00       	.word 0x32

0000959e <.LC55>:
    959e:	52 44       	.word 0x4452
    95a0:	32 3f       	.word 0x3f32
    95a2:	00 52       	.word 0x5200

000095a3 <.LC56>:
    95a3:	00 00       	.word 0
    95a5:	00 00       	.word 0

000095a7 <.LC57>:
    95a7:	00 00       	.word 0
    95a9:	00 00       	.word 0
	...

000095ac <.LC58>:
    95ac:	52 44       	.word 0x4452
    95ae:	34 00       	.word 0x34

000095b0 <.LC59>:
    95b0:	52 44       	.word 0x4452
    95b2:	34 3f       	.word 0x3f34
    95b4:	00 52       	.word 0x5200

000095b5 <.LC60>:
    95b5:	00 00       	.word 0
    95b7:	00 00       	.word 0

000095b9 <.LC61>:
    95b9:	00 00       	.word 0
    95bb:	00 00       	.word 0
	...

000095be <.LC62>:
    95be:	52 44       	.word 0x4452
    95c0:	36 00       	.word 0x36

000095c2 <.LC63>:
    95c2:	52 44       	.word 0x4452
    95c4:	36 3f       	.word 0x3f36
    95c6:	00 50       	.word 0x5000

000095c7 <.LC64>:
    95c7:	00 00       	.word 0
    95c9:	00 00       	.word 0
    95cb:	00 00       	.word 0

000095cd <.LC65>:
    95cd:	00 00       	.word 0
    95cf:	00 00       	.word 0
    95d1:	00 00       	.word 0
	...

000095d4 <.LC66>:
    95d4:	52 45       	.word 0x4552
    95d6:	30 00       	.word 0x30

000095d8 <.LC67>:
    95d8:	52 45       	.word 0x4552
    95da:	30 3f       	.word 0x3f30
    95dc:	00 52       	.word 0x5200

000095dd <.LC68>:
    95dd:	00 00       	.word 0
    95df:	00 00       	.word 0

000095e1 <.LC69>:
    95e1:	00 00       	.word 0
    95e3:	00 00       	.word 0
	...

000095e6 <.LC70>:
    95e6:	52 45       	.word 0x4552
    95e8:	32 00       	.word 0x32

000095ea <.LC71>:
    95ea:	52 45       	.word 0x4552
    95ec:	32 3f       	.word 0x3f32
    95ee:	00 52       	.word 0x5200

000095ef <.LC72>:
    95ef:	00 00       	.word 0
    95f1:	00 00       	.word 0

000095f3 <.LC73>:
    95f3:	00 00       	.word 0
    95f5:	00 00       	.word 0
	...

000095f8 <.LC74>:
    95f8:	52 45       	.word 0x4552
    95fa:	34 00       	.word 0x34

000095fc <.LC75>:
    95fc:	52 45       	.word 0x4552
    95fe:	34 3f       	.word 0x3f34
    9600:	00 52       	.word 0x5200

00009601 <.LC76>:
    9601:	00 00       	.word 0
    9603:	00 00       	.word 0

00009605 <.LC77>:
    9605:	00 00       	.word 0
    9607:	00 00       	.word 0
	...

0000960a <.LC78>:
    960a:	52 45       	.word 0x4552
    960c:	36 00       	.word 0x36

0000960e <.LC79>:
    960e:	52 45       	.word 0x4552
    9610:	36 3f       	.word 0x3f36
    9612:	00 52       	.word 0x5200

00009613 <.LC80>:
    9613:	00 00       	.word 0
    9615:	00 00       	.word 0
    9617:	00 00       	.word 0

00009619 <.LC81>:
    9619:	00 00       	.word 0
    961b:	00 00       	.word 0
    961d:	00 00       	.word 0
	...

00009620 <.LC82>:
    9620:	46 4f       	.word 0x4f46
    9622:	52 57       	.word 0x5752
    9624:	41 52       	.word 0x5241
    9626:	44 00       	.word 0x44

00009628 <.LC83>:
    9628:	45 52       	.word 0x5245
    962a:	41 53       	.word 0x5341
    962c:	45 00       	.word 0x45

0000962e <.LC84>:
    962e:	52 45       	.word 0x4552
    9630:	41 44       	.word 0x4441
    9632:	00 57       	.word 0x5700

00009633 <.LC85>:
    9633:	00 00       	.word 0
    9635:	00 00       	.word 0
    9637:	00 00       	.word 0

00009639 <.LC86>:
    9639:	00 00       	.word 0
    963b:	00 00       	.word 0

0000963d <.LC87>:
    963d:	00 00       	.word 0
	...

00009640 <.LC88>:
    9640:	4f 46       	.word 0x464f
    9642:	46 00       	.word 0x46

00009644 <.LC89>:
    9644:	54 4f       	.word 0x4f54
    9646:	47 47       	.word 0x4747
    9648:	4c 45       	.word 0x454c
    964a:	00 31       	.word 0x3100

0000964b <.LC90>:
    964b:	00 00       	.word 0
    964d:	00 00       	.word 0

0000964f <.LC91>:
    964f:	00 00       	.word 0
    9651:	00 00       	.word 0

00009653 <.LC92>:
    9653:	00 00       	.word 0
	...

00009656 <.LC93>:
    9656:	2c 20       	.word 0x202c
    9658:	00 25       	.word 0x2500

00009659 <.LC94>:
    9659:	00 00       	.word 0
    965b:	00 00       	.word 0
    965d:	00 00       	.word 0
    965f:	00 00       	.word 0
    9661:	00 00       	.word 0
    9663:	00 00       	.word 0
    9665:	00 00       	.word 0

00009667 <.LC95>:
    9667:	00 00       	.word 0
    9669:	00 00       	.word 0
    966b:	00 00       	.word 0
    966d:	00 00       	.word 0
    966f:	00 00       	.word 0
    9671:	00 00       	.word 0
	...

00009674 <_Device>:
    9674:	12 01       	.word 0x112
    9676:	00 02       	.word 0x200
    9678:	02 00       	.word 0x2
    967a:	00 40       	.word 0x4000
    967c:	66 66       	.word 0x6666
    967e:	c2 cd       	.word 0xcdc2
    9680:	00 00       	.word 0
    9682:	01 02       	.word 0x201
    9684:	00 01       	.word 0x100

00009686 <_Configuration1>:
    9686:	09 02       	.word 0x209
    9688:	43 00       	.word 0x43
    968a:	02 01       	.word 0x102
    968c:	00 a0       	.word 0xa000
    968e:	32 09       	.word 0x932
    9690:	04 00       	.word 0x4
    9692:	00 01       	.word 0x100
    9694:	02 02       	.word 0x202
    9696:	00 00       	.word 0
    9698:	05 24       	.word 0x2405
    969a:	00 10       	.word 0x1000
    969c:	01 04       	.word 0x401
    969e:	24 02       	.word 0x224
    96a0:	02 05       	.word 0x502
    96a2:	24 06       	.word 0x624
    96a4:	00 01       	.word 0x100
    96a6:	05 24       	.word 0x2405
    96a8:	01 01       	.word 0x101
    96aa:	01 07       	.word 0x701
    96ac:	05 81       	.word 0x8105
    96ae:	03 0a       	.word 0xa03
    96b0:	00 40       	.word 0x4000
    96b2:	09 04       	.word 0x409
    96b4:	01 00       	.word 0x1
    96b6:	02 0a       	.word 0xa02
    96b8:	00 00       	.word 0
    96ba:	00 07       	.word 0x700
    96bc:	05 02       	.word 0x205
    96be:	02 40       	.word 0x4002
    96c0:	00 00       	.word 0
    96c2:	07 05       	.word 0x507
    96c4:	82 02       	.word 0x282
    96c6:	40 00       	.word 0x40
    96c8:	00 00       	.word 0

000096ca <_Configurations>:
    96ca:	86 96       	.word 0x9686

000096cc <_String0>:
    96cc:	04 03       	.word 0x304
    96ce:	09 04       	.word 0x409

000096d0 <_String1>:
    96d0:	1a 03       	.word 0x31a
    96d2:	4f 00       	.word 0x4f
    96d4:	6c 00       	.word 0x6c
    96d6:	69 00       	.word 0x69
    96d8:	6e 00       	.word 0x6e
    96da:	20 00       	.word 0x20
    96dc:	43 00       	.word 0x43
    96de:	6f 00       	.word 0x6f
    96e0:	6c 00       	.word 0x6c
    96e2:	6c 00       	.word 0x6c
    96e4:	65 00       	.word 0x65
    96e6:	67 00       	.word 0x67
    96e8:	65 00       	.word 0x65

000096ea <_String2>:
    96ea:	36 03       	.word 0x336
    96ec:	50 00       	.word 0x50
    96ee:	49 00       	.word 0x49
    96f0:	43 00       	.word 0x43
    96f2:	32 00       	.word 0x32
    96f4:	34 00       	.word 0x34
    96f6:	46 00       	.word 0x46
    96f8:	4a 00       	.word 0x4a
    96fa:	31 00       	.word 0x31
    96fc:	32 00       	.word 0x32
    96fe:	38 00       	.word 0x38
    9700:	47 00       	.word 0x47
    9702:	43 00       	.word 0x43
    9704:	30 00       	.word 0x30
    9706:	30 00       	.word 0x30
    9708:	36 00       	.word 0x36
    970a:	20 00       	.word 0x20
    970c:	43 00       	.word 0x43
    970e:	44 00       	.word 0x44
    9710:	43 00       	.word 0x43
    9712:	20 00       	.word 0x20
    9714:	44 00       	.word 0x44
    9716:	65 00       	.word 0x65
    9718:	76 00       	.word 0x76
    971a:	69 00       	.word 0x69
    971c:	63 00       	.word 0x63
    971e:	65 00       	.word 0x65

00009720 <_Strings>:
    9720:	cc 96       	.word 0x96cc
    9722:	d0 96       	.word 0x96d0
    9724:	ea 96       	.word 0x96ea
Disassembly of section .text:

00001726 <_str2hex>:
                                  { "WRITE", flash_write_handler }};

#define FLASH_TABLE_ENTRIES     sizeof(flash_table) / sizeof(DISPATCH_ENTRY_T)

int16_t str2hex(char *str, uint16_t *num) {
    1726:	04 00 fa    	lnk       #0x4
    1728:	00 0f 78    	mov.w     w0, [w14]
    172a:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    172c:	1e 00 78    	mov.w     [w14], w0
    172e:	00 00 e0    	cp0.w     w0
    1730:	04 00 3a    	bra       NZ, 0x173a <.L12>
        return -1;
    1732:	00 80 eb    	setm.w    w0
    1734:	5a 00 37    	bra       0x17ea <.L3>

00001736 <.L5>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    1736:	1e 0f e8    	inc.w     [w14], [w14]
    1738:	01 00 37    	bra       0x173c <.L4>

0000173a <.L12>:
    173a:	00 00 00    	nop       

0000173c <.L4>:
    173c:	1e 00 78    	mov.w     [w14], w0
    173e:	90 40 78    	mov.b     [w0], w1
    1740:	00 c2 b3    	mov.b     #0x20, w0
    1742:	80 cf 50    	sub.b     w1, w0, [w15]
    1744:	f8 ff 32    	bra       Z, 0x1736 <.L5>
    1746:	1e 00 78    	mov.w     [w14], w0
    1748:	10 40 78    	mov.b     [w0], w0
    174a:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    174c:	f4 ff 32    	bra       Z, 0x1736 <.L5>

    *num = 0;
    174e:	1e 00 90    	mov.w     [w14+2], w0
    1750:	80 00 eb    	clr.w     w1
    1752:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    1754:	45 00 37    	bra       0x17e0 <.L6>

00001756 <.L11>:
        if ((*str >= '0') && (*str <= '9'))
    1756:	1e 00 78    	mov.w     [w14], w0
    1758:	90 40 78    	mov.b     [w0], w1
    175a:	f0 c2 b3    	mov.b     #0x2f, w0
    175c:	80 cf 50    	sub.b     w1, w0, [w15]
    175e:	11 00 34    	bra       LE, 0x1782 <.L7>
    1760:	1e 00 78    	mov.w     [w14], w0
    1762:	90 40 78    	mov.b     [w0], w1
    1764:	90 c3 b3    	mov.b     #0x39, w0
    1766:	80 cf 50    	sub.b     w1, w0, [w15]
    1768:	0c 00 3c    	bra       GT, 0x1782 <.L7>
            *num = (*num << 4) + (*str - '0');
    176a:	1e 00 90    	mov.w     [w14+2], w0
    176c:	10 00 78    	mov.w     [w0], w0
    176e:	c4 00 dd    	sl.w      w0, #0x4, w1
    1770:	1e 00 78    	mov.w     [w14], w0
    1772:	10 40 78    	mov.b     [w0], w0
    1774:	00 00 fb    	se        w0, w0
    1776:	00 80 40    	add.w     w1, w0, w0
    1778:	01 fd 2f    	mov.w     #0xffd0, w1
    177a:	80 80 40    	add.w     w1, w0, w1
    177c:	1e 00 90    	mov.w     [w14+2], w0
    177e:	01 08 78    	mov.w     w1, [w0]
    1780:	2e 00 37    	bra       0x17de <.L8>

00001782 <.L7>:
        else if ((*str >= 'a') && (*str <= 'f'))
    1782:	1e 00 78    	mov.w     [w14], w0
    1784:	90 40 78    	mov.b     [w0], w1
    1786:	00 c6 b3    	mov.b     #0x60, w0
    1788:	80 cf 50    	sub.b     w1, w0, [w15]
    178a:	11 00 34    	bra       LE, 0x17ae <.L9>
    178c:	1e 00 78    	mov.w     [w14], w0
    178e:	90 40 78    	mov.b     [w0], w1
    1790:	60 c6 b3    	mov.b     #0x66, w0
    1792:	80 cf 50    	sub.b     w1, w0, [w15]
    1794:	0c 00 3c    	bra       GT, 0x17ae <.L9>
            *num = (*num << 4) + 10 + (*str - 'a');
    1796:	1e 00 90    	mov.w     [w14+2], w0
    1798:	10 00 78    	mov.w     [w0], w0
    179a:	c4 00 dd    	sl.w      w0, #0x4, w1
    179c:	1e 00 78    	mov.w     [w14], w0
    179e:	10 40 78    	mov.b     [w0], w0
    17a0:	00 00 fb    	se        w0, w0
    17a2:	00 80 40    	add.w     w1, w0, w0
    17a4:	91 fa 2f    	mov.w     #0xffa9, w1
    17a6:	80 80 40    	add.w     w1, w0, w1
    17a8:	1e 00 90    	mov.w     [w14+2], w0
    17aa:	01 08 78    	mov.w     w1, [w0]
    17ac:	18 00 37    	bra       0x17de <.L8>

000017ae <.L9>:
        else if ((*str >= 'A') && (*str <= 'F'))
    17ae:	1e 00 78    	mov.w     [w14], w0
    17b0:	90 40 78    	mov.b     [w0], w1
    17b2:	00 c4 b3    	mov.b     #0x40, w0
    17b4:	80 cf 50    	sub.b     w1, w0, [w15]
    17b6:	11 00 34    	bra       LE, 0x17da <.L10>
    17b8:	1e 00 78    	mov.w     [w14], w0
    17ba:	90 40 78    	mov.b     [w0], w1
    17bc:	60 c4 b3    	mov.b     #0x46, w0
    17be:	80 cf 50    	sub.b     w1, w0, [w15]
    17c0:	0c 00 3c    	bra       GT, 0x17da <.L10>
            *num = (*num << 4) + 10 + (*str - 'A');
    17c2:	1e 00 90    	mov.w     [w14+2], w0
    17c4:	10 00 78    	mov.w     [w0], w0
    17c6:	c4 00 dd    	sl.w      w0, #0x4, w1
    17c8:	1e 00 78    	mov.w     [w14], w0
    17ca:	10 40 78    	mov.b     [w0], w0
    17cc:	00 00 fb    	se        w0, w0
    17ce:	00 80 40    	add.w     w1, w0, w0
    17d0:	91 fc 2f    	mov.w     #0xffc9, w1
    17d2:	80 80 40    	add.w     w1, w0, w1
    17d4:	1e 00 90    	mov.w     [w14+2], w0
    17d6:	01 08 78    	mov.w     w1, [w0]
    17d8:	02 00 37    	bra       0x17de <.L8>

000017da <.L10>:
        else
            return -1;
    17da:	00 80 eb    	setm.w    w0
    17dc:	06 00 37    	bra       0x17ea <.L3>

000017de <.L8>:
        str++;
    17de:	1e 0f e8    	inc.w     [w14], [w14]

000017e0 <.L6>:
    17e0:	1e 00 78    	mov.w     [w14], w0
    17e2:	10 40 78    	mov.b     [w0], w0
    17e4:	00 04 e0    	cp0.b     w0
    17e6:	b7 ff 3a    	bra       NZ, 0x1756 <.L11>
    }
    return 0;
    17e8:	00 00 eb    	clr.w     w0

000017ea <.L3>:
}
    17ea:	00 80 fa    	ulnk      
    17ec:	00 00 06    	return    

000017ee <_str2num>:

int16_t str2num(char *str, uint16_t *num) {
    17ee:	04 00 fa    	lnk       #0x4
    17f0:	00 0f 78    	mov.w     w0, [w14]
    17f2:	11 07 98    	mov.w     w1, [w14+2]
    if (!str)
    17f4:	1e 00 78    	mov.w     [w14], w0
    17f6:	00 00 e0    	cp0.w     w0
    17f8:	04 00 3a    	bra       NZ, 0x1802 <.L21>
        return -1;
    17fa:	00 80 eb    	setm.w    w0
    17fc:	2f 00 37    	bra       0x185c <.L15>

000017fe <.L17>:

    while ((*str == ' ') || (*str == '\t'))
        str++;
    17fe:	1e 0f e8    	inc.w     [w14], [w14]
    1800:	01 00 37    	bra       0x1804 <.L16>

00001802 <.L21>:
    1802:	00 00 00    	nop       

00001804 <.L16>:
    1804:	1e 00 78    	mov.w     [w14], w0
    1806:	90 40 78    	mov.b     [w0], w1
    1808:	00 c2 b3    	mov.b     #0x20, w0
    180a:	80 cf 50    	sub.b     w1, w0, [w15]
    180c:	f8 ff 32    	bra       Z, 0x17fe <.L17>
    180e:	1e 00 78    	mov.w     [w14], w0
    1810:	10 40 78    	mov.b     [w0], w0
    1812:	e9 4f 50    	sub.b     w0, #0x9, [w15]
    1814:	f4 ff 32    	bra       Z, 0x17fe <.L17>

    *num = 0;
    1816:	1e 00 90    	mov.w     [w14+2], w0
    1818:	80 00 eb    	clr.w     w1
    181a:	01 08 78    	mov.w     w1, [w0]
    while (*str) {
    181c:	1a 00 37    	bra       0x1852 <.L18>

0000181e <.L20>:
        if ((*str >= '0') && (*str <= '9'))
    181e:	1e 00 78    	mov.w     [w14], w0
    1820:	90 40 78    	mov.b     [w0], w1
    1822:	f0 c2 b3    	mov.b     #0x2f, w0
    1824:	80 cf 50    	sub.b     w1, w0, [w15]
    1826:	13 00 34    	bra       LE, 0x184e <.L19>
    1828:	1e 00 78    	mov.w     [w14], w0
    182a:	90 40 78    	mov.b     [w0], w1
    182c:	90 c3 b3    	mov.b     #0x39, w0
    182e:	80 cf 50    	sub.b     w1, w0, [w15]
    1830:	0e 00 3c    	bra       GT, 0x184e <.L19>
            *num = *num * 10 + (*str - '0');
    1832:	1e 00 90    	mov.w     [w14+2], w0
    1834:	10 00 78    	mov.w     [w0], w0
    1836:	6a 00 b9    	mul.su    w0, #0xa, w0
    1838:	80 00 78    	mov.w     w0, w1
    183a:	1e 00 78    	mov.w     [w14], w0
    183c:	10 40 78    	mov.b     [w0], w0
    183e:	00 00 fb    	se        w0, w0
    1840:	00 80 40    	add.w     w1, w0, w0
    1842:	01 fd 2f    	mov.w     #0xffd0, w1
    1844:	80 80 40    	add.w     w1, w0, w1
    1846:	1e 00 90    	mov.w     [w14+2], w0
    1848:	01 08 78    	mov.w     w1, [w0]
        else
            return -1;
        str++;
    184a:	1e 0f e8    	inc.w     [w14], [w14]
    184c:	02 00 37    	bra       0x1852 <.L18>

0000184e <.L19>:
    184e:	00 80 eb    	setm.w    w0
    1850:	05 00 37    	bra       0x185c <.L15>

00001852 <.L18>:
    1852:	1e 00 78    	mov.w     [w14], w0
    1854:	10 40 78    	mov.b     [w0], w0
    1856:	00 04 e0    	cp0.b     w0
    1858:	e2 ff 3a    	bra       NZ, 0x181e <.L20>
    }
    return 0;
    185a:	00 00 eb    	clr.w     w0

0000185c <.L15>:
}
    185c:	00 80 fa    	ulnk      
    185e:	00 00 06    	return    

00001860 <_hex2str>:

void hex2str(uint16_t num, char *str) {
    1860:	08 00 fa    	lnk       #0x8
    1862:	20 07 98    	mov.w     w0, [w14+4]
    1864:	31 07 98    	mov.w     w1, [w14+6]
    uint16_t digit, i;

    for (i = 0; i < 4; i++) {
    1866:	00 00 eb    	clr.w     w0
    1868:	00 0f 78    	mov.w     w0, [w14]
    186a:	1a 00 37    	bra       0x18a0 <.L23>

0000186c <.L26>:
        digit = num >> 12;
    186c:	2e 00 90    	mov.w     [w14+4], w0
    186e:	4c 00 de    	lsr.w     w0, #0xc, w0
    1870:	10 07 98    	mov.w     w0, [w14+2]
        if (digit < 10)
    1872:	1e 00 90    	mov.w     [w14+2], w0
    1874:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    1876:	07 00 3e    	bra       GTU, 0x1886 <.L24>
            *str = '0' + (uint8_t)digit;
    1878:	1e 00 90    	mov.w     [w14+2], w0
    187a:	00 40 78    	mov.b     w0, w0
    187c:	00 43 b0    	add.b     #0x30, w0
    187e:	80 40 78    	mov.b     w0, w1
    1880:	3e 00 90    	mov.w     [w14+6], w0
    1882:	01 48 78    	mov.b     w1, [w0]
    1884:	06 00 37    	bra       0x1892 <.L25>

00001886 <.L24>:
        else
            *str = 'A' + (uint8_t)digit - 10;
    1886:	1e 00 90    	mov.w     [w14+2], w0
    1888:	00 40 78    	mov.b     w0, w0
    188a:	70 43 b0    	add.b     #0x37, w0
    188c:	80 40 78    	mov.b     w0, w1
    188e:	3e 00 90    	mov.w     [w14+6], w0
    1890:	01 48 78    	mov.b     w1, [w0]

00001892 <.L25>:
        str++;
    1892:	3e 00 90    	mov.w     [w14+6], w0
    1894:	00 00 e8    	inc.w     w0, w0
    1896:	30 07 98    	mov.w     w0, [w14+6]
        num = (num & 0x0FFF) << 4;
    1898:	2e 00 90    	mov.w     [w14+4], w0
    189a:	44 00 dd    	sl.w      w0, #0x4, w0
    189c:	20 07 98    	mov.w     w0, [w14+4]
    189e:	1e 0f e8    	inc.w     [w14], [w14]

000018a0 <.L23>:
    18a0:	1e 00 78    	mov.w     [w14], w0
    18a2:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18a4:	e3 ff 36    	bra       LEU, 0x186c <.L26>
    }
    *str = '\0';
    18a6:	3e 00 90    	mov.w     [w14+6], w0
    18a8:	80 40 eb    	clr.b     w1
    18aa:	01 48 78    	mov.b     w1, [w0]
}
    18ac:	00 80 fa    	ulnk      
    18ae:	00 00 06    	return    

000018b0 <_hex2str_alt>:

void hex2str_alt(uint16_t num, char *str) {
    18b0:	0a 00 fa    	lnk       #0xa
    18b2:	30 07 98    	mov.w     w0, [w14+6]
    18b4:	41 07 98    	mov.w     w1, [w14+8]
    uint16_t digit, i, hit_nonzero_digit = FALSE;
    18b6:	00 00 eb    	clr.w     w0
    18b8:	10 07 98    	mov.w     w0, [w14+2]

    for (i = 0; i < 4; i++) {
    18ba:	00 00 eb    	clr.w     w0
    18bc:	00 0f 78    	mov.w     w0, [w14]
    18be:	25 00 37    	bra       0x190a <.L28>

000018c0 <.L34>:
        digit = num >> 12;
    18c0:	3e 00 90    	mov.w     [w14+6], w0
    18c2:	4c 00 de    	lsr.w     w0, #0xc, w0
    18c4:	20 07 98    	mov.w     w0, [w14+4]
        if (digit)
    18c6:	2e 00 90    	mov.w     [w14+4], w0
    18c8:	00 00 e0    	cp0.w     w0
    18ca:	02 00 32    	bra       Z, 0x18d0 <.L29>
            hit_nonzero_digit = TRUE;
    18cc:	10 00 20    	mov.w     #0x1, w0
    18ce:	10 07 98    	mov.w     w0, [w14+2]

000018d0 <.L29>:
        if ((hit_nonzero_digit) || (i == 3)) {
    18d0:	1e 00 90    	mov.w     [w14+2], w0
    18d2:	00 00 e0    	cp0.w     w0
    18d4:	03 00 3a    	bra       NZ, 0x18dc <.L30>
    18d6:	1e 00 78    	mov.w     [w14], w0
    18d8:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    18da:	13 00 3a    	bra       NZ, 0x1902 <.L31>

000018dc <.L30>:
            if (digit < 10)
    18dc:	2e 00 90    	mov.w     [w14+4], w0
    18de:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    18e0:	07 00 3e    	bra       GTU, 0x18f0 <.L32>
                *str = '0' + (uint8_t)digit;
    18e2:	2e 00 90    	mov.w     [w14+4], w0
    18e4:	00 40 78    	mov.b     w0, w0
    18e6:	00 43 b0    	add.b     #0x30, w0
    18e8:	80 40 78    	mov.b     w0, w1
    18ea:	4e 00 90    	mov.w     [w14+8], w0
    18ec:	01 48 78    	mov.b     w1, [w0]
    18ee:	06 00 37    	bra       0x18fc <.L33>

000018f0 <.L32>:
            else
                *str = 'A' + (uint8_t)digit - 10;
    18f0:	2e 00 90    	mov.w     [w14+4], w0
    18f2:	00 40 78    	mov.b     w0, w0
    18f4:	70 43 b0    	add.b     #0x37, w0
    18f6:	80 40 78    	mov.b     w0, w1
    18f8:	4e 00 90    	mov.w     [w14+8], w0
    18fa:	01 48 78    	mov.b     w1, [w0]

000018fc <.L33>:
            str++;
    18fc:	4e 00 90    	mov.w     [w14+8], w0
    18fe:	00 00 e8    	inc.w     w0, w0
    1900:	40 07 98    	mov.w     w0, [w14+8]

00001902 <.L31>:
        }
        num = (num & 0x0FFF) << 4;
    1902:	3e 00 90    	mov.w     [w14+6], w0
    1904:	44 00 dd    	sl.w      w0, #0x4, w0
    1906:	30 07 98    	mov.w     w0, [w14+6]
    1908:	1e 0f e8    	inc.w     [w14], [w14]

0000190a <.L28>:
    190a:	1e 00 78    	mov.w     [w14], w0
    190c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    190e:	d8 ff 36    	bra       LEU, 0x18c0 <.L34>
    }
    *str = '\0';
    1910:	4e 00 90    	mov.w     [w14+8], w0
    1912:	80 40 eb    	clr.b     w1
    1914:	01 48 78    	mov.b     w1, [w0]
}
    1916:	00 80 fa    	ulnk      
    1918:	00 00 06    	return    

0000191a <_str_cmp>:

int16_t str_cmp(char *str1, char *str2) {
    191a:	04 00 fa    	lnk       #0x4
    191c:	00 0f 78    	mov.w     w0, [w14]
    191e:	11 07 98    	mov.w     w1, [w14+2]
    while ((*str1) && (*str1 == *str2)) {
    1920:	04 00 37    	bra       0x192a <.L36>

00001922 <.L38>:
        str1++;
    1922:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    1924:	1e 00 90    	mov.w     [w14+2], w0
    1926:	00 00 e8    	inc.w     w0, w0
    1928:	10 07 98    	mov.w     w0, [w14+2]

0000192a <.L36>:
    192a:	1e 00 78    	mov.w     [w14], w0
    192c:	10 40 78    	mov.b     [w0], w0
    192e:	00 04 e0    	cp0.b     w0
    1930:	06 00 32    	bra       Z, 0x193e <.L37>
    1932:	1e 00 78    	mov.w     [w14], w0
    1934:	90 40 78    	mov.b     [w0], w1
    1936:	1e 00 90    	mov.w     [w14+2], w0
    1938:	10 40 78    	mov.b     [w0], w0
    193a:	80 cf 50    	sub.b     w1, w0, [w15]
    193c:	f2 ff 32    	bra       Z, 0x1922 <.L38>

0000193e <.L37>:
    }

    if (*str1 == *str2)
    193e:	1e 00 78    	mov.w     [w14], w0
    1940:	90 40 78    	mov.b     [w0], w1
    1942:	1e 00 90    	mov.w     [w14+2], w0
    1944:	10 40 78    	mov.b     [w0], w0
    1946:	80 cf 50    	sub.b     w1, w0, [w15]
    1948:	02 00 3a    	bra       NZ, 0x194e <.L39>
        return 0;
    194a:	00 00 eb    	clr.w     w0
    194c:	09 00 37    	bra       0x1960 <.L40>

0000194e <.L39>:
    else if (*str1 < *str2)
    194e:	1e 00 78    	mov.w     [w14], w0
    1950:	90 40 78    	mov.b     [w0], w1
    1952:	1e 00 90    	mov.w     [w14+2], w0
    1954:	10 40 78    	mov.b     [w0], w0
    1956:	80 cf 50    	sub.b     w1, w0, [w15]
    1958:	02 00 3d    	bra       GE, 0x195e <.L41>
        return -1;
    195a:	00 80 eb    	setm.w    w0
    195c:	01 00 37    	bra       0x1960 <.L40>

0000195e <.L41>:
    else
        return 1;
    195e:	10 00 20    	mov.w     #0x1, w0

00001960 <.L40>:
}
    1960:	00 80 fa    	ulnk      
    1962:	00 00 06    	return    

00001964 <_str_ncmp>:

int16_t str_ncmp(char *str1, char *str2, uint16_t n) {
    1964:	06 00 fa    	lnk       #0x6
    1966:	00 0f 78    	mov.w     w0, [w14]
    1968:	11 07 98    	mov.w     w1, [w14+2]
    196a:	22 07 98    	mov.w     w2, [w14+4]
    if (n == 0)
    196c:	2e 00 90    	mov.w     [w14+4], w0
    196e:	00 00 e0    	cp0.w     w0
    1970:	07 00 3a    	bra       NZ, 0x1980 <.L50>
        return 0;
    1972:	00 00 eb    	clr.w     w0
    1974:	2b 00 37    	bra       0x19cc <.L44>

00001976 <.L47>:

    while ((*str1) && (*str2) && (*str1 == *str2) && (--n)) {
        str1++;
    1976:	1e 0f e8    	inc.w     [w14], [w14]
        str2++;
    1978:	1e 00 90    	mov.w     [w14+2], w0
    197a:	00 00 e8    	inc.w     w0, w0
    197c:	10 07 98    	mov.w     w0, [w14+2]
    197e:	01 00 37    	bra       0x1982 <.L45>

00001980 <.L50>:
    1980:	00 00 00    	nop       

00001982 <.L45>:
    1982:	1e 00 78    	mov.w     [w14], w0
    1984:	10 40 78    	mov.b     [w0], w0
    1986:	00 04 e0    	cp0.b     w0
    1988:	10 00 32    	bra       Z, 0x19aa <.L46>
    198a:	1e 00 90    	mov.w     [w14+2], w0
    198c:	10 40 78    	mov.b     [w0], w0
    198e:	00 04 e0    	cp0.b     w0
    1990:	0c 00 32    	bra       Z, 0x19aa <.L46>
    1992:	1e 00 78    	mov.w     [w14], w0
    1994:	90 40 78    	mov.b     [w0], w1
    1996:	1e 00 90    	mov.w     [w14+2], w0
    1998:	10 40 78    	mov.b     [w0], w0
    199a:	80 cf 50    	sub.b     w1, w0, [w15]
    199c:	06 00 3a    	bra       NZ, 0x19aa <.L46>
    199e:	2e 00 90    	mov.w     [w14+4], w0
    19a0:	00 00 e9    	dec.w     w0, w0
    19a2:	20 07 98    	mov.w     w0, [w14+4]
    19a4:	2e 00 90    	mov.w     [w14+4], w0
    19a6:	00 00 e0    	cp0.w     w0
    19a8:	e6 ff 3a    	bra       NZ, 0x1976 <.L47>

000019aa <.L46>:
    }

    if (*str1 == *str2)
    19aa:	1e 00 78    	mov.w     [w14], w0
    19ac:	90 40 78    	mov.b     [w0], w1
    19ae:	1e 00 90    	mov.w     [w14+2], w0
    19b0:	10 40 78    	mov.b     [w0], w0
    19b2:	80 cf 50    	sub.b     w1, w0, [w15]
    19b4:	02 00 3a    	bra       NZ, 0x19ba <.L48>
        return 0;
    19b6:	00 00 eb    	clr.w     w0
    19b8:	09 00 37    	bra       0x19cc <.L44>

000019ba <.L48>:
    else if (*str1 < *str2)
    19ba:	1e 00 78    	mov.w     [w14], w0
    19bc:	90 40 78    	mov.b     [w0], w1
    19be:	1e 00 90    	mov.w     [w14+2], w0
    19c0:	10 40 78    	mov.b     [w0], w0
    19c2:	80 cf 50    	sub.b     w1, w0, [w15]
    19c4:	02 00 3d    	bra       GE, 0x19ca <.L49>
        return -1;
    19c6:	00 80 eb    	setm.w    w0
    19c8:	01 00 37    	bra       0x19cc <.L44>

000019ca <.L49>:
    else
        return 1;
    19ca:	10 00 20    	mov.w     #0x1, w0

000019cc <.L44>:
}
    19cc:	00 80 fa    	ulnk      
    19ce:	00 00 06    	return    

000019d0 <_str_tok_r>:

char *str_tok_r(char *str, char *delim, char **save_str) {
    19d0:	0c 00 fa    	lnk       #0xc
    19d2:	30 07 98    	mov.w     w0, [w14+6]
    19d4:	41 07 98    	mov.w     w1, [w14+8]
    19d6:	52 07 98    	mov.w     w2, [w14+10]
    char *spos, *dpos, *token_start;

    if (!(str) && !(*save_str)) 
    19d8:	3e 00 90    	mov.w     [w14+6], w0
    19da:	00 00 e0    	cp0.w     w0
    19dc:	06 00 3a    	bra       NZ, 0x19ea <.L52>
    19de:	5e 00 90    	mov.w     [w14+10], w0
    19e0:	10 00 78    	mov.w     [w0], w0
    19e2:	00 00 e0    	cp0.w     w0
    19e4:	02 00 3a    	bra       NZ, 0x19ea <.L52>
        return (char *)NULL;
    19e6:	00 00 eb    	clr.w     w0
    19e8:	60 00 37    	bra       0x1aaa <.L53>

000019ea <.L52>:

    // Find the first non-delimiter character in the string
    for (spos = (str) ? str : *save_str; *spos; spos++) {
    19ea:	3e 00 90    	mov.w     [w14+6], w0
    19ec:	00 00 e0    	cp0.w     w0
    19ee:	03 00 3a    	bra       NZ, 0x19f6 <.L54>
    19f0:	5e 00 90    	mov.w     [w14+10], w0
    19f2:	10 00 78    	mov.w     [w0], w0
    19f4:	01 00 37    	bra       0x19f8 <.L55>

000019f6 <.L54>:
    19f6:	3e 00 90    	mov.w     [w14+6], w0

000019f8 <.L55>:
    19f8:	00 0f 78    	mov.w     w0, [w14]
    19fa:	17 00 37    	bra       0x1a2a <.L56>

000019fc <.L63>:
        for (dpos = delim; *dpos; dpos++) {
    19fc:	ce 00 90    	mov.w     [w14+8], w1
    19fe:	11 07 98    	mov.w     w1, [w14+2]
    1a00:	09 00 37    	bra       0x1a14 <.L57>

00001a02 <.L60>:
            if (*spos == *dpos)
    1a02:	1e 00 78    	mov.w     [w14], w0
    1a04:	90 40 78    	mov.b     [w0], w1
    1a06:	1e 00 90    	mov.w     [w14+2], w0
    1a08:	10 40 78    	mov.b     [w0], w0
    1a0a:	80 cf 50    	sub.b     w1, w0, [w15]
    1a0c:	08 00 32    	bra       Z, 0x1a1e <.L75>
    1a0e:	1e 00 90    	mov.w     [w14+2], w0
    1a10:	00 00 e8    	inc.w     w0, w0
    1a12:	10 07 98    	mov.w     w0, [w14+2]

00001a14 <.L57>:
    1a14:	1e 00 90    	mov.w     [w14+2], w0
    1a16:	10 40 78    	mov.b     [w0], w0
    1a18:	00 04 e0    	cp0.b     w0
    1a1a:	f3 ff 3a    	bra       NZ, 0x1a02 <.L60>
    1a1c:	01 00 37    	bra       0x1a20 <.L59>

00001a1e <.L75>:
                break;
    1a1e:	00 00 00    	nop       

00001a20 <.L59>:
        }
        if (*dpos == '\0')
    1a20:	1e 00 90    	mov.w     [w14+2], w0
    1a22:	10 40 78    	mov.b     [w0], w0
    1a24:	00 04 e0    	cp0.b     w0
    1a26:	06 00 32    	bra       Z, 0x1a34 <.L76>
    1a28:	1e 0f e8    	inc.w     [w14], [w14]

00001a2a <.L56>:
    1a2a:	1e 00 78    	mov.w     [w14], w0
    1a2c:	10 40 78    	mov.b     [w0], w0
    1a2e:	00 04 e0    	cp0.b     w0
    1a30:	e5 ff 3a    	bra       NZ, 0x19fc <.L63>
    1a32:	01 00 37    	bra       0x1a36 <.L62>

00001a34 <.L76>:
            break;
    1a34:	00 00 00    	nop       

00001a36 <.L62>:
    }
    if (*spos)
    1a36:	1e 00 78    	mov.w     [w14], w0
    1a38:	10 40 78    	mov.b     [w0], w0
    1a3a:	00 04 e0    	cp0.b     w0
    1a3c:	03 00 32    	bra       Z, 0x1a44 <.L64>
        token_start = spos;
    1a3e:	9e 00 78    	mov.w     [w14], w1
    1a40:	21 07 98    	mov.w     w1, [w14+4]
    else {
        *save_str = (char *)NULL;
        return (char *)NULL;
    }

    // Find the first delimiter character in the string
    for (; *spos; spos++) {
    1a42:	1e 00 37    	bra       0x1a80 <.L65>

00001a44 <.L64>:
    1a44:	5e 00 90    	mov.w     [w14+10], w0
    1a46:	80 00 eb    	clr.w     w1
    1a48:	01 08 78    	mov.w     w1, [w0]
    1a4a:	00 00 eb    	clr.w     w0
    1a4c:	2e 00 37    	bra       0x1aaa <.L53>

00001a4e <.L72>:
        for (dpos = delim; *dpos; dpos++) {
    1a4e:	ce 00 90    	mov.w     [w14+8], w1
    1a50:	11 07 98    	mov.w     w1, [w14+2]
    1a52:	09 00 37    	bra       0x1a66 <.L66>

00001a54 <.L69>:
            if (*spos == *dpos)
    1a54:	1e 00 78    	mov.w     [w14], w0
    1a56:	90 40 78    	mov.b     [w0], w1
    1a58:	1e 00 90    	mov.w     [w14+2], w0
    1a5a:	10 40 78    	mov.b     [w0], w0
    1a5c:	80 cf 50    	sub.b     w1, w0, [w15]
    1a5e:	08 00 32    	bra       Z, 0x1a70 <.L77>
    1a60:	1e 00 90    	mov.w     [w14+2], w0
    1a62:	00 00 e8    	inc.w     w0, w0
    1a64:	10 07 98    	mov.w     w0, [w14+2]

00001a66 <.L66>:
    1a66:	1e 00 90    	mov.w     [w14+2], w0
    1a68:	10 40 78    	mov.b     [w0], w0
    1a6a:	00 04 e0    	cp0.b     w0
    1a6c:	f3 ff 3a    	bra       NZ, 0x1a54 <.L69>
    1a6e:	01 00 37    	bra       0x1a72 <.L68>

00001a70 <.L77>:
                break;
    1a70:	00 00 00    	nop       

00001a72 <.L68>:
        }
        if (*spos == *dpos)
    1a72:	1e 00 78    	mov.w     [w14], w0
    1a74:	90 40 78    	mov.b     [w0], w1
    1a76:	1e 00 90    	mov.w     [w14+2], w0
    1a78:	10 40 78    	mov.b     [w0], w0
    1a7a:	80 cf 50    	sub.b     w1, w0, [w15]
    1a7c:	06 00 32    	bra       Z, 0x1a8a <.L78>
    1a7e:	1e 0f e8    	inc.w     [w14], [w14]

00001a80 <.L65>:
    1a80:	1e 00 78    	mov.w     [w14], w0
    1a82:	10 40 78    	mov.b     [w0], w0
    1a84:	00 04 e0    	cp0.b     w0
    1a86:	e3 ff 3a    	bra       NZ, 0x1a4e <.L72>
    1a88:	01 00 37    	bra       0x1a8c <.L71>

00001a8a <.L78>:
            break;
    1a8a:	00 00 00    	nop       

00001a8c <.L71>:
    }
    if (*spos) {
    1a8c:	1e 00 78    	mov.w     [w14], w0
    1a8e:	10 40 78    	mov.b     [w0], w0
    1a90:	00 04 e0    	cp0.b     w0
    1a92:	07 00 32    	bra       Z, 0x1aa2 <.L73>
        *spos = '\0';
    1a94:	1e 00 78    	mov.w     [w14], w0
    1a96:	80 40 eb    	clr.b     w1
    1a98:	01 48 78    	mov.b     w1, [w0]
        *save_str = spos + 1;
    1a9a:	9e 00 e8    	inc.w     [w14], w1
    1a9c:	5e 00 90    	mov.w     [w14+10], w0
    1a9e:	01 08 78    	mov.w     w1, [w0]
    1aa0:	03 00 37    	bra       0x1aa8 <.L74>

00001aa2 <.L73>:
    } else {
        *save_str = (char *)NULL;
    1aa2:	5e 00 90    	mov.w     [w14+10], w0
    1aa4:	80 00 eb    	clr.w     w1
    1aa6:	01 08 78    	mov.w     w1, [w0]

00001aa8 <.L74>:
    }

    return token_start;
    1aa8:	2e 00 90    	mov.w     [w14+4], w0

00001aaa <.L53>:
}
    1aaa:	00 80 fa    	ulnk      
    1aac:	00 00 06    	return    

00001aae <_ui_handler>:

// UI commands
void ui_handler(char *args) {
    1aae:	08 00 fa    	lnk       #0x8
    1ab0:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1ab2:	00 00 eb    	clr.w     w0
    1ab4:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1ab6:	64 00 47    	add.w     w14, #0x4, w0
    1ab8:	00 01 78    	mov.w     w0, w2
    1aba:	91 63 29    	mov.w     #0x9639, w1
    1abc:	3e 00 90    	mov.w     [w14+6], w0
    1abe:	88 ff 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1ac0:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1ac2:	1e 00 90    	mov.w     [w14+2], w0
    1ac4:	00 00 e0    	cp0.w     w0
    1ac6:	1a 00 32    	bra       Z, 0x1afc <.L79>
        for (i = 0; i < UI_TABLE_ENTRIES; i++) {
    1ac8:	00 00 eb    	clr.w     w0
    1aca:	00 0f 78    	mov.w     w0, [w14]
    1acc:	14 00 37    	bra       0x1af6 <.L81>

00001ace <.L83>:
            if (str_cmp(command, ui_table[i].command) == 0) {
    1ace:	1e 00 78    	mov.w     [w14], w0
    1ad0:	c2 00 dd    	sl.w      w0, #0x2, w1
    1ad2:	60 32 21    	mov.w     #0x1326, w0
    1ad4:	00 80 40    	add.w     w1, w0, w0
    1ad6:	10 00 78    	mov.w     [w0], w0
    1ad8:	80 00 78    	mov.w     w0, w1
    1ada:	1e 00 90    	mov.w     [w14+2], w0
    1adc:	1e ff 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1ade:	00 00 e0    	cp0.w     w0
    1ae0:	09 00 3a    	bra       NZ, 0x1af4 <.L82>
                ui_table[i].handler(remainder);
    1ae2:	1e 00 78    	mov.w     [w14], w0
    1ae4:	42 00 dd    	sl.w      w0, #0x2, w0
    1ae6:	80 80 e8    	inc2.w    w0, w1
    1ae8:	60 32 21    	mov.w     #0x1326, w0
    1aea:	00 80 40    	add.w     w1, w0, w0
    1aec:	90 00 78    	mov.w     [w0], w1
    1aee:	2e 00 90    	mov.w     [w14+4], w0
    1af0:	01 00 01    	call      w1
                break;
    1af2:	04 00 37    	bra       0x1afc <.L79>

00001af4 <.L82>:
    1af4:	1e 0f e8    	inc.w     [w14], [w14]

00001af6 <.L81>:
    1af6:	1e 00 78    	mov.w     [w14], w0
    1af8:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1afa:	e9 ff 36    	bra       LEU, 0x1ace <.L83>

00001afc <.L79>:
            }
        }
    }
}
    1afc:	00 80 fa    	ulnk      
    1afe:	00 00 06    	return    

00001b00 <_led1_handler>:

void led1_handler(char *args) {
    1b00:	08 00 fa    	lnk       #0x8
    1b02:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1b04:	00 00 eb    	clr.w     w0
    1b06:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1b08:	0e 80 e8    	inc2.w    w14, w0
    1b0a:	00 01 78    	mov.w     w0, w2
    1b0c:	91 63 29    	mov.w     #0x9639, w1
    1b0e:	3e 00 90    	mov.w     [w14+6], w0
    1b10:	5f ff 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1b12:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1b14:	1e 00 78    	mov.w     [w14], w0
    1b16:	00 00 e0    	cp0.w     w0
    1b18:	36 00 32    	bra       Z, 0x1b86 <.L84>
        if (str_cmp(token, "ON") == 0) {
    1b1a:	d1 63 29    	mov.w     #0x963d, w1
    1b1c:	1e 00 78    	mov.w     [w14], w0
    1b1e:	fd fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1b20:	00 00 e0    	cp0.w     w0
    1b22:	02 00 3a    	bra       NZ, 0x1b28 <.L86>
            LED1 = ON;
    1b24:	dc e2 a8    	bset.b    0x2dc, #0x7
    1b26:	2f 00 37    	bra       0x1b86 <.L84>

00001b28 <.L86>:
        } else if (str_cmp(token, "OFF") == 0) {
    1b28:	01 64 29    	mov.w     #0x9640, w1
    1b2a:	1e 00 78    	mov.w     [w14], w0
    1b2c:	f6 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1b2e:	00 00 e0    	cp0.w     w0
    1b30:	02 00 3a    	bra       NZ, 0x1b36 <.L87>
            LED1 = OFF;
    1b32:	dc e2 a9    	bclr.b    0x2dc, #0x7
    1b34:	28 00 37    	bra       0x1b86 <.L84>

00001b36 <.L87>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1b36:	41 64 29    	mov.w     #0x9644, w1
    1b38:	1e 00 78    	mov.w     [w14], w0
    1b3a:	ef fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1b3c:	00 00 e0    	cp0.w     w0
    1b3e:	10 00 3a    	bra       NZ, 0x1b60 <.L88>
            LED1 = !LED1;
    1b40:	e1 16 80    	mov.w     0x2dc, w1
    1b42:	00 08 20    	mov.w     #0x80, w0
    1b44:	00 80 60    	and.w     w1, w0, w0
    1b46:	00 f0 a7    	btsc.w    w0, #0xf
    1b48:	00 00 ea    	neg.w     w0, w0
    1b4a:	00 00 e9    	dec.w     w0, w0
    1b4c:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b4e:	00 40 78    	mov.b     w0, w0
    1b50:	00 80 fb    	ze        w0, w0
    1b52:	61 00 60    	and.w     w0, #0x1, w0
    1b54:	47 00 dd    	sl.w      w0, #0x7, w0
    1b56:	e1 16 80    	mov.w     0x2dc, w1
    1b58:	01 70 a1    	bclr.w    w1, #0x7
    1b5a:	01 00 70    	ior.w     w0, w1, w0
    1b5c:	e0 16 88    	mov.w     w0, 0x2dc
    1b5e:	13 00 37    	bra       0x1b86 <.L84>

00001b60 <.L88>:
        } else if (str2hex(token, &val) == 0) {
    1b60:	64 00 47    	add.w     w14, #0x4, w0
    1b62:	80 00 78    	mov.w     w0, w1
    1b64:	1e 00 78    	mov.w     [w14], w0
    1b66:	df fd 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1b68:	00 00 e0    	cp0.w     w0
    1b6a:	0d 00 3a    	bra       NZ, 0x1b86 <.L84>
            LED1 = (val) ? 1 : 0;
    1b6c:	2e 00 90    	mov.w     [w14+4], w0
    1b6e:	00 f0 a7    	btsc.w    w0, #0xf
    1b70:	00 00 ea    	neg.w     w0, w0
    1b72:	00 00 ea    	neg.w     w0, w0
    1b74:	4f 00 de    	lsr.w     w0, #0xf, w0
    1b76:	00 40 78    	mov.b     w0, w0
    1b78:	00 80 fb    	ze        w0, w0
    1b7a:	61 00 60    	and.w     w0, #0x1, w0
    1b7c:	47 00 dd    	sl.w      w0, #0x7, w0
    1b7e:	e1 16 80    	mov.w     0x2dc, w1
    1b80:	01 70 a1    	bclr.w    w1, #0x7
    1b82:	01 00 70    	ior.w     w0, w1, w0
    1b84:	e0 16 88    	mov.w     w0, 0x2dc

00001b86 <.L84>:
        }
    }
}
    1b86:	00 80 fa    	ulnk      
    1b88:	00 00 06    	return    

00001b8a <_led1Q_handler>:

void led1Q_handler(char *args) {
    1b8a:	02 00 fa    	lnk       #0x2
    1b8c:	00 0f 78    	mov.w     w0, [w14]
    if (LED1 == ON)
    1b8e:	e1 16 80    	mov.w     0x2dc, w1
    1b90:	00 08 20    	mov.w     #0x80, w0
    1b92:	00 80 60    	and.w     w1, w0, w0
    1b94:	00 00 e0    	cp0.w     w0
    1b96:	04 00 32    	bra       Z, 0x1ba0 <.L90>
        parser_puts("1\r\n");
    1b98:	d1 41 80    	mov.w     0x83a, w1
    1b9a:	b0 64 29    	mov.w     #0x964b, w0
    1b9c:	01 00 01    	call      w1
    1b9e:	03 00 37    	bra       0x1ba6 <.L89>

00001ba0 <.L90>:
    else
        parser_puts("0\r\n");
    1ba0:	d1 41 80    	mov.w     0x83a, w1
    1ba2:	f0 64 29    	mov.w     #0x964f, w0
    1ba4:	01 00 01    	call      w1

00001ba6 <.L89>:
}
    1ba6:	00 80 fa    	ulnk      
    1ba8:	00 00 06    	return    

00001baa <_led2_handler>:

void led2_handler(char *args) {
    1baa:	08 00 fa    	lnk       #0x8
    1bac:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1bae:	00 00 eb    	clr.w     w0
    1bb0:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1bb2:	0e 80 e8    	inc2.w    w14, w0
    1bb4:	00 01 78    	mov.w     w0, w2
    1bb6:	91 63 29    	mov.w     #0x9639, w1
    1bb8:	3e 00 90    	mov.w     [w14+6], w0
    1bba:	0a ff 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1bbc:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1bbe:	1e 00 78    	mov.w     [w14], w0
    1bc0:	00 00 e0    	cp0.w     w0
    1bc2:	33 00 32    	bra       Z, 0x1c2a <.L92>
        if (str_cmp(token, "ON") == 0) {
    1bc4:	d1 63 29    	mov.w     #0x963d, w1
    1bc6:	1e 00 78    	mov.w     [w14], w0
    1bc8:	a8 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1bca:	00 00 e0    	cp0.w     w0
    1bcc:	02 00 3a    	bra       NZ, 0x1bd2 <.L94>
            LED2 = ON;
    1bce:	ec 02 a8    	bset.b    0x2ec, #0x0
    1bd0:	2c 00 37    	bra       0x1c2a <.L92>

00001bd2 <.L94>:
        } else if (str_cmp(token, "OFF") == 0) {
    1bd2:	01 64 29    	mov.w     #0x9640, w1
    1bd4:	1e 00 78    	mov.w     [w14], w0
    1bd6:	a1 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1bd8:	00 00 e0    	cp0.w     w0
    1bda:	02 00 3a    	bra       NZ, 0x1be0 <.L95>
            LED2 = OFF;
    1bdc:	ec 02 a9    	bclr.b    0x2ec, #0x0
    1bde:	25 00 37    	bra       0x1c2a <.L92>

00001be0 <.L95>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1be0:	41 64 29    	mov.w     #0x9644, w1
    1be2:	1e 00 78    	mov.w     [w14], w0
    1be4:	9a fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1be6:	00 00 e0    	cp0.w     w0
    1be8:	0e 00 3a    	bra       NZ, 0x1c06 <.L96>
            LED2 = !LED2;
    1bea:	60 17 80    	mov.w     0x2ec, w0
    1bec:	61 00 60    	and.w     w0, #0x1, w0
    1bee:	00 f0 a7    	btsc.w    w0, #0xf
    1bf0:	00 00 ea    	neg.w     w0, w0
    1bf2:	00 00 e9    	dec.w     w0, w0
    1bf4:	4f 00 de    	lsr.w     w0, #0xf, w0
    1bf6:	00 40 78    	mov.b     w0, w0
    1bf8:	00 80 fb    	ze        w0, w0
    1bfa:	61 00 60    	and.w     w0, #0x1, w0
    1bfc:	61 17 80    	mov.w     0x2ec, w1
    1bfe:	01 00 a1    	bclr.w    w1, #0x0
    1c00:	01 00 70    	ior.w     w0, w1, w0
    1c02:	60 17 88    	mov.w     w0, 0x2ec
    1c04:	12 00 37    	bra       0x1c2a <.L92>

00001c06 <.L96>:
        } else if (str2hex(token, &val) == 0) {
    1c06:	64 00 47    	add.w     w14, #0x4, w0
    1c08:	80 00 78    	mov.w     w0, w1
    1c0a:	1e 00 78    	mov.w     [w14], w0
    1c0c:	8c fd 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1c0e:	00 00 e0    	cp0.w     w0
    1c10:	0c 00 3a    	bra       NZ, 0x1c2a <.L92>
            LED2 = (val) ? 1 : 0;
    1c12:	2e 00 90    	mov.w     [w14+4], w0
    1c14:	00 f0 a7    	btsc.w    w0, #0xf
    1c16:	00 00 ea    	neg.w     w0, w0
    1c18:	00 00 ea    	neg.w     w0, w0
    1c1a:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c1c:	00 40 78    	mov.b     w0, w0
    1c1e:	00 80 fb    	ze        w0, w0
    1c20:	61 00 60    	and.w     w0, #0x1, w0
    1c22:	61 17 80    	mov.w     0x2ec, w1
    1c24:	01 00 a1    	bclr.w    w1, #0x0
    1c26:	01 00 70    	ior.w     w0, w1, w0
    1c28:	60 17 88    	mov.w     w0, 0x2ec

00001c2a <.L92>:
        }
    }
}
    1c2a:	00 80 fa    	ulnk      
    1c2c:	00 00 06    	return    

00001c2e <_led2Q_handler>:

void led2Q_handler(char *args) {
    1c2e:	02 00 fa    	lnk       #0x2
    1c30:	00 0f 78    	mov.w     w0, [w14]
    if (LED2 == ON)
    1c32:	60 17 80    	mov.w     0x2ec, w0
    1c34:	61 00 60    	and.w     w0, #0x1, w0
    1c36:	00 00 e0    	cp0.w     w0
    1c38:	04 00 32    	bra       Z, 0x1c42 <.L98>
        parser_puts("1\r\n");
    1c3a:	d1 41 80    	mov.w     0x83a, w1
    1c3c:	b0 64 29    	mov.w     #0x964b, w0
    1c3e:	01 00 01    	call      w1
    1c40:	03 00 37    	bra       0x1c48 <.L97>

00001c42 <.L98>:
    else
        parser_puts("0\r\n");
    1c42:	d1 41 80    	mov.w     0x83a, w1
    1c44:	f0 64 29    	mov.w     #0x964f, w0
    1c46:	01 00 01    	call      w1

00001c48 <.L97>:
}
    1c48:	00 80 fa    	ulnk      
    1c4a:	00 00 06    	return    

00001c4c <_led3_handler>:

void led3_handler(char *args) {
    1c4c:	08 00 fa    	lnk       #0x8
    1c4e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1c50:	00 00 eb    	clr.w     w0
    1c52:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1c54:	0e 80 e8    	inc2.w    w14, w0
    1c56:	00 01 78    	mov.w     w0, w2
    1c58:	91 63 29    	mov.w     #0x9639, w1
    1c5a:	3e 00 90    	mov.w     [w14+6], w0
    1c5c:	b9 fe 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1c5e:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1c60:	1e 00 78    	mov.w     [w14], w0
    1c62:	00 00 e0    	cp0.w     w0
    1c64:	35 00 32    	bra       Z, 0x1cd0 <.L100>
        if (str_cmp(token, "ON") == 0) {
    1c66:	d1 63 29    	mov.w     #0x963d, w1
    1c68:	1e 00 78    	mov.w     [w14], w0
    1c6a:	57 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1c6c:	00 00 e0    	cp0.w     w0
    1c6e:	02 00 3a    	bra       NZ, 0x1c74 <.L102>
            LED3 = ON;
    1c70:	ec 22 a8    	bset.b    0x2ec, #0x1
    1c72:	2e 00 37    	bra       0x1cd0 <.L100>

00001c74 <.L102>:
        } else if (str_cmp(token, "OFF") == 0) {
    1c74:	01 64 29    	mov.w     #0x9640, w1
    1c76:	1e 00 78    	mov.w     [w14], w0
    1c78:	50 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1c7a:	00 00 e0    	cp0.w     w0
    1c7c:	02 00 3a    	bra       NZ, 0x1c82 <.L103>
            LED3 = OFF;
    1c7e:	ec 22 a9    	bclr.b    0x2ec, #0x1
    1c80:	27 00 37    	bra       0x1cd0 <.L100>

00001c82 <.L103>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1c82:	41 64 29    	mov.w     #0x9644, w1
    1c84:	1e 00 78    	mov.w     [w14], w0
    1c86:	49 fe 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1c88:	00 00 e0    	cp0.w     w0
    1c8a:	0f 00 3a    	bra       NZ, 0x1caa <.L104>
            LED3 = !LED3;
    1c8c:	60 17 80    	mov.w     0x2ec, w0
    1c8e:	62 00 60    	and.w     w0, #0x2, w0
    1c90:	00 f0 a7    	btsc.w    w0, #0xf
    1c92:	00 00 ea    	neg.w     w0, w0
    1c94:	00 00 e9    	dec.w     w0, w0
    1c96:	4f 00 de    	lsr.w     w0, #0xf, w0
    1c98:	00 40 78    	mov.b     w0, w0
    1c9a:	00 80 fb    	ze        w0, w0
    1c9c:	61 00 60    	and.w     w0, #0x1, w0
    1c9e:	00 00 40    	add.w     w0, w0, w0
    1ca0:	61 17 80    	mov.w     0x2ec, w1
    1ca2:	01 10 a1    	bclr.w    w1, #0x1
    1ca4:	01 00 70    	ior.w     w0, w1, w0
    1ca6:	60 17 88    	mov.w     w0, 0x2ec
    1ca8:	13 00 37    	bra       0x1cd0 <.L100>

00001caa <.L104>:
        } else if (str2hex(token, &val) == 0) {
    1caa:	64 00 47    	add.w     w14, #0x4, w0
    1cac:	80 00 78    	mov.w     w0, w1
    1cae:	1e 00 78    	mov.w     [w14], w0
    1cb0:	3a fd 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1cb2:	00 00 e0    	cp0.w     w0
    1cb4:	0d 00 3a    	bra       NZ, 0x1cd0 <.L100>
            LED3 = (val) ? 1 : 0;
    1cb6:	2e 00 90    	mov.w     [w14+4], w0
    1cb8:	00 f0 a7    	btsc.w    w0, #0xf
    1cba:	00 00 ea    	neg.w     w0, w0
    1cbc:	00 00 ea    	neg.w     w0, w0
    1cbe:	4f 00 de    	lsr.w     w0, #0xf, w0
    1cc0:	00 40 78    	mov.b     w0, w0
    1cc2:	00 80 fb    	ze        w0, w0
    1cc4:	61 00 60    	and.w     w0, #0x1, w0
    1cc6:	00 00 40    	add.w     w0, w0, w0
    1cc8:	61 17 80    	mov.w     0x2ec, w1
    1cca:	01 10 a1    	bclr.w    w1, #0x1
    1ccc:	01 00 70    	ior.w     w0, w1, w0
    1cce:	60 17 88    	mov.w     w0, 0x2ec

00001cd0 <.L100>:
        }
    }
}
    1cd0:	00 80 fa    	ulnk      
    1cd2:	00 00 06    	return    

00001cd4 <_led3Q_handler>:

void led3Q_handler(char *args) {
    1cd4:	02 00 fa    	lnk       #0x2
    1cd6:	00 0f 78    	mov.w     w0, [w14]
    if (LED3 == ON)
    1cd8:	60 17 80    	mov.w     0x2ec, w0
    1cda:	62 00 60    	and.w     w0, #0x2, w0
    1cdc:	00 00 e0    	cp0.w     w0
    1cde:	04 00 32    	bra       Z, 0x1ce8 <.L106>
        parser_puts("1\r\n");
    1ce0:	d1 41 80    	mov.w     0x83a, w1
    1ce2:	b0 64 29    	mov.w     #0x964b, w0
    1ce4:	01 00 01    	call      w1
    1ce6:	03 00 37    	bra       0x1cee <.L105>

00001ce8 <.L106>:
    else
        parser_puts("0\r\n");
    1ce8:	d1 41 80    	mov.w     0x83a, w1
    1cea:	f0 64 29    	mov.w     #0x964f, w0
    1cec:	01 00 01    	call      w1

00001cee <.L105>:
}
    1cee:	00 80 fa    	ulnk      
    1cf0:	00 00 06    	return    

00001cf2 <_sw1Q_handler>:

void sw1Q_handler(char *args) {
    1cf2:	02 00 fa    	lnk       #0x2
    1cf4:	00 0f 78    	mov.w     w0, [w14]
    parser_putc((SW1) ? '1' : '0');
    1cf6:	c1 41 80    	mov.w     0x838, w1
    1cf8:	92 16 80    	mov.w     0x2d2, w2
    1cfa:	00 00 28    	mov.w     #0x8000, w0
    1cfc:	00 00 61    	and.w     w2, w0, w0
    1cfe:	00 00 e0    	cp0.w     w0
    1d00:	02 00 32    	bra       Z, 0x1d06 <.L109>
    1d02:	10 c3 b3    	mov.b     #0x31, w0
    1d04:	01 00 37    	bra       0x1d08 <.L110>

00001d06 <.L109>:
    1d06:	00 c3 b3    	mov.b     #0x30, w0

00001d08 <.L110>:
    1d08:	01 00 01    	call      w1
    parser_puts("\r\n");
    1d0a:	d1 41 80    	mov.w     0x83a, w1
    1d0c:	30 65 29    	mov.w     #0x9653, w0
    1d0e:	01 00 01    	call      w1
}
    1d10:	00 80 fa    	ulnk      
    1d12:	00 00 06    	return    

00001d14 <_pwr_handler>:

// PWR commands
void pwr_handler(char *args) {
    1d14:	08 00 fa    	lnk       #0x8
    1d16:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1d18:	00 00 eb    	clr.w     w0
    1d1a:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1d1c:	64 00 47    	add.w     w14, #0x4, w0
    1d1e:	00 01 78    	mov.w     w0, w2
    1d20:	91 63 29    	mov.w     #0x9639, w1
    1d22:	3e 00 90    	mov.w     [w14+6], w0
    1d24:	55 fe 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1d26:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1d28:	1e 00 90    	mov.w     [w14+2], w0
    1d2a:	00 00 e0    	cp0.w     w0
    1d2c:	1a 00 32    	bra       Z, 0x1d62 <.L111>
        for (i = 0; i < PWR_TABLE_ENTRIES; i++) {
    1d2e:	00 00 eb    	clr.w     w0
    1d30:	00 0f 78    	mov.w     w0, [w14]
    1d32:	14 00 37    	bra       0x1d5c <.L113>

00001d34 <.L115>:
            if (str_cmp(command, pwr_table[i].command) == 0) {
    1d34:	1e 00 78    	mov.w     [w14], w0
    1d36:	c2 00 dd    	sl.w      w0, #0x2, w1
    1d38:	20 34 21    	mov.w     #0x1342, w0
    1d3a:	00 80 40    	add.w     w1, w0, w0
    1d3c:	10 00 78    	mov.w     [w0], w0
    1d3e:	80 00 78    	mov.w     w0, w1
    1d40:	1e 00 90    	mov.w     [w14+2], w0
    1d42:	eb fd 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1d44:	00 00 e0    	cp0.w     w0
    1d46:	09 00 3a    	bra       NZ, 0x1d5a <.L114>
                pwr_table[i].handler(remainder);
    1d48:	1e 00 78    	mov.w     [w14], w0
    1d4a:	42 00 dd    	sl.w      w0, #0x2, w0
    1d4c:	80 80 e8    	inc2.w    w0, w1
    1d4e:	20 34 21    	mov.w     #0x1342, w0
    1d50:	00 80 40    	add.w     w1, w0, w0
    1d52:	90 00 78    	mov.w     [w0], w1
    1d54:	2e 00 90    	mov.w     [w14+4], w0
    1d56:	01 00 01    	call      w1
                break;
    1d58:	04 00 37    	bra       0x1d62 <.L111>

00001d5a <.L114>:
    1d5a:	1e 0f e8    	inc.w     [w14], [w14]

00001d5c <.L113>:
    1d5c:	1e 00 78    	mov.w     [w14], w0
    1d5e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1d60:	e9 ff 36    	bra       LEU, 0x1d34 <.L115>

00001d62 <.L111>:
            }
        }
    }
}
    1d62:	00 80 fa    	ulnk      
    1d64:	00 00 06    	return    

00001d66 <_ena12V_handler>:

void ena12V_handler(char *args) {
    1d66:	08 00 fa    	lnk       #0x8
    1d68:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1d6a:	00 00 eb    	clr.w     w0
    1d6c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    1d6e:	0e 80 e8    	inc2.w    w14, w0
    1d70:	00 01 78    	mov.w     w0, w2
    1d72:	91 63 29    	mov.w     #0x9639, w1
    1d74:	3e 00 90    	mov.w     [w14+6], w0
    1d76:	2c fe 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1d78:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    1d7a:	1e 00 78    	mov.w     [w14], w0
    1d7c:	00 00 e0    	cp0.w     w0
    1d7e:	35 00 32    	bra       Z, 0x1dea <.L116>
        if (str_cmp(token, "ON") == 0) {
    1d80:	d1 63 29    	mov.w     #0x963d, w1
    1d82:	1e 00 78    	mov.w     [w14], w0
    1d84:	ca fd 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1d86:	00 00 e0    	cp0.w     w0
    1d88:	02 00 3a    	bra       NZ, 0x1d8e <.L118>
            ENA12V = ON;
    1d8a:	cc 62 a8    	bset.b    0x2cc, #0x3
    1d8c:	2e 00 37    	bra       0x1dea <.L116>

00001d8e <.L118>:
        } else if (str_cmp(token, "OFF") == 0) {
    1d8e:	01 64 29    	mov.w     #0x9640, w1
    1d90:	1e 00 78    	mov.w     [w14], w0
    1d92:	c3 fd 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1d94:	00 00 e0    	cp0.w     w0
    1d96:	02 00 3a    	bra       NZ, 0x1d9c <.L119>
            ENA12V = OFF;
    1d98:	cc 62 a9    	bclr.b    0x2cc, #0x3
    1d9a:	27 00 37    	bra       0x1dea <.L116>

00001d9c <.L119>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    1d9c:	41 64 29    	mov.w     #0x9644, w1
    1d9e:	1e 00 78    	mov.w     [w14], w0
    1da0:	bc fd 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1da2:	00 00 e0    	cp0.w     w0
    1da4:	0f 00 3a    	bra       NZ, 0x1dc4 <.L120>
            ENA12V = !ENA12V;
    1da6:	60 16 80    	mov.w     0x2cc, w0
    1da8:	68 00 60    	and.w     w0, #0x8, w0
    1daa:	00 f0 a7    	btsc.w    w0, #0xf
    1dac:	00 00 ea    	neg.w     w0, w0
    1dae:	00 00 e9    	dec.w     w0, w0
    1db0:	4f 00 de    	lsr.w     w0, #0xf, w0
    1db2:	00 40 78    	mov.b     w0, w0
    1db4:	00 80 fb    	ze        w0, w0
    1db6:	61 00 60    	and.w     w0, #0x1, w0
    1db8:	43 00 dd    	sl.w      w0, #0x3, w0
    1dba:	61 16 80    	mov.w     0x2cc, w1
    1dbc:	01 30 a1    	bclr.w    w1, #0x3
    1dbe:	01 00 70    	ior.w     w0, w1, w0
    1dc0:	60 16 88    	mov.w     w0, 0x2cc
    1dc2:	13 00 37    	bra       0x1dea <.L116>

00001dc4 <.L120>:
        } else if (str2hex(token, &val) == 0) {
    1dc4:	64 00 47    	add.w     w14, #0x4, w0
    1dc6:	80 00 78    	mov.w     w0, w1
    1dc8:	1e 00 78    	mov.w     [w14], w0
    1dca:	ad fc 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1dcc:	00 00 e0    	cp0.w     w0
    1dce:	0d 00 3a    	bra       NZ, 0x1dea <.L116>
            ENA12V = (val) ? 1 : 0;
    1dd0:	2e 00 90    	mov.w     [w14+4], w0
    1dd2:	00 f0 a7    	btsc.w    w0, #0xf
    1dd4:	00 00 ea    	neg.w     w0, w0
    1dd6:	00 00 ea    	neg.w     w0, w0
    1dd8:	4f 00 de    	lsr.w     w0, #0xf, w0
    1dda:	00 40 78    	mov.b     w0, w0
    1ddc:	00 80 fb    	ze        w0, w0
    1dde:	61 00 60    	and.w     w0, #0x1, w0
    1de0:	43 00 dd    	sl.w      w0, #0x3, w0
    1de2:	61 16 80    	mov.w     0x2cc, w1
    1de4:	01 30 a1    	bclr.w    w1, #0x3
    1de6:	01 00 70    	ior.w     w0, w1, w0
    1de8:	60 16 88    	mov.w     w0, 0x2cc

00001dea <.L116>:
        }
    }
}
    1dea:	00 80 fa    	ulnk      
    1dec:	00 00 06    	return    

00001dee <_ena12VQ_handler>:

void ena12VQ_handler(char *args) {
    1dee:	02 00 fa    	lnk       #0x2
    1df0:	00 0f 78    	mov.w     w0, [w14]
    if (ENA12V == ON)
    1df2:	60 16 80    	mov.w     0x2cc, w0
    1df4:	68 00 60    	and.w     w0, #0x8, w0
    1df6:	00 00 e0    	cp0.w     w0
    1df8:	04 00 32    	bra       Z, 0x1e02 <.L122>
        parser_puts("1\r\n");
    1dfa:	d1 41 80    	mov.w     0x83a, w1
    1dfc:	b0 64 29    	mov.w     #0x964b, w0
    1dfe:	01 00 01    	call      w1
    1e00:	03 00 37    	bra       0x1e08 <.L121>

00001e02 <.L122>:
    else
        parser_puts("0\r\n");
    1e02:	d1 41 80    	mov.w     0x83a, w1
    1e04:	f0 64 29    	mov.w     #0x964f, w0
    1e06:	01 00 01    	call      w1

00001e08 <.L121>:
}
    1e08:	00 80 fa    	ulnk      
    1e0a:	00 00 06    	return    

00001e0c <_dac10_handler>:

// DAC10 commands
void dac10_handler(char *args) {
    1e0c:	08 00 fa    	lnk       #0x8
    1e0e:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1e10:	00 00 eb    	clr.w     w0
    1e12:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1e14:	64 00 47    	add.w     w14, #0x4, w0
    1e16:	00 01 78    	mov.w     w0, w2
    1e18:	91 63 29    	mov.w     #0x9639, w1
    1e1a:	3e 00 90    	mov.w     [w14+6], w0
    1e1c:	d9 fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1e1e:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1e20:	1e 00 90    	mov.w     [w14+2], w0
    1e22:	00 00 e0    	cp0.w     w0
    1e24:	1a 00 32    	bra       Z, 0x1e5a <.L124>
        for (i = 0; i < DAC10_TABLE_ENTRIES; i++) {
    1e26:	00 00 eb    	clr.w     w0
    1e28:	00 0f 78    	mov.w     w0, [w14]
    1e2a:	14 00 37    	bra       0x1e54 <.L126>

00001e2c <.L128>:
            if (str_cmp(command, dac10_table[i].command) == 0) {
    1e2c:	1e 00 78    	mov.w     [w14], w0
    1e2e:	c2 00 dd    	sl.w      w0, #0x2, w1
    1e30:	a0 34 21    	mov.w     #0x134a, w0
    1e32:	00 80 40    	add.w     w1, w0, w0
    1e34:	10 00 78    	mov.w     [w0], w0
    1e36:	80 00 78    	mov.w     w0, w1
    1e38:	1e 00 90    	mov.w     [w14+2], w0
    1e3a:	6f fd 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1e3c:	00 00 e0    	cp0.w     w0
    1e3e:	09 00 3a    	bra       NZ, 0x1e52 <.L127>
                dac10_table[i].handler(remainder);
    1e40:	1e 00 78    	mov.w     [w14], w0
    1e42:	42 00 dd    	sl.w      w0, #0x2, w0
    1e44:	80 80 e8    	inc2.w    w0, w1
    1e46:	a0 34 21    	mov.w     #0x134a, w0
    1e48:	00 80 40    	add.w     w1, w0, w0
    1e4a:	90 00 78    	mov.w     [w0], w1
    1e4c:	2e 00 90    	mov.w     [w14+4], w0
    1e4e:	01 00 01    	call      w1
                break;
    1e50:	04 00 37    	bra       0x1e5a <.L124>

00001e52 <.L127>:
    1e52:	1e 0f e8    	inc.w     [w14], [w14]

00001e54 <.L126>:
    1e54:	1e 00 78    	mov.w     [w14], w0
    1e56:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1e58:	e9 ff 36    	bra       LEU, 0x1e2c <.L128>

00001e5a <.L124>:
            }
        }
    }
}
    1e5a:	00 80 fa    	ulnk      
    1e5c:	00 00 06    	return    

00001e5e <_dac10_dac1_handler>:

void dac10_dac1_handler(char *args) {
    1e5e:	08 00 fa    	lnk       #0x8
    1e60:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1e62:	00 00 eb    	clr.w     w0
    1e64:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1e66:	0e 80 e8    	inc2.w    w14, w0
    1e68:	00 01 78    	mov.w     w0, w2
    1e6a:	61 65 29    	mov.w     #0x9656, w1
    1e6c:	3e 00 90    	mov.w     [w14+6], w0
    1e6e:	b0 fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1e70:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1e72:	1e 00 78    	mov.w     [w14], w0
    1e74:	00 00 e0    	cp0.w     w0
    1e76:	0a 00 32    	bra       Z, 0x1e8c <.L129>
    1e78:	64 00 47    	add.w     w14, #0x4, w0
    1e7a:	80 00 78    	mov.w     w0, w1
    1e7c:	1e 00 78    	mov.w     [w14], w0
    1e7e:	53 fc 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1e80:	00 00 e0    	cp0.w     w0
    1e82:	04 00 3a    	bra       NZ, 0x1e8c <.L129>
        DAC1DAT = val & 0x3FF;
    1e84:	ae 00 90    	mov.w     [w14+4], w1
    1e86:	f0 3f 20    	mov.w     #0x3ff, w0
    1e88:	00 80 60    	and.w     w1, w0, w0
    1e8a:	10 22 88    	mov.w     w0, 0x442

00001e8c <.L129>:
    }
}
    1e8c:	00 80 fa    	ulnk      
    1e8e:	00 00 06    	return    

00001e90 <_dac10_dac1Q_handler>:

void dac10_dac1Q_handler(char *args) {
    1e90:	08 00 fa    	lnk       #0x8
    1e92:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(DAC1DAT, str);
    1e94:	10 22 80    	mov.w     0x442, w0
    1e96:	8e 00 78    	mov.w     w14, w1
    1e98:	0b fd 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1e9a:	d1 41 80    	mov.w     0x83a, w1
    1e9c:	0e 00 78    	mov.w     w14, w0
    1e9e:	01 00 01    	call      w1
    parser_puts("\r\n");
    1ea0:	d1 41 80    	mov.w     0x83a, w1
    1ea2:	30 65 29    	mov.w     #0x9653, w0
    1ea4:	01 00 01    	call      w1
}
    1ea6:	00 80 fa    	ulnk      
    1ea8:	00 00 06    	return    

00001eaa <_dac10_dac2_handler>:

void dac10_dac2_handler(char *args) {
    1eaa:	08 00 fa    	lnk       #0x8
    1eac:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1eae:	00 00 eb    	clr.w     w0
    1eb0:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1eb2:	0e 80 e8    	inc2.w    w14, w0
    1eb4:	00 01 78    	mov.w     w0, w2
    1eb6:	61 65 29    	mov.w     #0x9656, w1
    1eb8:	3e 00 90    	mov.w     [w14+6], w0
    1eba:	8a fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1ebc:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1ebe:	1e 00 78    	mov.w     [w14], w0
    1ec0:	00 00 e0    	cp0.w     w0
    1ec2:	0a 00 32    	bra       Z, 0x1ed8 <.L132>
    1ec4:	64 00 47    	add.w     w14, #0x4, w0
    1ec6:	80 00 78    	mov.w     w0, w1
    1ec8:	1e 00 78    	mov.w     [w14], w0
    1eca:	2d fc 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1ecc:	00 00 e0    	cp0.w     w0
    1ece:	04 00 3a    	bra       NZ, 0x1ed8 <.L132>
        DAC2DAT = val & 0x3FF;
    1ed0:	ae 00 90    	mov.w     [w14+4], w1
    1ed2:	f0 3f 20    	mov.w     #0x3ff, w0
    1ed4:	00 80 60    	and.w     w1, w0, w0
    1ed6:	30 22 88    	mov.w     w0, 0x446

00001ed8 <.L132>:
    }
}
    1ed8:	00 80 fa    	ulnk      
    1eda:	00 00 06    	return    

00001edc <_dac10_dac2Q_handler>:

void dac10_dac2Q_handler(char *args) {
    1edc:	08 00 fa    	lnk       #0x8
    1ede:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(DAC2DAT, str);
    1ee0:	30 22 80    	mov.w     0x446, w0
    1ee2:	8e 00 78    	mov.w     w14, w1
    1ee4:	e5 fc 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1ee6:	d1 41 80    	mov.w     0x83a, w1
    1ee8:	0e 00 78    	mov.w     w14, w0
    1eea:	01 00 01    	call      w1
    parser_puts("\r\n");
    1eec:	d1 41 80    	mov.w     0x83a, w1
    1eee:	30 65 29    	mov.w     #0x9653, w0
    1ef0:	01 00 01    	call      w1
}
    1ef2:	00 80 fa    	ulnk      
    1ef4:	00 00 06    	return    

00001ef6 <_dac10_diff_handler>:

void dac10_diff_handler(char *args) {
    1ef6:	0c 00 fa    	lnk       #0xc
    1ef8:	50 07 98    	mov.w     w0, [w14+10]
    char *token, *remainder;
    uint16_t val, dac1, dac2;

    remainder = (char *)NULL;
    1efa:	00 00 eb    	clr.w     w0
    1efc:	30 07 98    	mov.w     w0, [w14+6]
    token = str_tok_r(args, ", ", &remainder);
    1efe:	66 00 47    	add.w     w14, #0x6, w0
    1f00:	00 01 78    	mov.w     w0, w2
    1f02:	61 65 29    	mov.w     #0x9656, w1
    1f04:	5e 00 90    	mov.w     [w14+10], w0
    1f06:	64 fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1f08:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1f0a:	1e 00 78    	mov.w     [w14], w0
    1f0c:	00 00 e0    	cp0.w     w0
    1f0e:	1b 00 32    	bra       Z, 0x1f46 <.L135>
    1f10:	68 00 47    	add.w     w14, #0x8, w0
    1f12:	80 00 78    	mov.w     w0, w1
    1f14:	1e 00 78    	mov.w     [w14], w0
    1f16:	07 fc 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1f18:	00 00 e0    	cp0.w     w0
    1f1a:	15 00 3a    	bra       NZ, 0x1f46 <.L135>
        dac1 = ((0x400 + (int16_t)val) >> 1) & 0x3FF;
    1f1c:	4e 00 90    	mov.w     [w14+8], w0
    1f1e:	80 00 78    	mov.w     w0, w1
    1f20:	00 40 20    	mov.w     #0x400, w0
    1f22:	00 80 40    	add.w     w1, w0, w0
    1f24:	00 80 d1    	asr.w     w0, w0
    1f26:	80 00 78    	mov.w     w0, w1
    1f28:	f0 3f 20    	mov.w     #0x3ff, w0
    1f2a:	00 80 60    	and.w     w1, w0, w0
    1f2c:	10 07 98    	mov.w     w0, [w14+2]
        dac2 = ((0x400 - (int16_t)val) >> 1) & 0x3FF;
    1f2e:	4e 00 90    	mov.w     [w14+8], w0
    1f30:	01 40 20    	mov.w     #0x400, w1
    1f32:	00 80 50    	sub.w     w1, w0, w0
    1f34:	00 80 d1    	asr.w     w0, w0
    1f36:	80 00 78    	mov.w     w0, w1
    1f38:	f0 3f 20    	mov.w     #0x3ff, w0
    1f3a:	00 80 60    	and.w     w1, w0, w0
    1f3c:	20 07 98    	mov.w     w0, [w14+4]
        DAC1DAT = dac1;
    1f3e:	9e 00 90    	mov.w     [w14+2], w1
    1f40:	11 22 88    	mov.w     w1, 0x442
        DAC2DAT = dac2;
    1f42:	ae 00 90    	mov.w     [w14+4], w1
    1f44:	31 22 88    	mov.w     w1, 0x446

00001f46 <.L135>:
    }
}
    1f46:	00 80 fa    	ulnk      
    1f48:	00 00 06    	return    

00001f4a <_dac10_diffQ_handler>:

void dac10_diffQ_handler(char *args) {
    1f4a:	08 00 fa    	lnk       #0x8
    1f4c:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)((int16_t)DAC1DAT - (int16_t)DAC2DAT), str);
    1f4e:	10 22 80    	mov.w     0x442, w0
    1f50:	80 00 78    	mov.w     w0, w1
    1f52:	30 22 80    	mov.w     0x446, w0
    1f54:	00 80 50    	sub.w     w1, w0, w0
    1f56:	8e 00 78    	mov.w     w14, w1
    1f58:	ab fc 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1f5a:	d1 41 80    	mov.w     0x83a, w1
    1f5c:	0e 00 78    	mov.w     w14, w0
    1f5e:	01 00 01    	call      w1
    parser_puts("\r\n");
    1f60:	d1 41 80    	mov.w     0x83a, w1
    1f62:	30 65 29    	mov.w     #0x9653, w0
    1f64:	01 00 01    	call      w1
}
    1f66:	00 80 fa    	ulnk      
    1f68:	00 00 06    	return    

00001f6a <_dac16_handler>:

// DAC16 commands
void dac16_handler(char *args) {
    1f6a:	08 00 fa    	lnk       #0x8
    1f6c:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    1f6e:	00 00 eb    	clr.w     w0
    1f70:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    1f72:	64 00 47    	add.w     w14, #0x4, w0
    1f74:	00 01 78    	mov.w     w0, w2
    1f76:	91 63 29    	mov.w     #0x9639, w1
    1f78:	3e 00 90    	mov.w     [w14+6], w0
    1f7a:	2a fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1f7c:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    1f7e:	1e 00 90    	mov.w     [w14+2], w0
    1f80:	00 00 e0    	cp0.w     w0
    1f82:	1a 00 32    	bra       Z, 0x1fb8 <.L138>
        for (i = 0; i < DAC16_TABLE_ENTRIES; i++) {
    1f84:	00 00 eb    	clr.w     w0
    1f86:	00 0f 78    	mov.w     w0, [w14]
    1f88:	14 00 37    	bra       0x1fb2 <.L140>

00001f8a <.L142>:
            if (str_cmp(command, dac16_table[i].command) == 0) {
    1f8a:	1e 00 78    	mov.w     [w14], w0
    1f8c:	c2 00 dd    	sl.w      w0, #0x2, w1
    1f8e:	20 36 21    	mov.w     #0x1362, w0
    1f90:	00 80 40    	add.w     w1, w0, w0
    1f92:	10 00 78    	mov.w     [w0], w0
    1f94:	80 00 78    	mov.w     w0, w1
    1f96:	1e 00 90    	mov.w     [w14+2], w0
    1f98:	c0 fc 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    1f9a:	00 00 e0    	cp0.w     w0
    1f9c:	09 00 3a    	bra       NZ, 0x1fb0 <.L141>
                dac16_table[i].handler(remainder);
    1f9e:	1e 00 78    	mov.w     [w14], w0
    1fa0:	42 00 dd    	sl.w      w0, #0x2, w0
    1fa2:	80 80 e8    	inc2.w    w0, w1
    1fa4:	20 36 21    	mov.w     #0x1362, w0
    1fa6:	00 80 40    	add.w     w1, w0, w0
    1fa8:	90 00 78    	mov.w     [w0], w1
    1faa:	2e 00 90    	mov.w     [w14+4], w0
    1fac:	01 00 01    	call      w1
                break;
    1fae:	04 00 37    	bra       0x1fb8 <.L138>

00001fb0 <.L141>:
    1fb0:	1e 0f e8    	inc.w     [w14], [w14]

00001fb2 <.L140>:
    1fb2:	1e 00 78    	mov.w     [w14], w0
    1fb4:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    1fb6:	e9 ff 36    	bra       LEU, 0x1f8a <.L142>

00001fb8 <.L138>:
            }
        }
    }
}
    1fb8:	00 80 fa    	ulnk      
    1fba:	00 00 06    	return    

00001fbc <_dac16_dac0_handler>:

void dac16_dac0_handler(char *args) {
    1fbc:	08 00 fa    	lnk       #0x8
    1fbe:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    1fc0:	00 00 eb    	clr.w     w0
    1fc2:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    1fc4:	0e 80 e8    	inc2.w    w14, w0
    1fc6:	00 01 78    	mov.w     w0, w2
    1fc8:	61 65 29    	mov.w     #0x9656, w1
    1fca:	3e 00 90    	mov.w     [w14+6], w0
    1fcc:	01 fd 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    1fce:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    1fd0:	1e 00 78    	mov.w     [w14], w0
    1fd2:	00 00 e0    	cp0.w     w0
    1fd4:	08 00 32    	bra       Z, 0x1fe6 <.L143>
    1fd6:	64 00 47    	add.w     w14, #0x4, w0
    1fd8:	80 00 78    	mov.w     w0, w1
    1fda:	1e 00 78    	mov.w     [w14], w0
    1fdc:	a4 fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    1fde:	00 00 e0    	cp0.w     w0
    1fe0:	02 00 3a    	bra       NZ, 0x1fe6 <.L143>
        dac16_set_dac0(val);
    1fe2:	2e 00 90    	mov.w     [w14+4], w0
    1fe4:	9d 0e 07    	rcall     0x3d20 <_dac16_set_dac0> <.LFB13> <.LFE12>

00001fe6 <.L143>:
    }
}
    1fe6:	00 80 fa    	ulnk      
    1fe8:	00 00 06    	return    

00001fea <_dac16_dac0Q_handler>:

void dac16_dac0Q_handler(char *args) {
    1fea:	08 00 fa    	lnk       #0x8
    1fec:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac0(), str);
    1fee:	94 0e 07    	rcall     0x3d18 <_dac16_get_dac0> <.LFB12> <.LFE11>
    1ff0:	8e 00 78    	mov.w     w14, w1
    1ff2:	5e fc 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    1ff4:	d1 41 80    	mov.w     0x83a, w1
    1ff6:	0e 00 78    	mov.w     w14, w0
    1ff8:	01 00 01    	call      w1
    parser_puts("\r\n");
    1ffa:	d1 41 80    	mov.w     0x83a, w1
    1ffc:	30 65 29    	mov.w     #0x9653, w0
    1ffe:	01 00 01    	call      w1
}
    2000:	00 80 fa    	ulnk      
    2002:	00 00 06    	return    

00002004 <_dac16_dac1_handler>:

void dac16_dac1_handler(char *args) {
    2004:	08 00 fa    	lnk       #0x8
    2006:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2008:	00 00 eb    	clr.w     w0
    200a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    200c:	0e 80 e8    	inc2.w    w14, w0
    200e:	00 01 78    	mov.w     w0, w2
    2010:	61 65 29    	mov.w     #0x9656, w1
    2012:	3e 00 90    	mov.w     [w14+6], w0
    2014:	dd fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2016:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    2018:	1e 00 78    	mov.w     [w14], w0
    201a:	00 00 e0    	cp0.w     w0
    201c:	08 00 32    	bra       Z, 0x202e <.L146>
    201e:	64 00 47    	add.w     w14, #0x4, w0
    2020:	80 00 78    	mov.w     w0, w1
    2022:	1e 00 78    	mov.w     [w14], w0
    2024:	80 fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2026:	00 00 e0    	cp0.w     w0
    2028:	02 00 3a    	bra       NZ, 0x202e <.L146>
        dac16_set_dac1(val);
    202a:	2e 00 90    	mov.w     [w14+4], w0
    202c:	a3 0e 07    	rcall     0x3d74 <_dac16_set_dac1> <.LFB15> <.LFE14>

0000202e <.L146>:
    }
}
    202e:	00 80 fa    	ulnk      
    2030:	00 00 06    	return    

00002032 <_dac16_dac1Q_handler>:

void dac16_dac1Q_handler(char *args) {
    2032:	08 00 fa    	lnk       #0x8
    2034:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac1(), str);
    2036:	9a 0e 07    	rcall     0x3d6c <_dac16_get_dac1> <.LFB14> <.LFE13>
    2038:	8e 00 78    	mov.w     w14, w1
    203a:	3a fc 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    203c:	d1 41 80    	mov.w     0x83a, w1
    203e:	0e 00 78    	mov.w     w14, w0
    2040:	01 00 01    	call      w1
    parser_puts("\r\n");
    2042:	d1 41 80    	mov.w     0x83a, w1
    2044:	30 65 29    	mov.w     #0x9653, w0
    2046:	01 00 01    	call      w1
}
    2048:	00 80 fa    	ulnk      
    204a:	00 00 06    	return    

0000204c <_dac16_dac2_handler>:

void dac16_dac2_handler(char *args) {
    204c:	08 00 fa    	lnk       #0x8
    204e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2050:	00 00 eb    	clr.w     w0
    2052:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    2054:	0e 80 e8    	inc2.w    w14, w0
    2056:	00 01 78    	mov.w     w0, w2
    2058:	61 65 29    	mov.w     #0x9656, w1
    205a:	3e 00 90    	mov.w     [w14+6], w0
    205c:	b9 fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    205e:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    2060:	1e 00 78    	mov.w     [w14], w0
    2062:	00 00 e0    	cp0.w     w0
    2064:	08 00 32    	bra       Z, 0x2076 <.L149>
    2066:	64 00 47    	add.w     w14, #0x4, w0
    2068:	80 00 78    	mov.w     w0, w1
    206a:	1e 00 78    	mov.w     [w14], w0
    206c:	5c fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    206e:	00 00 e0    	cp0.w     w0
    2070:	02 00 3a    	bra       NZ, 0x2076 <.L149>
        dac16_set_dac2(val);
    2072:	2e 00 90    	mov.w     [w14+4], w0
    2074:	a9 0e 07    	rcall     0x3dc8 <_dac16_set_dac2> <.LFB17> <.LFE16>

00002076 <.L149>:
    }
}
    2076:	00 80 fa    	ulnk      
    2078:	00 00 06    	return    

0000207a <_dac16_dac2Q_handler>:

void dac16_dac2Q_handler(char *args) {
    207a:	08 00 fa    	lnk       #0x8
    207c:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac2(), str);
    207e:	a0 0e 07    	rcall     0x3dc0 <_dac16_get_dac2> <.LFB16> <.LFE15>
    2080:	8e 00 78    	mov.w     w14, w1
    2082:	16 fc 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2084:	d1 41 80    	mov.w     0x83a, w1
    2086:	0e 00 78    	mov.w     w14, w0
    2088:	01 00 01    	call      w1
    parser_puts("\r\n");
    208a:	d1 41 80    	mov.w     0x83a, w1
    208c:	30 65 29    	mov.w     #0x9653, w0
    208e:	01 00 01    	call      w1
}
    2090:	00 80 fa    	ulnk      
    2092:	00 00 06    	return    

00002094 <_dac16_dac3_handler>:

void dac16_dac3_handler(char *args) {
    2094:	08 00 fa    	lnk       #0x8
    2096:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2098:	00 00 eb    	clr.w     w0
    209a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    209c:	0e 80 e8    	inc2.w    w14, w0
    209e:	00 01 78    	mov.w     w0, w2
    20a0:	61 65 29    	mov.w     #0x9656, w1
    20a2:	3e 00 90    	mov.w     [w14+6], w0
    20a4:	95 fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    20a6:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    20a8:	1e 00 78    	mov.w     [w14], w0
    20aa:	00 00 e0    	cp0.w     w0
    20ac:	08 00 32    	bra       Z, 0x20be <.L152>
    20ae:	64 00 47    	add.w     w14, #0x4, w0
    20b0:	80 00 78    	mov.w     w0, w1
    20b2:	1e 00 78    	mov.w     [w14], w0
    20b4:	38 fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    20b6:	00 00 e0    	cp0.w     w0
    20b8:	02 00 3a    	bra       NZ, 0x20be <.L152>
        dac16_set_dac3(val);
    20ba:	2e 00 90    	mov.w     [w14+4], w0
    20bc:	af 0e 07    	rcall     0x3e1c <_dac16_set_dac3> <.LFB19> <.LFE18>

000020be <.L152>:
    }
}
    20be:	00 80 fa    	ulnk      
    20c0:	00 00 06    	return    

000020c2 <_dac16_dac3Q_handler>:

void dac16_dac3Q_handler(char *args) {
    20c2:	08 00 fa    	lnk       #0x8
    20c4:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac3(), str);
    20c6:	a6 0e 07    	rcall     0x3e14 <_dac16_get_dac3> <.LFB18> <.LFE17>
    20c8:	8e 00 78    	mov.w     w14, w1
    20ca:	f2 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    20cc:	d1 41 80    	mov.w     0x83a, w1
    20ce:	0e 00 78    	mov.w     w14, w0
    20d0:	01 00 01    	call      w1
    parser_puts("\r\n");
    20d2:	d1 41 80    	mov.w     0x83a, w1
    20d4:	30 65 29    	mov.w     #0x9653, w0
    20d6:	01 00 01    	call      w1
}
    20d8:	00 80 fa    	ulnk      
    20da:	00 00 06    	return    

000020dc <_dac16_ch1_handler>:

void dac16_ch1_handler(char *args) {
    20dc:	0a 00 fa    	lnk       #0xa
    20de:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t pos, neg;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    20e0:	00 00 eb    	clr.w     w0
    20e2:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    20e4:	66 00 47    	add.w     w14, #0x6, w0
    20e6:	00 01 78    	mov.w     w0, w2
    20e8:	61 65 29    	mov.w     #0x9656, w1
    20ea:	4e 00 90    	mov.w     [w14+8], w0
    20ec:	71 fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    20ee:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    20f0:	1e 00 78    	mov.w     [w14], w0
    20f2:	00 00 e0    	cp0.w     w0
    20f4:	11 00 32    	bra       Z, 0x2118 <.L155>
    20f6:	3e 00 90    	mov.w     [w14+6], w0
    20f8:	00 00 e0    	cp0.w     w0
    20fa:	0e 00 32    	bra       Z, 0x2118 <.L155>
        if ((str2hex(arg1, &pos) == 0) && (str2hex(arg2, &neg) == 0)) {
    20fc:	0e 80 e8    	inc2.w    w14, w0
    20fe:	80 00 78    	mov.w     w0, w1
    2100:	1e 00 78    	mov.w     [w14], w0
    2102:	11 fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2104:	00 00 e0    	cp0.w     w0
    2106:	08 00 3a    	bra       NZ, 0x2118 <.L155>
    2108:	3e 00 90    	mov.w     [w14+6], w0
    210a:	e4 00 47    	add.w     w14, #0x4, w1
    210c:	0c fb 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    210e:	00 00 e0    	cp0.w     w0
    2110:	03 00 3a    	bra       NZ, 0x2118 <.L155>
            dac16_set_ch1(pos, neg);
    2112:	ae 00 90    	mov.w     [w14+4], w1
    2114:	1e 00 90    	mov.w     [w14+2], w0
    2116:	a8 0e 07    	rcall     0x3e68 <_dac16_set_ch1> <.LFB20> <.LFE19>

00002118 <.L155>:
        }
    }
}
    2118:	00 80 fa    	ulnk      
    211a:	00 00 06    	return    

0000211c <_dac16_ch1Q_handler>:

void dac16_ch1Q_handler(char *args) {
    211c:	08 00 fa    	lnk       #0x8
    211e:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac1(), str);
    2120:	25 0e 07    	rcall     0x3d6c <_dac16_get_dac1> <.LFB14> <.LFE13>
    2122:	8e 00 78    	mov.w     w14, w1
    2124:	c5 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2126:	d1 41 80    	mov.w     0x83a, w1
    2128:	0e 00 78    	mov.w     w14, w0
    212a:	01 00 01    	call      w1
    parser_putc(',');
    212c:	c1 41 80    	mov.w     0x838, w1
    212e:	c0 c2 b3    	mov.b     #0x2c, w0
    2130:	01 00 01    	call      w1
    hex2str_alt(dac16_get_dac0(), str);
    2132:	f2 0d 07    	rcall     0x3d18 <_dac16_get_dac0> <.LFB12> <.LFE11>
    2134:	8e 00 78    	mov.w     w14, w1
    2136:	bc fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2138:	d1 41 80    	mov.w     0x83a, w1
    213a:	0e 00 78    	mov.w     w14, w0
    213c:	01 00 01    	call      w1
    parser_puts("\r\n");
    213e:	d1 41 80    	mov.w     0x83a, w1
    2140:	30 65 29    	mov.w     #0x9653, w0
    2142:	01 00 01    	call      w1
}
    2144:	00 80 fa    	ulnk      
    2146:	00 00 06    	return    

00002148 <_dac16_ch2_handler>:

void dac16_ch2_handler(char *args) {
    2148:	0a 00 fa    	lnk       #0xa
    214a:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t pos, neg;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    214c:	00 00 eb    	clr.w     w0
    214e:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2150:	66 00 47    	add.w     w14, #0x6, w0
    2152:	00 01 78    	mov.w     w0, w2
    2154:	61 65 29    	mov.w     #0x9656, w1
    2156:	4e 00 90    	mov.w     [w14+8], w0
    2158:	3b fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    215a:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    215c:	1e 00 78    	mov.w     [w14], w0
    215e:	00 00 e0    	cp0.w     w0
    2160:	11 00 32    	bra       Z, 0x2184 <.L158>
    2162:	3e 00 90    	mov.w     [w14+6], w0
    2164:	00 00 e0    	cp0.w     w0
    2166:	0e 00 32    	bra       Z, 0x2184 <.L158>
        if ((str2hex(arg1, &pos) == 0) && (str2hex(arg2, &neg) == 0)) {
    2168:	0e 80 e8    	inc2.w    w14, w0
    216a:	80 00 78    	mov.w     w0, w1
    216c:	1e 00 78    	mov.w     [w14], w0
    216e:	db fa 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2170:	00 00 e0    	cp0.w     w0
    2172:	08 00 3a    	bra       NZ, 0x2184 <.L158>
    2174:	3e 00 90    	mov.w     [w14+6], w0
    2176:	e4 00 47    	add.w     w14, #0x4, w1
    2178:	d6 fa 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    217a:	00 00 e0    	cp0.w     w0
    217c:	03 00 3a    	bra       NZ, 0x2184 <.L158>
            dac16_set_ch2(pos, neg);
    217e:	ae 00 90    	mov.w     [w14+4], w1
    2180:	1e 00 90    	mov.w     [w14+2], w0
    2182:	ba 0e 07    	rcall     0x3ef8 <_dac16_set_ch2> <.LFB21> <.LFE20>

00002184 <.L158>:
        }
    }
}
    2184:	00 80 fa    	ulnk      
    2186:	00 00 06    	return    

00002188 <_dac16_ch2Q_handler>:

void dac16_ch2Q_handler(char *args) {
    2188:	08 00 fa    	lnk       #0x8
    218a:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(dac16_get_dac3(), str);
    218c:	43 0e 07    	rcall     0x3e14 <_dac16_get_dac3> <.LFB18> <.LFE17>
    218e:	8e 00 78    	mov.w     w14, w1
    2190:	8f fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2192:	d1 41 80    	mov.w     0x83a, w1
    2194:	0e 00 78    	mov.w     w14, w0
    2196:	01 00 01    	call      w1
    parser_putc(',');
    2198:	c1 41 80    	mov.w     0x838, w1
    219a:	c0 c2 b3    	mov.b     #0x2c, w0
    219c:	01 00 01    	call      w1
    hex2str_alt(dac16_get_dac2(), str);
    219e:	10 0e 07    	rcall     0x3dc0 <_dac16_get_dac2> <.LFB16> <.LFE15>
    21a0:	8e 00 78    	mov.w     w14, w1
    21a2:	86 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    21a4:	d1 41 80    	mov.w     0x83a, w1
    21a6:	0e 00 78    	mov.w     w14, w0
    21a8:	01 00 01    	call      w1
    parser_puts("\r\n");
    21aa:	d1 41 80    	mov.w     0x83a, w1
    21ac:	30 65 29    	mov.w     #0x9653, w0
    21ae:	01 00 01    	call      w1
}
    21b0:	00 80 fa    	ulnk      
    21b2:	00 00 06    	return    

000021b4 <_adc16_handler>:

// ADC16 commands
void adc16_handler(char *args) {
    21b4:	08 00 fa    	lnk       #0x8
    21b6:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    21b8:	00 00 eb    	clr.w     w0
    21ba:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    21bc:	64 00 47    	add.w     w14, #0x4, w0
    21be:	00 01 78    	mov.w     w0, w2
    21c0:	91 63 29    	mov.w     #0x9639, w1
    21c2:	3e 00 90    	mov.w     [w14+6], w0
    21c4:	05 fc 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    21c6:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    21c8:	1e 00 90    	mov.w     [w14+2], w0
    21ca:	00 00 e0    	cp0.w     w0
    21cc:	1a 00 32    	bra       Z, 0x2202 <.L161>
        for (i = 0; i < ADC16_TABLE_ENTRIES; i++) {
    21ce:	00 00 eb    	clr.w     w0
    21d0:	00 0f 78    	mov.w     w0, [w14]
    21d2:	14 00 37    	bra       0x21fc <.L163>

000021d4 <.L165>:
            if (str_cmp(command, adc16_table[i].command) == 0) {
    21d4:	1e 00 78    	mov.w     [w14], w0
    21d6:	c2 00 dd    	sl.w      w0, #0x2, w1
    21d8:	20 39 21    	mov.w     #0x1392, w0
    21da:	00 80 40    	add.w     w1, w0, w0
    21dc:	10 00 78    	mov.w     [w0], w0
    21de:	80 00 78    	mov.w     w0, w1
    21e0:	1e 00 90    	mov.w     [w14+2], w0
    21e2:	9b fb 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    21e4:	00 00 e0    	cp0.w     w0
    21e6:	09 00 3a    	bra       NZ, 0x21fa <.L164>
                adc16_table[i].handler(remainder);
    21e8:	1e 00 78    	mov.w     [w14], w0
    21ea:	42 00 dd    	sl.w      w0, #0x2, w0
    21ec:	80 80 e8    	inc2.w    w0, w1
    21ee:	20 39 21    	mov.w     #0x1392, w0
    21f0:	00 80 40    	add.w     w1, w0, w0
    21f2:	90 00 78    	mov.w     [w0], w1
    21f4:	2e 00 90    	mov.w     [w14+4], w0
    21f6:	01 00 01    	call      w1
                break;
    21f8:	04 00 37    	bra       0x2202 <.L161>

000021fa <.L164>:
    21fa:	1e 0f e8    	inc.w     [w14], [w14]

000021fc <.L163>:
    21fc:	1e 00 78    	mov.w     [w14], w0
    21fe:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    2200:	e9 ff 36    	bra       LEU, 0x21d4 <.L165>

00002202 <.L161>:
            }
        }
    }
}
    2202:	00 80 fa    	ulnk      
    2204:	00 00 06    	return    

00002206 <_adc16_ch1Q_handler>:

void adc16_ch1Q_handler(char *args) {
    2206:	08 00 fa    	lnk       #0x8
    2208:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch1(), str);
    220a:	8d 0c 07    	rcall     0x3b26 <_adc16_meas_ch1> <.LFB5> <.LFE4>
    220c:	8e 00 78    	mov.w     w14, w1
    220e:	50 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2210:	d1 41 80    	mov.w     0x83a, w1
    2212:	0e 00 78    	mov.w     w14, w0
    2214:	01 00 01    	call      w1
    parser_puts("\r\n");
    2216:	d1 41 80    	mov.w     0x83a, w1
    2218:	30 65 29    	mov.w     #0x9653, w0
    221a:	01 00 01    	call      w1
}
    221c:	00 80 fa    	ulnk      
    221e:	00 00 06    	return    

00002220 <_adc16_ch2Q_handler>:

void adc16_ch2Q_handler(char *args) {
    2220:	08 00 fa    	lnk       #0x8
    2222:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch2(), str);
    2224:	9e 0c 07    	rcall     0x3b62 <_adc16_meas_ch2> <.LFB6> <.LFE5>
    2226:	8e 00 78    	mov.w     w14, w1
    2228:	43 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    222a:	d1 41 80    	mov.w     0x83a, w1
    222c:	0e 00 78    	mov.w     w14, w0
    222e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2230:	d1 41 80    	mov.w     0x83a, w1
    2232:	30 65 29    	mov.w     #0x9653, w0
    2234:	01 00 01    	call      w1
}
    2236:	00 80 fa    	ulnk      
    2238:	00 00 06    	return    

0000223a <_adc16_ch1avgQ_handler>:

void adc16_ch1avgQ_handler(char *args) {
    223a:	08 00 fa    	lnk       #0x8
    223c:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch1_avg(), str);
    223e:	b0 0c 07    	rcall     0x3ba0 <_adc16_meas_ch1_avg> <.LFB7> <.LFE6>
    2240:	8e 00 78    	mov.w     w14, w1
    2242:	36 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2244:	d1 41 80    	mov.w     0x83a, w1
    2246:	0e 00 78    	mov.w     w14, w0
    2248:	01 00 01    	call      w1
    parser_puts("\r\n");
    224a:	d1 41 80    	mov.w     0x83a, w1
    224c:	30 65 29    	mov.w     #0x9653, w0
    224e:	01 00 01    	call      w1
}
    2250:	00 80 fa    	ulnk      
    2252:	00 00 06    	return    

00002254 <_adc16_ch2avgQ_handler>:

void adc16_ch2avgQ_handler(char *args) {
    2254:	08 00 fa    	lnk       #0x8
    2256:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch2_avg(), str);
    2258:	e1 0c 07    	rcall     0x3c1c <_adc16_meas_ch2_avg> <.LFB8> <.LFE7>
    225a:	8e 00 78    	mov.w     w14, w1
    225c:	29 fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    225e:	d1 41 80    	mov.w     0x83a, w1
    2260:	0e 00 78    	mov.w     w14, w0
    2262:	01 00 01    	call      w1
    parser_puts("\r\n");
    2264:	d1 41 80    	mov.w     0x83a, w1
    2266:	30 65 29    	mov.w     #0x9653, w0
    2268:	01 00 01    	call      w1
}
    226a:	00 80 fa    	ulnk      
    226c:	00 00 06    	return    

0000226e <_adc16_ch1rawQ_handler>:

void adc16_ch1rawQ_handler(char *args) {
    226e:	08 00 fa    	lnk       #0x8
    2270:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch1_raw(), str);
    2272:	2c 0c 07    	rcall     0x3acc <_adc16_meas_ch1_raw> <.LFB3> <.LFE2>
    2274:	8e 00 78    	mov.w     w14, w1
    2276:	1c fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2278:	d1 41 80    	mov.w     0x83a, w1
    227a:	0e 00 78    	mov.w     w14, w0
    227c:	01 00 01    	call      w1
    parser_puts("\r\n");
    227e:	d1 41 80    	mov.w     0x83a, w1
    2280:	30 65 29    	mov.w     #0x9653, w0
    2282:	01 00 01    	call      w1
}
    2284:	00 80 fa    	ulnk      
    2286:	00 00 06    	return    

00002288 <_adc16_ch2rawQ_handler>:

void adc16_ch2rawQ_handler(char *args) {
    2288:	08 00 fa    	lnk       #0x8
    228a:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_meas_ch2_raw(), str);
    228c:	35 0c 07    	rcall     0x3af8 <_adc16_meas_ch2_raw> <.LFB4> <.LFE3>
    228e:	8e 00 78    	mov.w     w14, w1
    2290:	0f fb 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2292:	d1 41 80    	mov.w     0x83a, w1
    2294:	0e 00 78    	mov.w     w14, w0
    2296:	01 00 01    	call      w1
    parser_puts("\r\n");
    2298:	d1 41 80    	mov.w     0x83a, w1
    229a:	30 65 29    	mov.w     #0x9653, w0
    229c:	01 00 01    	call      w1
}
    229e:	00 80 fa    	ulnk      
    22a0:	00 00 06    	return    

000022a2 <_adc16_calibrate_handler>:

void adc16_calibrate_handler(char *args) {
    22a2:	02 00 fa    	lnk       #0x2
    22a4:	00 0f 78    	mov.w     w0, [w14]
    adc16_calibrate();
    22a6:	b7 0b 07    	rcall     0x3a16 <_adc16_calibrate> <.LFB2> <.LFE1>
}
    22a8:	00 80 fa    	ulnk      
    22aa:	00 00 06    	return    

000022ac <_adc16_offsetQ_handler>:

void adc16_offsetQ_handler(char *args) {
    22ac:	08 00 fa    	lnk       #0x8
    22ae:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt((uint16_t)adc16_get_offset(), str);
    22b0:	f4 0c 07    	rcall     0x3c9a <_adc16_get_offset> <.LFB9> <.LFE8>
    22b2:	8e 00 78    	mov.w     w14, w1
    22b4:	fd fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    22b6:	d1 41 80    	mov.w     0x83a, w1
    22b8:	0e 00 78    	mov.w     w14, w0
    22ba:	01 00 01    	call      w1
    parser_puts("\r\n");
    22bc:	d1 41 80    	mov.w     0x83a, w1
    22be:	30 65 29    	mov.w     #0x9653, w0
    22c0:	01 00 01    	call      w1
}
    22c2:	00 80 fa    	ulnk      
    22c4:	00 00 06    	return    

000022c6 <_adc16_maxvalQ_handler>:

void adc16_maxvalQ_handler(char *args) {
    22c6:	08 00 fa    	lnk       #0x8
    22c8:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(adc16_get_max_val(), str);
    22ca:	eb 0c 07    	rcall     0x3ca2 <_adc16_get_max_val> <.LFB10> <.LFE9>
    22cc:	8e 00 78    	mov.w     w14, w1
    22ce:	f0 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    22d0:	d1 41 80    	mov.w     0x83a, w1
    22d2:	0e 00 78    	mov.w     w14, w0
    22d4:	01 00 01    	call      w1
    parser_puts("\r\n");
    22d6:	d1 41 80    	mov.w     0x83a, w1
    22d8:	30 65 29    	mov.w     #0x9653, w0
    22da:	01 00 01    	call      w1
}
    22dc:	00 80 fa    	ulnk      
    22de:	00 00 06    	return    

000022e0 <_adc24_handler>:

// ADC24 commands
void adc24_handler(char *args) {
    22e0:	08 00 fa    	lnk       #0x8
    22e2:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    22e4:	00 00 eb    	clr.w     w0
    22e6:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    22e8:	64 00 47    	add.w     w14, #0x4, w0
    22ea:	00 01 78    	mov.w     w0, w2
    22ec:	91 63 29    	mov.w     #0x9639, w1
    22ee:	3e 00 90    	mov.w     [w14+6], w0
    22f0:	6f fb 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    22f2:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    22f4:	1e 00 90    	mov.w     [w14+2], w0
    22f6:	00 00 e0    	cp0.w     w0
    22f8:	1a 00 32    	bra       Z, 0x232e <.L175>
        for (i = 0; i < ADC24_TABLE_ENTRIES; i++) {
    22fa:	00 00 eb    	clr.w     w0
    22fc:	00 0f 78    	mov.w     w0, [w14]
    22fe:	14 00 37    	bra       0x2328 <.L177>

00002300 <.L179>:
            if (str_cmp(command, adc24_table[i].command) == 0) {
    2300:	1e 00 78    	mov.w     [w14], w0
    2302:	c2 00 dd    	sl.w      w0, #0x2, w1
    2304:	60 3b 21    	mov.w     #0x13b6, w0
    2306:	00 80 40    	add.w     w1, w0, w0
    2308:	10 00 78    	mov.w     [w0], w0
    230a:	80 00 78    	mov.w     w0, w1
    230c:	1e 00 90    	mov.w     [w14+2], w0
    230e:	05 fb 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2310:	00 00 e0    	cp0.w     w0
    2312:	09 00 3a    	bra       NZ, 0x2326 <.L178>
                adc24_table[i].handler(remainder);
    2314:	1e 00 78    	mov.w     [w14], w0
    2316:	42 00 dd    	sl.w      w0, #0x2, w0
    2318:	80 80 e8    	inc2.w    w0, w1
    231a:	60 3b 21    	mov.w     #0x13b6, w0
    231c:	00 80 40    	add.w     w1, w0, w0
    231e:	90 00 78    	mov.w     [w0], w1
    2320:	2e 00 90    	mov.w     [w14+4], w0
    2322:	01 00 01    	call      w1
                break;
    2324:	04 00 37    	bra       0x232e <.L175>

00002326 <.L178>:
    2326:	1e 0f e8    	inc.w     [w14], [w14]

00002328 <.L177>:
    2328:	1e 00 78    	mov.w     [w14], w0
    232a:	ef 0f 50    	sub.w     w0, #0xf, [w15]
    232c:	e9 ff 36    	bra       LEU, 0x2300 <.L179>

0000232e <.L175>:
            }
        }
    }
}
    232e:	00 80 fa    	ulnk      
    2330:	00 00 06    	return    

00002332 <_adc24_ch1Q_handler>:

void adc24_ch1Q_handler(char *args) {
    2332:	10 00 fa    	lnk       #0x10
    2334:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both(&val1, &val2);
    2336:	64 00 47    	add.w     w14, #0x4, w0
    2338:	80 00 78    	mov.w     w0, w1
    233a:	0e 00 78    	mov.w     w14, w0
    233c:	3e 10 07    	rcall     0x43ba <_adc24_meas_both> <.LFB28> <.LFE27>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    233e:	1e 00 be    	mov.d     [w14], w0
    2340:	00 00 78    	mov.w     w0, w0
    2342:	e8 00 47    	add.w     w14, #0x8, w1
    2344:	b5 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2346:	d1 41 80    	mov.w     0x83a, w1
    2348:	68 00 47    	add.w     w14, #0x8, w0
    234a:	01 00 01    	call      w1
    parser_putc(',');
    234c:	c1 41 80    	mov.w     0x838, w1
    234e:	c0 c2 b3    	mov.b     #0x2c, w0
    2350:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    2352:	1e 00 be    	mov.d     [w14], w0
    2354:	40 08 de    	lsr.w     w1, #0x0, w0
    2356:	00 00 78    	mov.w     w0, w0
    2358:	e8 00 47    	add.w     w14, #0x8, w1
    235a:	aa fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    235c:	d1 41 80    	mov.w     0x83a, w1
    235e:	68 00 47    	add.w     w14, #0x8, w0
    2360:	01 00 01    	call      w1
    parser_puts("\r\n");
    2362:	d1 41 80    	mov.w     0x83a, w1
    2364:	30 65 29    	mov.w     #0x9653, w0
    2366:	01 00 01    	call      w1
}
    2368:	00 80 fa    	ulnk      
    236a:	00 00 06    	return    

0000236c <_adc24_ch2Q_handler>:

void adc24_ch2Q_handler(char *args) {
    236c:	10 00 fa    	lnk       #0x10
    236e:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both(&val1, &val2);
    2370:	64 00 47    	add.w     w14, #0x4, w0
    2372:	80 00 78    	mov.w     w0, w1
    2374:	0e 00 78    	mov.w     w14, w0
    2376:	21 10 07    	rcall     0x43ba <_adc24_meas_both> <.LFB28> <.LFE27>
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    2378:	2e 00 90    	mov.w     [w14+4], w0
    237a:	be 00 90    	mov.w     [w14+6], w1
    237c:	00 00 78    	mov.w     w0, w0
    237e:	e8 00 47    	add.w     w14, #0x8, w1
    2380:	97 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2382:	d1 41 80    	mov.w     0x83a, w1
    2384:	68 00 47    	add.w     w14, #0x8, w0
    2386:	01 00 01    	call      w1
    parser_putc(',');
    2388:	c1 41 80    	mov.w     0x838, w1
    238a:	c0 c2 b3    	mov.b     #0x2c, w0
    238c:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    238e:	2e 00 90    	mov.w     [w14+4], w0
    2390:	be 00 90    	mov.w     [w14+6], w1
    2392:	40 08 de    	lsr.w     w1, #0x0, w0
    2394:	00 00 78    	mov.w     w0, w0
    2396:	e8 00 47    	add.w     w14, #0x8, w1
    2398:	8b fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    239a:	d1 41 80    	mov.w     0x83a, w1
    239c:	68 00 47    	add.w     w14, #0x8, w0
    239e:	01 00 01    	call      w1
    parser_puts("\r\n");
    23a0:	d1 41 80    	mov.w     0x83a, w1
    23a2:	30 65 29    	mov.w     #0x9653, w0
    23a4:	01 00 01    	call      w1
}
    23a6:	00 80 fa    	ulnk      
    23a8:	00 00 06    	return    

000023aa <_adc24_ch1avgQ_handler>:

void adc24_ch1avgQ_handler(char *args) {
    23aa:	10 00 fa    	lnk       #0x10
    23ac:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_avg(&val1, &val2);
    23ae:	64 00 47    	add.w     w14, #0x4, w0
    23b0:	80 00 78    	mov.w     w0, w1
    23b2:	0e 00 78    	mov.w     w14, w0
    23b4:	2a 10 07    	rcall     0x440a <_adc24_meas_both_avg> <.LFB29> <.LFE28>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    23b6:	1e 00 be    	mov.d     [w14], w0
    23b8:	00 00 78    	mov.w     w0, w0
    23ba:	e8 00 47    	add.w     w14, #0x8, w1
    23bc:	79 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    23be:	d1 41 80    	mov.w     0x83a, w1
    23c0:	68 00 47    	add.w     w14, #0x8, w0
    23c2:	01 00 01    	call      w1
    parser_putc(',');
    23c4:	c1 41 80    	mov.w     0x838, w1
    23c6:	c0 c2 b3    	mov.b     #0x2c, w0
    23c8:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    23ca:	1e 00 be    	mov.d     [w14], w0
    23cc:	40 08 de    	lsr.w     w1, #0x0, w0
    23ce:	00 00 78    	mov.w     w0, w0
    23d0:	e8 00 47    	add.w     w14, #0x8, w1
    23d2:	6e fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    23d4:	d1 41 80    	mov.w     0x83a, w1
    23d6:	68 00 47    	add.w     w14, #0x8, w0
    23d8:	01 00 01    	call      w1
    parser_puts("\r\n");
    23da:	d1 41 80    	mov.w     0x83a, w1
    23dc:	30 65 29    	mov.w     #0x9653, w0
    23de:	01 00 01    	call      w1
}
    23e0:	00 80 fa    	ulnk      
    23e2:	00 00 06    	return    

000023e4 <_adc24_ch2avgQ_handler>:

void adc24_ch2avgQ_handler(char *args) {
    23e4:	10 00 fa    	lnk       #0x10
    23e6:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_avg(&val1, &val2);
    23e8:	64 00 47    	add.w     w14, #0x4, w0
    23ea:	80 00 78    	mov.w     w0, w1
    23ec:	0e 00 78    	mov.w     w14, w0
    23ee:	0d 10 07    	rcall     0x440a <_adc24_meas_both_avg> <.LFB29> <.LFE28>
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    23f0:	2e 00 90    	mov.w     [w14+4], w0
    23f2:	be 00 90    	mov.w     [w14+6], w1
    23f4:	00 00 78    	mov.w     w0, w0
    23f6:	e8 00 47    	add.w     w14, #0x8, w1
    23f8:	5b fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    23fa:	d1 41 80    	mov.w     0x83a, w1
    23fc:	68 00 47    	add.w     w14, #0x8, w0
    23fe:	01 00 01    	call      w1
    parser_putc(',');
    2400:	c1 41 80    	mov.w     0x838, w1
    2402:	c0 c2 b3    	mov.b     #0x2c, w0
    2404:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    2406:	2e 00 90    	mov.w     [w14+4], w0
    2408:	be 00 90    	mov.w     [w14+6], w1
    240a:	40 08 de    	lsr.w     w1, #0x0, w0
    240c:	00 00 78    	mov.w     w0, w0
    240e:	e8 00 47    	add.w     w14, #0x8, w1
    2410:	4f fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2412:	d1 41 80    	mov.w     0x83a, w1
    2414:	68 00 47    	add.w     w14, #0x8, w0
    2416:	01 00 01    	call      w1
    parser_puts("\r\n");
    2418:	d1 41 80    	mov.w     0x83a, w1
    241a:	30 65 29    	mov.w     #0x9653, w0
    241c:	01 00 01    	call      w1
}
    241e:	00 80 fa    	ulnk      
    2420:	00 00 06    	return    

00002422 <_adc24_ch1rawQ_handler>:

void adc24_ch1rawQ_handler(char *args) {
    2422:	10 00 fa    	lnk       #0x10
    2424:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_raw(&val1, &val2);
    2426:	64 00 47    	add.w     w14, #0x4, w0
    2428:	80 00 78    	mov.w     w0, w1
    242a:	0e 00 78    	mov.w     w14, w0
    242c:	3a 10 07    	rcall     0x44a2 <_adc24_meas_both_raw> <.LFB30> <.LFE29>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    242e:	1e 00 be    	mov.d     [w14], w0
    2430:	00 00 78    	mov.w     w0, w0
    2432:	e8 00 47    	add.w     w14, #0x8, w1
    2434:	3d fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2436:	d1 41 80    	mov.w     0x83a, w1
    2438:	68 00 47    	add.w     w14, #0x8, w0
    243a:	01 00 01    	call      w1
    parser_putc(',');
    243c:	c1 41 80    	mov.w     0x838, w1
    243e:	c0 c2 b3    	mov.b     #0x2c, w0
    2440:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    2442:	1e 00 be    	mov.d     [w14], w0
    2444:	40 08 de    	lsr.w     w1, #0x0, w0
    2446:	00 00 78    	mov.w     w0, w0
    2448:	e8 00 47    	add.w     w14, #0x8, w1
    244a:	32 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    244c:	d1 41 80    	mov.w     0x83a, w1
    244e:	68 00 47    	add.w     w14, #0x8, w0
    2450:	01 00 01    	call      w1
    parser_puts("\r\n");
    2452:	d1 41 80    	mov.w     0x83a, w1
    2454:	30 65 29    	mov.w     #0x9653, w0
    2456:	01 00 01    	call      w1
}
    2458:	00 80 fa    	ulnk      
    245a:	00 00 06    	return    

0000245c <_adc24_ch2rawQ_handler>:

void adc24_ch2rawQ_handler(char *args) {
    245c:	10 00 fa    	lnk       #0x10
    245e:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_raw(&val1, &val2);
    2460:	64 00 47    	add.w     w14, #0x4, w0
    2462:	80 00 78    	mov.w     w0, w1
    2464:	0e 00 78    	mov.w     w14, w0
    2466:	1d 10 07    	rcall     0x44a2 <_adc24_meas_both_raw> <.LFB30> <.LFE29>
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    2468:	2e 00 90    	mov.w     [w14+4], w0
    246a:	be 00 90    	mov.w     [w14+6], w1
    246c:	00 00 78    	mov.w     w0, w0
    246e:	e8 00 47    	add.w     w14, #0x8, w1
    2470:	1f fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2472:	d1 41 80    	mov.w     0x83a, w1
    2474:	68 00 47    	add.w     w14, #0x8, w0
    2476:	01 00 01    	call      w1
    parser_putc(',');
    2478:	c1 41 80    	mov.w     0x838, w1
    247a:	c0 c2 b3    	mov.b     #0x2c, w0
    247c:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    247e:	2e 00 90    	mov.w     [w14+4], w0
    2480:	be 00 90    	mov.w     [w14+6], w1
    2482:	40 08 de    	lsr.w     w1, #0x0, w0
    2484:	00 00 78    	mov.w     w0, w0
    2486:	e8 00 47    	add.w     w14, #0x8, w1
    2488:	13 fa 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    248a:	d1 41 80    	mov.w     0x83a, w1
    248c:	68 00 47    	add.w     w14, #0x8, w0
    248e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2490:	d1 41 80    	mov.w     0x83a, w1
    2492:	30 65 29    	mov.w     #0x9653, w0
    2494:	01 00 01    	call      w1
}
    2496:	00 80 fa    	ulnk      
    2498:	00 00 06    	return    

0000249a <_adc24_ch1offset_handler>:

void adc24_ch1offset_handler(char *args) {
    249a:	0a 00 fa    	lnk       #0xa
    249c:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    249e:	00 00 eb    	clr.w     w0
    24a0:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    24a2:	66 00 47    	add.w     w14, #0x6, w0
    24a4:	00 01 78    	mov.w     w0, w2
    24a6:	61 65 29    	mov.w     #0x9656, w1
    24a8:	4e 00 90    	mov.w     [w14+8], w0
    24aa:	92 fa 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    24ac:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    24ae:	1e 00 78    	mov.w     [w14], w0
    24b0:	00 00 e0    	cp0.w     w0
    24b2:	17 00 32    	bra       Z, 0x24e2 <.L186>
    24b4:	3e 00 90    	mov.w     [w14+6], w0
    24b6:	00 00 e0    	cp0.w     w0
    24b8:	14 00 32    	bra       Z, 0x24e2 <.L186>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    24ba:	0e 80 e8    	inc2.w    w14, w0
    24bc:	80 00 78    	mov.w     w0, w1
    24be:	1e 00 78    	mov.w     [w14], w0
    24c0:	32 f9 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    24c2:	00 00 e0    	cp0.w     w0
    24c4:	0e 00 3a    	bra       NZ, 0x24e2 <.L186>
    24c6:	3e 00 90    	mov.w     [w14+6], w0
    24c8:	e4 00 47    	add.w     w14, #0x4, w1
    24ca:	2d f9 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    24cc:	00 00 e0    	cp0.w     w0
    24ce:	09 00 3a    	bra       NZ, 0x24e2 <.L186>
            adc24_set_ch1offset((int32_t)(((uint32_t)(val2) << 16) | (uint32_t)(val1)));
    24d0:	2e 00 90    	mov.w     [w14+4], w0
    24d2:	80 00 eb    	clr.w     w1
    24d4:	c0 01 dd    	sl.w      w0, #0x0, w3
    24d6:	02 00 20    	mov.w     #0x0, w2
    24d8:	1e 00 90    	mov.w     [w14+2], w0
    24da:	80 00 eb    	clr.w     w1
    24dc:	00 00 71    	ior.w     w2, w0, w0
    24de:	81 80 71    	ior.w     w3, w1, w1
    24e0:	00 10 07    	rcall     0x44e2 <_adc24_set_ch1offset> <.LFB31> <.LFE30>

000024e2 <.L186>:
        }
    }
}
    24e2:	00 80 fa    	ulnk      
    24e4:	00 00 06    	return    

000024e6 <_adc24_ch1offsetQ_handler>:

void adc24_ch1offsetQ_handler(char *args) {
    24e6:	0c 00 fa    	lnk       #0xc
    24e8:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc24_get_ch1offset();
    24ea:	02 10 07    	rcall     0x44f0 <_adc24_get_ch1offset> <.LFB32> <.LFE31>
    24ec:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    24ee:	1e 00 78    	mov.w     [w14], w0
    24f0:	e4 00 47    	add.w     w14, #0x4, w1
    24f2:	de f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    24f4:	d1 41 80    	mov.w     0x83a, w1
    24f6:	64 00 47    	add.w     w14, #0x4, w0
    24f8:	01 00 01    	call      w1
    parser_putc(',');
    24fa:	c1 41 80    	mov.w     0x838, w1
    24fc:	c0 c2 b3    	mov.b     #0x2c, w0
    24fe:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    2500:	1e 00 be    	mov.d     [w14], w0
    2502:	40 08 de    	lsr.w     w1, #0x0, w0
    2504:	00 00 78    	mov.w     w0, w0
    2506:	e4 00 47    	add.w     w14, #0x4, w1
    2508:	d3 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    250a:	d1 41 80    	mov.w     0x83a, w1
    250c:	64 00 47    	add.w     w14, #0x4, w0
    250e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2510:	d1 41 80    	mov.w     0x83a, w1
    2512:	30 65 29    	mov.w     #0x9653, w0
    2514:	01 00 01    	call      w1
}
    2516:	00 80 fa    	ulnk      
    2518:	00 00 06    	return    

0000251a <_adc24_ch2offset_handler>:

void adc24_ch2offset_handler(char *args) {
    251a:	0a 00 fa    	lnk       #0xa
    251c:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    251e:	00 00 eb    	clr.w     w0
    2520:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    2522:	66 00 47    	add.w     w14, #0x6, w0
    2524:	00 01 78    	mov.w     w0, w2
    2526:	61 65 29    	mov.w     #0x9656, w1
    2528:	4e 00 90    	mov.w     [w14+8], w0
    252a:	52 fa 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    252c:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    252e:	1e 00 78    	mov.w     [w14], w0
    2530:	00 00 e0    	cp0.w     w0
    2532:	17 00 32    	bra       Z, 0x2562 <.L189>
    2534:	3e 00 90    	mov.w     [w14+6], w0
    2536:	00 00 e0    	cp0.w     w0
    2538:	14 00 32    	bra       Z, 0x2562 <.L189>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    253a:	0e 80 e8    	inc2.w    w14, w0
    253c:	80 00 78    	mov.w     w0, w1
    253e:	1e 00 78    	mov.w     [w14], w0
    2540:	f2 f8 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2542:	00 00 e0    	cp0.w     w0
    2544:	0e 00 3a    	bra       NZ, 0x2562 <.L189>
    2546:	3e 00 90    	mov.w     [w14+6], w0
    2548:	e4 00 47    	add.w     w14, #0x4, w1
    254a:	ed f8 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    254c:	00 00 e0    	cp0.w     w0
    254e:	09 00 3a    	bra       NZ, 0x2562 <.L189>
            adc24_set_ch2offset((int32_t)(((uint32_t)(val2) << 16) | (uint32_t)(val1)));
    2550:	2e 00 90    	mov.w     [w14+4], w0
    2552:	80 00 eb    	clr.w     w1
    2554:	c0 01 dd    	sl.w      w0, #0x0, w3
    2556:	02 00 20    	mov.w     #0x0, w2
    2558:	1e 00 90    	mov.w     [w14+2], w0
    255a:	80 00 eb    	clr.w     w1
    255c:	00 00 71    	ior.w     w2, w0, w0
    255e:	81 80 71    	ior.w     w3, w1, w1
    2560:	cc 0f 07    	rcall     0x44fa <_adc24_set_ch2offset> <.LFB33> <.LFE32>

00002562 <.L189>:
        }
    }
}
    2562:	00 80 fa    	ulnk      
    2564:	00 00 06    	return    

00002566 <_adc24_ch2offsetQ_handler>:

void adc24_ch2offsetQ_handler(char *args) {
    2566:	0c 00 fa    	lnk       #0xc
    2568:	50 07 98    	mov.w     w0, [w14+10]
    int32_t val;
    char str[5];

    val = adc24_get_ch2offset();
    256a:	ce 0f 07    	rcall     0x4508 <_adc24_get_ch2offset> <.LFB34> <.LFE33>
    256c:	00 8f be    	mov.d     w0, [w14]
    hex2str_alt((uint16_t)(val & 0xFFFF), str);
    256e:	1e 00 78    	mov.w     [w14], w0
    2570:	e4 00 47    	add.w     w14, #0x4, w1
    2572:	9e f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2574:	d1 41 80    	mov.w     0x83a, w1
    2576:	64 00 47    	add.w     w14, #0x4, w0
    2578:	01 00 01    	call      w1
    parser_putc(',');
    257a:	c1 41 80    	mov.w     0x838, w1
    257c:	c0 c2 b3    	mov.b     #0x2c, w0
    257e:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val >> 16), str);
    2580:	1e 00 be    	mov.d     [w14], w0
    2582:	40 08 de    	lsr.w     w1, #0x0, w0
    2584:	00 00 78    	mov.w     w0, w0
    2586:	e4 00 47    	add.w     w14, #0x4, w1
    2588:	93 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    258a:	d1 41 80    	mov.w     0x83a, w1
    258c:	64 00 47    	add.w     w14, #0x4, w0
    258e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2590:	d1 41 80    	mov.w     0x83a, w1
    2592:	30 65 29    	mov.w     #0x9653, w0
    2594:	01 00 01    	call      w1
}
    2596:	00 80 fa    	ulnk      
    2598:	00 00 06    	return    

0000259a <_adc24_bothQ_handler>:

void adc24_bothQ_handler(char *args) {
    259a:	10 00 fa    	lnk       #0x10
    259c:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both(&val1, &val2);
    259e:	64 00 47    	add.w     w14, #0x4, w0
    25a0:	80 00 78    	mov.w     w0, w1
    25a2:	0e 00 78    	mov.w     w14, w0
    25a4:	0a 0f 07    	rcall     0x43ba <_adc24_meas_both> <.LFB28> <.LFE27>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    25a6:	1e 00 be    	mov.d     [w14], w0
    25a8:	00 00 78    	mov.w     w0, w0
    25aa:	e8 00 47    	add.w     w14, #0x8, w1
    25ac:	81 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    25ae:	d1 41 80    	mov.w     0x83a, w1
    25b0:	68 00 47    	add.w     w14, #0x8, w0
    25b2:	01 00 01    	call      w1
    parser_putc(',');
    25b4:	c1 41 80    	mov.w     0x838, w1
    25b6:	c0 c2 b3    	mov.b     #0x2c, w0
    25b8:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    25ba:	1e 00 be    	mov.d     [w14], w0
    25bc:	40 08 de    	lsr.w     w1, #0x0, w0
    25be:	00 00 78    	mov.w     w0, w0
    25c0:	e8 00 47    	add.w     w14, #0x8, w1
    25c2:	76 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    25c4:	d1 41 80    	mov.w     0x83a, w1
    25c6:	68 00 47    	add.w     w14, #0x8, w0
    25c8:	01 00 01    	call      w1
    parser_putc(',');
    25ca:	c1 41 80    	mov.w     0x838, w1
    25cc:	c0 c2 b3    	mov.b     #0x2c, w0
    25ce:	01 00 01    	call      w1
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    25d0:	2e 00 90    	mov.w     [w14+4], w0
    25d2:	be 00 90    	mov.w     [w14+6], w1
    25d4:	00 00 78    	mov.w     w0, w0
    25d6:	e8 00 47    	add.w     w14, #0x8, w1
    25d8:	6b f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    25da:	d1 41 80    	mov.w     0x83a, w1
    25dc:	68 00 47    	add.w     w14, #0x8, w0
    25de:	01 00 01    	call      w1
    parser_putc(',');
    25e0:	c1 41 80    	mov.w     0x838, w1
    25e2:	c0 c2 b3    	mov.b     #0x2c, w0
    25e4:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    25e6:	2e 00 90    	mov.w     [w14+4], w0
    25e8:	be 00 90    	mov.w     [w14+6], w1
    25ea:	40 08 de    	lsr.w     w1, #0x0, w0
    25ec:	00 00 78    	mov.w     w0, w0
    25ee:	e8 00 47    	add.w     w14, #0x8, w1
    25f0:	5f f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    25f2:	d1 41 80    	mov.w     0x83a, w1
    25f4:	68 00 47    	add.w     w14, #0x8, w0
    25f6:	01 00 01    	call      w1
    parser_puts("\r\n");
    25f8:	d1 41 80    	mov.w     0x83a, w1
    25fa:	30 65 29    	mov.w     #0x9653, w0
    25fc:	01 00 01    	call      w1
}
    25fe:	00 80 fa    	ulnk      
    2600:	00 00 06    	return    

00002602 <_adc24_bothavgQ_handler>:

void adc24_bothavgQ_handler(char *args) {
    2602:	10 00 fa    	lnk       #0x10
    2604:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_avg(&val1, &val2);
    2606:	64 00 47    	add.w     w14, #0x4, w0
    2608:	80 00 78    	mov.w     w0, w1
    260a:	0e 00 78    	mov.w     w14, w0
    260c:	fe 0e 07    	rcall     0x440a <_adc24_meas_both_avg> <.LFB29> <.LFE28>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    260e:	1e 00 be    	mov.d     [w14], w0
    2610:	00 00 78    	mov.w     w0, w0
    2612:	e8 00 47    	add.w     w14, #0x8, w1
    2614:	4d f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2616:	d1 41 80    	mov.w     0x83a, w1
    2618:	68 00 47    	add.w     w14, #0x8, w0
    261a:	01 00 01    	call      w1
    parser_putc(',');
    261c:	c1 41 80    	mov.w     0x838, w1
    261e:	c0 c2 b3    	mov.b     #0x2c, w0
    2620:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    2622:	1e 00 be    	mov.d     [w14], w0
    2624:	40 08 de    	lsr.w     w1, #0x0, w0
    2626:	00 00 78    	mov.w     w0, w0
    2628:	e8 00 47    	add.w     w14, #0x8, w1
    262a:	42 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    262c:	d1 41 80    	mov.w     0x83a, w1
    262e:	68 00 47    	add.w     w14, #0x8, w0
    2630:	01 00 01    	call      w1
    parser_putc(',');
    2632:	c1 41 80    	mov.w     0x838, w1
    2634:	c0 c2 b3    	mov.b     #0x2c, w0
    2636:	01 00 01    	call      w1
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    2638:	2e 00 90    	mov.w     [w14+4], w0
    263a:	be 00 90    	mov.w     [w14+6], w1
    263c:	00 00 78    	mov.w     w0, w0
    263e:	e8 00 47    	add.w     w14, #0x8, w1
    2640:	37 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2642:	d1 41 80    	mov.w     0x83a, w1
    2644:	68 00 47    	add.w     w14, #0x8, w0
    2646:	01 00 01    	call      w1
    parser_putc(',');
    2648:	c1 41 80    	mov.w     0x838, w1
    264a:	c0 c2 b3    	mov.b     #0x2c, w0
    264c:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    264e:	2e 00 90    	mov.w     [w14+4], w0
    2650:	be 00 90    	mov.w     [w14+6], w1
    2652:	40 08 de    	lsr.w     w1, #0x0, w0
    2654:	00 00 78    	mov.w     w0, w0
    2656:	e8 00 47    	add.w     w14, #0x8, w1
    2658:	2b f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    265a:	d1 41 80    	mov.w     0x83a, w1
    265c:	68 00 47    	add.w     w14, #0x8, w0
    265e:	01 00 01    	call      w1
    parser_puts("\r\n");
    2660:	d1 41 80    	mov.w     0x83a, w1
    2662:	30 65 29    	mov.w     #0x9653, w0
    2664:	01 00 01    	call      w1
}
    2666:	00 80 fa    	ulnk      
    2668:	00 00 06    	return    

0000266a <_adc24_bothrawQ_handler>:

void adc24_bothrawQ_handler(char *args) {
    266a:	10 00 fa    	lnk       #0x10
    266c:	70 07 98    	mov.w     w0, [w14+14]
    int32_t val1, val2;
    char str[5];

    adc24_meas_both_raw(&val1, &val2);
    266e:	64 00 47    	add.w     w14, #0x4, w0
    2670:	80 00 78    	mov.w     w0, w1
    2672:	0e 00 78    	mov.w     w14, w0
    2674:	16 0f 07    	rcall     0x44a2 <_adc24_meas_both_raw> <.LFB30> <.LFE29>
    hex2str_alt((uint16_t)(val1 & 0xFFFF), str);
    2676:	1e 00 be    	mov.d     [w14], w0
    2678:	00 00 78    	mov.w     w0, w0
    267a:	e8 00 47    	add.w     w14, #0x8, w1
    267c:	19 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    267e:	d1 41 80    	mov.w     0x83a, w1
    2680:	68 00 47    	add.w     w14, #0x8, w0
    2682:	01 00 01    	call      w1
    parser_putc(',');
    2684:	c1 41 80    	mov.w     0x838, w1
    2686:	c0 c2 b3    	mov.b     #0x2c, w0
    2688:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val1 >> 16), str);
    268a:	1e 00 be    	mov.d     [w14], w0
    268c:	40 08 de    	lsr.w     w1, #0x0, w0
    268e:	00 00 78    	mov.w     w0, w0
    2690:	e8 00 47    	add.w     w14, #0x8, w1
    2692:	0e f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2694:	d1 41 80    	mov.w     0x83a, w1
    2696:	68 00 47    	add.w     w14, #0x8, w0
    2698:	01 00 01    	call      w1
    parser_putc(',');
    269a:	c1 41 80    	mov.w     0x838, w1
    269c:	c0 c2 b3    	mov.b     #0x2c, w0
    269e:	01 00 01    	call      w1
    hex2str_alt((uint16_t)(val2 & 0xFFFF), str);
    26a0:	2e 00 90    	mov.w     [w14+4], w0
    26a2:	be 00 90    	mov.w     [w14+6], w1
    26a4:	00 00 78    	mov.w     w0, w0
    26a6:	e8 00 47    	add.w     w14, #0x8, w1
    26a8:	03 f9 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    26aa:	d1 41 80    	mov.w     0x83a, w1
    26ac:	68 00 47    	add.w     w14, #0x8, w0
    26ae:	01 00 01    	call      w1
    parser_putc(',');
    26b0:	c1 41 80    	mov.w     0x838, w1
    26b2:	c0 c2 b3    	mov.b     #0x2c, w0
    26b4:	01 00 01    	call      w1
    hex2str_alt((uint16_t)((uint32_t)val2 >> 16), str);
    26b6:	2e 00 90    	mov.w     [w14+4], w0
    26b8:	be 00 90    	mov.w     [w14+6], w1
    26ba:	40 08 de    	lsr.w     w1, #0x0, w0
    26bc:	00 00 78    	mov.w     w0, w0
    26be:	e8 00 47    	add.w     w14, #0x8, w1
    26c0:	f7 f8 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    26c2:	d1 41 80    	mov.w     0x83a, w1
    26c4:	68 00 47    	add.w     w14, #0x8, w0
    26c6:	01 00 01    	call      w1
    parser_puts("\r\n");
    26c8:	d1 41 80    	mov.w     0x83a, w1
    26ca:	30 65 29    	mov.w     #0x9653, w0
    26cc:	01 00 01    	call      w1
}
    26ce:	00 80 fa    	ulnk      
    26d0:	00 00 06    	return    

000026d2 <_adc24_calibrate_handler>:

void adc24_calibrate_handler(char *args) {
    26d2:	02 00 fa    	lnk       #0x2
    26d4:	00 0f 78    	mov.w     w0, [w14]
    adc24_calibrate();
    26d6:	d2 0c 07    	rcall     0x407c <_adc24_calibrate> <.LFB23> <.LFE22>
}
    26d8:	00 80 fa    	ulnk      
    26da:	00 00 06    	return    

000026dc <_adc24_reg_handler>:

void adc24_reg_handler(char *args) {
    26dc:	0a 00 fa    	lnk       #0xa
    26de:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t reg, val;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    26e0:	00 00 eb    	clr.w     w0
    26e2:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    26e4:	66 00 47    	add.w     w14, #0x6, w0
    26e6:	00 01 78    	mov.w     w0, w2
    26e8:	61 65 29    	mov.w     #0x9656, w1
    26ea:	4e 00 90    	mov.w     [w14+8], w0
    26ec:	71 f9 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    26ee:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    26f0:	1e 00 78    	mov.w     [w14], w0
    26f2:	00 00 e0    	cp0.w     w0
    26f4:	13 00 32    	bra       Z, 0x271c <.L196>
    26f6:	3e 00 90    	mov.w     [w14+6], w0
    26f8:	00 00 e0    	cp0.w     w0
    26fa:	10 00 32    	bra       Z, 0x271c <.L196>
        if ((str2hex(arg1, &reg) == 0) && (str2hex(arg2, &val) == 0)) {
    26fc:	0e 80 e8    	inc2.w    w14, w0
    26fe:	80 00 78    	mov.w     w0, w1
    2700:	1e 00 78    	mov.w     [w14], w0
    2702:	11 f8 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2704:	00 00 e0    	cp0.w     w0
    2706:	0a 00 3a    	bra       NZ, 0x271c <.L196>
    2708:	3e 00 90    	mov.w     [w14+6], w0
    270a:	e4 00 47    	add.w     w14, #0x4, w1
    270c:	0c f8 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    270e:	00 00 e0    	cp0.w     w0
    2710:	05 00 3a    	bra       NZ, 0x271c <.L196>
            adc24_write_reg((uint8_t)reg, (uint8_t)val);
    2712:	2e 00 90    	mov.w     [w14+4], w0
    2714:	80 40 78    	mov.b     w0, w1
    2716:	1e 00 90    	mov.w     [w14+2], w0
    2718:	00 40 78    	mov.b     w0, w0
    271a:	18 0d 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

0000271c <.L196>:
        }
    }
}
    271c:	00 80 fa    	ulnk      
    271e:	00 00 06    	return    

00002720 <_adc24_regQ_handler>:

void adc24_regQ_handler(char *args) {
    2720:	0e 00 fa    	lnk       #0xe
    2722:	60 07 98    	mov.w     w0, [w14+12]
    char *token, *remainder;
    uint16_t reg;
    char str[5];

    remainder = (char *)NULL;
    2724:	00 00 eb    	clr.w     w0
    2726:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    2728:	0e 80 e8    	inc2.w    w14, w0
    272a:	00 01 78    	mov.w     w0, w2
    272c:	61 65 29    	mov.w     #0x9656, w1
    272e:	6e 00 90    	mov.w     [w14+12], w0
    2730:	4f f9 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2732:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &reg) == 0)) {
    2734:	1e 00 78    	mov.w     [w14], w0
    2736:	00 00 e0    	cp0.w     w0
    2738:	12 00 32    	bra       Z, 0x275e <.L198>
    273a:	64 00 47    	add.w     w14, #0x4, w0
    273c:	80 00 78    	mov.w     w0, w1
    273e:	1e 00 78    	mov.w     [w14], w0
    2740:	f2 f7 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2742:	00 00 e0    	cp0.w     w0
    2744:	0c 00 3a    	bra       NZ, 0x275e <.L198>
        hex2str_alt((uint16_t)adc24_read_reg((uint8_t)reg), str);
    2746:	2e 00 90    	mov.w     [w14+4], w0
    2748:	00 40 78    	mov.b     w0, w0
    274a:	40 0d 07    	rcall     0x41cc <_adc24_read_reg> <.LFB26> <.LFE25>
    274c:	00 80 fb    	ze        w0, w0
    274e:	e6 00 47    	add.w     w14, #0x6, w1
    2750:	af f8 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    2752:	d1 41 80    	mov.w     0x83a, w1
    2754:	66 00 47    	add.w     w14, #0x6, w0
    2756:	01 00 01    	call      w1
        parser_puts("\r\n");
    2758:	d1 41 80    	mov.w     0x83a, w1
    275a:	30 65 29    	mov.w     #0x9653, w0
    275c:	01 00 01    	call      w1

0000275e <.L198>:
    }
}
    275e:	00 80 fa    	ulnk      
    2760:	00 00 06    	return    

00002762 <_digout_handler>:

// DIGOUT commands
void digout_handler(char *args) {
    2762:	08 00 fa    	lnk       #0x8
    2764:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    2766:	00 00 eb    	clr.w     w0
    2768:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    276a:	64 00 47    	add.w     w14, #0x4, w0
    276c:	00 01 78    	mov.w     w0, w2
    276e:	91 63 29    	mov.w     #0x9639, w1
    2770:	3e 00 90    	mov.w     [w14+6], w0
    2772:	2e f9 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2774:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    2776:	1e 00 90    	mov.w     [w14+2], w0
    2778:	00 00 e0    	cp0.w     w0
    277a:	1a 00 32    	bra       Z, 0x27b0 <.L200>
        for (i = 0; i < DIGOUT_TABLE_ENTRIES; i++) {
    277c:	00 00 eb    	clr.w     w0
    277e:	00 0f 78    	mov.w     w0, [w14]
    2780:	14 00 37    	bra       0x27aa <.L202>

00002782 <.L204>:
            if (str_cmp(command, digout_table[i].command) == 0) {
    2782:	1e 00 78    	mov.w     [w14], w0
    2784:	c2 00 dd    	sl.w      w0, #0x2, w1
    2786:	60 3f 21    	mov.w     #0x13f6, w0
    2788:	00 80 40    	add.w     w1, w0, w0
    278a:	10 00 78    	mov.w     [w0], w0
    278c:	80 00 78    	mov.w     w0, w1
    278e:	1e 00 90    	mov.w     [w14+2], w0
    2790:	c4 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2792:	00 00 e0    	cp0.w     w0
    2794:	09 00 3a    	bra       NZ, 0x27a8 <.L203>
                digout_table[i].handler(remainder);
    2796:	1e 00 78    	mov.w     [w14], w0
    2798:	42 00 dd    	sl.w      w0, #0x2, w0
    279a:	80 80 e8    	inc2.w    w0, w1
    279c:	60 3f 21    	mov.w     #0x13f6, w0
    279e:	00 80 40    	add.w     w1, w0, w0
    27a0:	90 00 78    	mov.w     [w0], w1
    27a2:	2e 00 90    	mov.w     [w14+4], w0
    27a4:	01 00 01    	call      w1
                break;
    27a6:	04 00 37    	bra       0x27b0 <.L200>

000027a8 <.L203>:
    27a8:	1e 0f e8    	inc.w     [w14], [w14]

000027aa <.L202>:
    27aa:	1e 00 78    	mov.w     [w14], w0
    27ac:	ff 0f 50    	sub.w     w0, #0x1f, [w15]
    27ae:	e9 ff 36    	bra       LEU, 0x2782 <.L204>

000027b0 <.L200>:
            }
        }
    }
}
    27b0:	00 80 fa    	ulnk      
    27b2:	00 00 06    	return    

000027b4 <_portd_handler>:

void portd_handler(char *args) {
    27b4:	08 00 fa    	lnk       #0x8
    27b6:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    27b8:	00 00 eb    	clr.w     w0
    27ba:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    27bc:	0e 80 e8    	inc2.w    w14, w0
    27be:	00 01 78    	mov.w     w0, w2
    27c0:	61 65 29    	mov.w     #0x9656, w1
    27c2:	3e 00 90    	mov.w     [w14+6], w0
    27c4:	05 f9 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    27c6:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    27c8:	1e 00 78    	mov.w     [w14], w0
    27ca:	00 00 e0    	cp0.w     w0
    27cc:	0e 00 32    	bra       Z, 0x27ea <.L205>
    27ce:	64 00 47    	add.w     w14, #0x4, w0
    27d0:	80 00 78    	mov.w     w0, w1
    27d2:	1e 00 78    	mov.w     [w14], w0
    27d4:	a8 f7 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    27d6:	00 00 e0    	cp0.w     w0
    27d8:	08 00 3a    	bra       NZ, 0x27ea <.L205>
        LATD = (LATD & 0xFF80) | (val & 0x7F);
    27da:	e1 16 80    	mov.w     0x2dc, w1
    27dc:	00 f8 2f    	mov.w     #0xff80, w0
    27de:	80 80 60    	and.w     w1, w0, w1
    27e0:	2e 01 90    	mov.w     [w14+4], w2
    27e2:	f0 07 20    	mov.w     #0x7f, w0
    27e4:	00 00 61    	and.w     w2, w0, w0
    27e6:	01 00 70    	ior.w     w0, w1, w0
    27e8:	e0 16 88    	mov.w     w0, 0x2dc

000027ea <.L205>:
    }
}
    27ea:	00 80 fa    	ulnk      
    27ec:	00 00 06    	return    

000027ee <_portdQ_handler>:

void portdQ_handler(char *args) {
    27ee:	08 00 fa    	lnk       #0x8
    27f0:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(PORTD & 0x7F, str);
    27f2:	d1 16 80    	mov.w     0x2da, w1
    27f4:	f0 07 20    	mov.w     #0x7f, w0
    27f6:	00 80 60    	and.w     w1, w0, w0
    27f8:	8e 00 78    	mov.w     w14, w1
    27fa:	5a f8 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    27fc:	d1 41 80    	mov.w     0x83a, w1
    27fe:	0e 00 78    	mov.w     w14, w0
    2800:	01 00 01    	call      w1
    parser_puts("\r\n");
    2802:	d1 41 80    	mov.w     0x83a, w1
    2804:	30 65 29    	mov.w     #0x9653, w0
    2806:	01 00 01    	call      w1
}
    2808:	00 80 fa    	ulnk      
    280a:	00 00 06    	return    

0000280c <_rd0_handler>:

void rd0_handler(char *args) {
    280c:	08 00 fa    	lnk       #0x8
    280e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2810:	00 00 eb    	clr.w     w0
    2812:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2814:	0e 80 e8    	inc2.w    w14, w0
    2816:	00 01 78    	mov.w     w0, w2
    2818:	91 63 29    	mov.w     #0x9639, w1
    281a:	3e 00 90    	mov.w     [w14+6], w0
    281c:	d9 f8 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    281e:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2820:	1e 00 78    	mov.w     [w14], w0
    2822:	00 00 e0    	cp0.w     w0
    2824:	33 00 32    	bra       Z, 0x288c <.L208>
        if (str_cmp(token, "ON") == 0) {
    2826:	d1 63 29    	mov.w     #0x963d, w1
    2828:	1e 00 78    	mov.w     [w14], w0
    282a:	77 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    282c:	00 00 e0    	cp0.w     w0
    282e:	02 00 3a    	bra       NZ, 0x2834 <.L210>
            RD0_ = ON;
    2830:	dc 02 a8    	bset.b    0x2dc, #0x0
    2832:	2c 00 37    	bra       0x288c <.L208>

00002834 <.L210>:
        } else if (str_cmp(token, "OFF") == 0) {
    2834:	01 64 29    	mov.w     #0x9640, w1
    2836:	1e 00 78    	mov.w     [w14], w0
    2838:	70 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    283a:	00 00 e0    	cp0.w     w0
    283c:	02 00 3a    	bra       NZ, 0x2842 <.L211>
            RD0_ = OFF;
    283e:	dc 02 a9    	bclr.b    0x2dc, #0x0
    2840:	25 00 37    	bra       0x288c <.L208>

00002842 <.L211>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2842:	41 64 29    	mov.w     #0x9644, w1
    2844:	1e 00 78    	mov.w     [w14], w0
    2846:	69 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2848:	00 00 e0    	cp0.w     w0
    284a:	0e 00 3a    	bra       NZ, 0x2868 <.L212>
            RD0_ = !RD0_;
    284c:	e0 16 80    	mov.w     0x2dc, w0
    284e:	61 00 60    	and.w     w0, #0x1, w0
    2850:	00 f0 a7    	btsc.w    w0, #0xf
    2852:	00 00 ea    	neg.w     w0, w0
    2854:	00 00 e9    	dec.w     w0, w0
    2856:	4f 00 de    	lsr.w     w0, #0xf, w0
    2858:	00 40 78    	mov.b     w0, w0
    285a:	00 80 fb    	ze        w0, w0
    285c:	61 00 60    	and.w     w0, #0x1, w0
    285e:	e1 16 80    	mov.w     0x2dc, w1
    2860:	01 00 a1    	bclr.w    w1, #0x0
    2862:	01 00 70    	ior.w     w0, w1, w0
    2864:	e0 16 88    	mov.w     w0, 0x2dc
    2866:	12 00 37    	bra       0x288c <.L208>

00002868 <.L212>:
        } else if (str2hex(token, &val) == 0) {
    2868:	64 00 47    	add.w     w14, #0x4, w0
    286a:	80 00 78    	mov.w     w0, w1
    286c:	1e 00 78    	mov.w     [w14], w0
    286e:	5b f7 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2870:	00 00 e0    	cp0.w     w0
    2872:	0c 00 3a    	bra       NZ, 0x288c <.L208>
            RD0_ = (val) ? 1 : 0;
    2874:	2e 00 90    	mov.w     [w14+4], w0
    2876:	00 f0 a7    	btsc.w    w0, #0xf
    2878:	00 00 ea    	neg.w     w0, w0
    287a:	00 00 ea    	neg.w     w0, w0
    287c:	4f 00 de    	lsr.w     w0, #0xf, w0
    287e:	00 40 78    	mov.b     w0, w0
    2880:	00 80 fb    	ze        w0, w0
    2882:	61 00 60    	and.w     w0, #0x1, w0
    2884:	e1 16 80    	mov.w     0x2dc, w1
    2886:	01 00 a1    	bclr.w    w1, #0x0
    2888:	01 00 70    	ior.w     w0, w1, w0
    288a:	e0 16 88    	mov.w     w0, 0x2dc

0000288c <.L208>:
        }
    }
}
    288c:	00 80 fa    	ulnk      
    288e:	00 00 06    	return    

00002890 <_rd0Q_handler>:

void rd0Q_handler(char *args) {
    2890:	02 00 fa    	lnk       #0x2
    2892:	00 0f 78    	mov.w     w0, [w14]
    if (RD0_ == ON)
    2894:	e0 16 80    	mov.w     0x2dc, w0
    2896:	61 00 60    	and.w     w0, #0x1, w0
    2898:	00 00 e0    	cp0.w     w0
    289a:	04 00 32    	bra       Z, 0x28a4 <.L214>
        parser_puts("1\r\n");
    289c:	d1 41 80    	mov.w     0x83a, w1
    289e:	b0 64 29    	mov.w     #0x964b, w0
    28a0:	01 00 01    	call      w1
    28a2:	03 00 37    	bra       0x28aa <.L213>

000028a4 <.L214>:
    else
        parser_puts("0\r\n");
    28a4:	d1 41 80    	mov.w     0x83a, w1
    28a6:	f0 64 29    	mov.w     #0x964f, w0
    28a8:	01 00 01    	call      w1

000028aa <.L213>:
}
    28aa:	00 80 fa    	ulnk      
    28ac:	00 00 06    	return    

000028ae <_rd1_handler>:

void rd1_handler(char *args) {
    28ae:	08 00 fa    	lnk       #0x8
    28b0:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    28b2:	00 00 eb    	clr.w     w0
    28b4:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    28b6:	0e 80 e8    	inc2.w    w14, w0
    28b8:	00 01 78    	mov.w     w0, w2
    28ba:	91 63 29    	mov.w     #0x9639, w1
    28bc:	3e 00 90    	mov.w     [w14+6], w0
    28be:	88 f8 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    28c0:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    28c2:	1e 00 78    	mov.w     [w14], w0
    28c4:	00 00 e0    	cp0.w     w0
    28c6:	35 00 32    	bra       Z, 0x2932 <.L216>
        if (str_cmp(token, "ON") == 0) {
    28c8:	d1 63 29    	mov.w     #0x963d, w1
    28ca:	1e 00 78    	mov.w     [w14], w0
    28cc:	26 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    28ce:	00 00 e0    	cp0.w     w0
    28d0:	02 00 3a    	bra       NZ, 0x28d6 <.L218>
            RD1_ = ON;
    28d2:	dc 22 a8    	bset.b    0x2dc, #0x1
    28d4:	2e 00 37    	bra       0x2932 <.L216>

000028d6 <.L218>:
        } else if (str_cmp(token, "OFF") == 0) {
    28d6:	01 64 29    	mov.w     #0x9640, w1
    28d8:	1e 00 78    	mov.w     [w14], w0
    28da:	1f f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    28dc:	00 00 e0    	cp0.w     w0
    28de:	02 00 3a    	bra       NZ, 0x28e4 <.L219>
            RD1_ = OFF;
    28e0:	dc 22 a9    	bclr.b    0x2dc, #0x1
    28e2:	27 00 37    	bra       0x2932 <.L216>

000028e4 <.L219>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    28e4:	41 64 29    	mov.w     #0x9644, w1
    28e6:	1e 00 78    	mov.w     [w14], w0
    28e8:	18 f8 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    28ea:	00 00 e0    	cp0.w     w0
    28ec:	0f 00 3a    	bra       NZ, 0x290c <.L220>
            RD1_ = !RD1_;
    28ee:	e0 16 80    	mov.w     0x2dc, w0
    28f0:	62 00 60    	and.w     w0, #0x2, w0
    28f2:	00 f0 a7    	btsc.w    w0, #0xf
    28f4:	00 00 ea    	neg.w     w0, w0
    28f6:	00 00 e9    	dec.w     w0, w0
    28f8:	4f 00 de    	lsr.w     w0, #0xf, w0
    28fa:	00 40 78    	mov.b     w0, w0
    28fc:	00 80 fb    	ze        w0, w0
    28fe:	61 00 60    	and.w     w0, #0x1, w0
    2900:	00 00 40    	add.w     w0, w0, w0
    2902:	e1 16 80    	mov.w     0x2dc, w1
    2904:	01 10 a1    	bclr.w    w1, #0x1
    2906:	01 00 70    	ior.w     w0, w1, w0
    2908:	e0 16 88    	mov.w     w0, 0x2dc
    290a:	13 00 37    	bra       0x2932 <.L216>

0000290c <.L220>:
        } else if (str2hex(token, &val) == 0) {
    290c:	64 00 47    	add.w     w14, #0x4, w0
    290e:	80 00 78    	mov.w     w0, w1
    2910:	1e 00 78    	mov.w     [w14], w0
    2912:	09 f7 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2914:	00 00 e0    	cp0.w     w0
    2916:	0d 00 3a    	bra       NZ, 0x2932 <.L216>
            RD1_ = (val) ? 1 : 0;
    2918:	2e 00 90    	mov.w     [w14+4], w0
    291a:	00 f0 a7    	btsc.w    w0, #0xf
    291c:	00 00 ea    	neg.w     w0, w0
    291e:	00 00 ea    	neg.w     w0, w0
    2920:	4f 00 de    	lsr.w     w0, #0xf, w0
    2922:	00 40 78    	mov.b     w0, w0
    2924:	00 80 fb    	ze        w0, w0
    2926:	61 00 60    	and.w     w0, #0x1, w0
    2928:	00 00 40    	add.w     w0, w0, w0
    292a:	e1 16 80    	mov.w     0x2dc, w1
    292c:	01 10 a1    	bclr.w    w1, #0x1
    292e:	01 00 70    	ior.w     w0, w1, w0
    2930:	e0 16 88    	mov.w     w0, 0x2dc

00002932 <.L216>:
        }
    }
}
    2932:	00 80 fa    	ulnk      
    2934:	00 00 06    	return    

00002936 <_rd1Q_handler>:

void rd1Q_handler(char *args) {
    2936:	02 00 fa    	lnk       #0x2
    2938:	00 0f 78    	mov.w     w0, [w14]
    if (RD1_ == ON)
    293a:	e0 16 80    	mov.w     0x2dc, w0
    293c:	62 00 60    	and.w     w0, #0x2, w0
    293e:	00 00 e0    	cp0.w     w0
    2940:	04 00 32    	bra       Z, 0x294a <.L222>
        parser_puts("1\r\n");
    2942:	d1 41 80    	mov.w     0x83a, w1
    2944:	b0 64 29    	mov.w     #0x964b, w0
    2946:	01 00 01    	call      w1
    2948:	03 00 37    	bra       0x2950 <.L221>

0000294a <.L222>:
    else
        parser_puts("0\r\n");
    294a:	d1 41 80    	mov.w     0x83a, w1
    294c:	f0 64 29    	mov.w     #0x964f, w0
    294e:	01 00 01    	call      w1

00002950 <.L221>:
}
    2950:	00 80 fa    	ulnk      
    2952:	00 00 06    	return    

00002954 <_rd2_handler>:

void rd2_handler(char *args) {
    2954:	08 00 fa    	lnk       #0x8
    2956:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2958:	00 00 eb    	clr.w     w0
    295a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    295c:	0e 80 e8    	inc2.w    w14, w0
    295e:	00 01 78    	mov.w     w0, w2
    2960:	91 63 29    	mov.w     #0x9639, w1
    2962:	3e 00 90    	mov.w     [w14+6], w0
    2964:	35 f8 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2966:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2968:	1e 00 78    	mov.w     [w14], w0
    296a:	00 00 e0    	cp0.w     w0
    296c:	35 00 32    	bra       Z, 0x29d8 <.L224>
        if (str_cmp(token, "ON") == 0) {
    296e:	d1 63 29    	mov.w     #0x963d, w1
    2970:	1e 00 78    	mov.w     [w14], w0
    2972:	d3 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2974:	00 00 e0    	cp0.w     w0
    2976:	02 00 3a    	bra       NZ, 0x297c <.L226>
            RD2_ = ON;
    2978:	dc 42 a8    	bset.b    0x2dc, #0x2
    297a:	2e 00 37    	bra       0x29d8 <.L224>

0000297c <.L226>:
        } else if (str_cmp(token, "OFF") == 0) {
    297c:	01 64 29    	mov.w     #0x9640, w1
    297e:	1e 00 78    	mov.w     [w14], w0
    2980:	cc f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2982:	00 00 e0    	cp0.w     w0
    2984:	02 00 3a    	bra       NZ, 0x298a <.L227>
            RD2_ = OFF;
    2986:	dc 42 a9    	bclr.b    0x2dc, #0x2
    2988:	27 00 37    	bra       0x29d8 <.L224>

0000298a <.L227>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    298a:	41 64 29    	mov.w     #0x9644, w1
    298c:	1e 00 78    	mov.w     [w14], w0
    298e:	c5 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2990:	00 00 e0    	cp0.w     w0
    2992:	0f 00 3a    	bra       NZ, 0x29b2 <.L228>
            RD2_ = !RD2_;
    2994:	e0 16 80    	mov.w     0x2dc, w0
    2996:	64 00 60    	and.w     w0, #0x4, w0
    2998:	00 f0 a7    	btsc.w    w0, #0xf
    299a:	00 00 ea    	neg.w     w0, w0
    299c:	00 00 e9    	dec.w     w0, w0
    299e:	4f 00 de    	lsr.w     w0, #0xf, w0
    29a0:	00 40 78    	mov.b     w0, w0
    29a2:	00 80 fb    	ze        w0, w0
    29a4:	61 00 60    	and.w     w0, #0x1, w0
    29a6:	42 00 dd    	sl.w      w0, #0x2, w0
    29a8:	e1 16 80    	mov.w     0x2dc, w1
    29aa:	01 20 a1    	bclr.w    w1, #0x2
    29ac:	01 00 70    	ior.w     w0, w1, w0
    29ae:	e0 16 88    	mov.w     w0, 0x2dc
    29b0:	13 00 37    	bra       0x29d8 <.L224>

000029b2 <.L228>:
        } else if (str2hex(token, &val) == 0) {
    29b2:	64 00 47    	add.w     w14, #0x4, w0
    29b4:	80 00 78    	mov.w     w0, w1
    29b6:	1e 00 78    	mov.w     [w14], w0
    29b8:	b6 f6 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    29ba:	00 00 e0    	cp0.w     w0
    29bc:	0d 00 3a    	bra       NZ, 0x29d8 <.L224>
            RD2_ = (val) ? 1 : 0;
    29be:	2e 00 90    	mov.w     [w14+4], w0
    29c0:	00 f0 a7    	btsc.w    w0, #0xf
    29c2:	00 00 ea    	neg.w     w0, w0
    29c4:	00 00 ea    	neg.w     w0, w0
    29c6:	4f 00 de    	lsr.w     w0, #0xf, w0
    29c8:	00 40 78    	mov.b     w0, w0
    29ca:	00 80 fb    	ze        w0, w0
    29cc:	61 00 60    	and.w     w0, #0x1, w0
    29ce:	42 00 dd    	sl.w      w0, #0x2, w0
    29d0:	e1 16 80    	mov.w     0x2dc, w1
    29d2:	01 20 a1    	bclr.w    w1, #0x2
    29d4:	01 00 70    	ior.w     w0, w1, w0
    29d6:	e0 16 88    	mov.w     w0, 0x2dc

000029d8 <.L224>:
        }
    }
}
    29d8:	00 80 fa    	ulnk      
    29da:	00 00 06    	return    

000029dc <_rd2Q_handler>:

void rd2Q_handler(char *args) {
    29dc:	02 00 fa    	lnk       #0x2
    29de:	00 0f 78    	mov.w     w0, [w14]
    if (RD2_ == ON)
    29e0:	e0 16 80    	mov.w     0x2dc, w0
    29e2:	64 00 60    	and.w     w0, #0x4, w0
    29e4:	00 00 e0    	cp0.w     w0
    29e6:	04 00 32    	bra       Z, 0x29f0 <.L230>
        parser_puts("1\r\n");
    29e8:	d1 41 80    	mov.w     0x83a, w1
    29ea:	b0 64 29    	mov.w     #0x964b, w0
    29ec:	01 00 01    	call      w1
    29ee:	03 00 37    	bra       0x29f6 <.L229>

000029f0 <.L230>:
    else
        parser_puts("0\r\n");
    29f0:	d1 41 80    	mov.w     0x83a, w1
    29f2:	f0 64 29    	mov.w     #0x964f, w0
    29f4:	01 00 01    	call      w1

000029f6 <.L229>:
}
    29f6:	00 80 fa    	ulnk      
    29f8:	00 00 06    	return    

000029fa <_rd3_handler>:

void rd3_handler(char *args) {
    29fa:	08 00 fa    	lnk       #0x8
    29fc:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    29fe:	00 00 eb    	clr.w     w0
    2a00:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2a02:	0e 80 e8    	inc2.w    w14, w0
    2a04:	00 01 78    	mov.w     w0, w2
    2a06:	91 63 29    	mov.w     #0x9639, w1
    2a08:	3e 00 90    	mov.w     [w14+6], w0
    2a0a:	e2 f7 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2a0c:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2a0e:	1e 00 78    	mov.w     [w14], w0
    2a10:	00 00 e0    	cp0.w     w0
    2a12:	35 00 32    	bra       Z, 0x2a7e <.L232>
        if (str_cmp(token, "ON") == 0) {
    2a14:	d1 63 29    	mov.w     #0x963d, w1
    2a16:	1e 00 78    	mov.w     [w14], w0
    2a18:	80 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2a1a:	00 00 e0    	cp0.w     w0
    2a1c:	02 00 3a    	bra       NZ, 0x2a22 <.L234>
            RD3_ = ON;
    2a1e:	dc 62 a8    	bset.b    0x2dc, #0x3
    2a20:	2e 00 37    	bra       0x2a7e <.L232>

00002a22 <.L234>:
        } else if (str_cmp(token, "OFF") == 0) {
    2a22:	01 64 29    	mov.w     #0x9640, w1
    2a24:	1e 00 78    	mov.w     [w14], w0
    2a26:	79 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2a28:	00 00 e0    	cp0.w     w0
    2a2a:	02 00 3a    	bra       NZ, 0x2a30 <.L235>
            RD3_ = OFF;
    2a2c:	dc 62 a9    	bclr.b    0x2dc, #0x3
    2a2e:	27 00 37    	bra       0x2a7e <.L232>

00002a30 <.L235>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2a30:	41 64 29    	mov.w     #0x9644, w1
    2a32:	1e 00 78    	mov.w     [w14], w0
    2a34:	72 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2a36:	00 00 e0    	cp0.w     w0
    2a38:	0f 00 3a    	bra       NZ, 0x2a58 <.L236>
            RD3_ = !RD3_;
    2a3a:	e0 16 80    	mov.w     0x2dc, w0
    2a3c:	68 00 60    	and.w     w0, #0x8, w0
    2a3e:	00 f0 a7    	btsc.w    w0, #0xf
    2a40:	00 00 ea    	neg.w     w0, w0
    2a42:	00 00 e9    	dec.w     w0, w0
    2a44:	4f 00 de    	lsr.w     w0, #0xf, w0
    2a46:	00 40 78    	mov.b     w0, w0
    2a48:	00 80 fb    	ze        w0, w0
    2a4a:	61 00 60    	and.w     w0, #0x1, w0
    2a4c:	43 00 dd    	sl.w      w0, #0x3, w0
    2a4e:	e1 16 80    	mov.w     0x2dc, w1
    2a50:	01 30 a1    	bclr.w    w1, #0x3
    2a52:	01 00 70    	ior.w     w0, w1, w0
    2a54:	e0 16 88    	mov.w     w0, 0x2dc
    2a56:	13 00 37    	bra       0x2a7e <.L232>

00002a58 <.L236>:
        } else if (str2hex(token, &val) == 0) {
    2a58:	64 00 47    	add.w     w14, #0x4, w0
    2a5a:	80 00 78    	mov.w     w0, w1
    2a5c:	1e 00 78    	mov.w     [w14], w0
    2a5e:	63 f6 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2a60:	00 00 e0    	cp0.w     w0
    2a62:	0d 00 3a    	bra       NZ, 0x2a7e <.L232>
            RD3_ = (val) ? 1 : 0;
    2a64:	2e 00 90    	mov.w     [w14+4], w0
    2a66:	00 f0 a7    	btsc.w    w0, #0xf
    2a68:	00 00 ea    	neg.w     w0, w0
    2a6a:	00 00 ea    	neg.w     w0, w0
    2a6c:	4f 00 de    	lsr.w     w0, #0xf, w0
    2a6e:	00 40 78    	mov.b     w0, w0
    2a70:	00 80 fb    	ze        w0, w0
    2a72:	61 00 60    	and.w     w0, #0x1, w0
    2a74:	43 00 dd    	sl.w      w0, #0x3, w0
    2a76:	e1 16 80    	mov.w     0x2dc, w1
    2a78:	01 30 a1    	bclr.w    w1, #0x3
    2a7a:	01 00 70    	ior.w     w0, w1, w0
    2a7c:	e0 16 88    	mov.w     w0, 0x2dc

00002a7e <.L232>:
        }
    }
}
    2a7e:	00 80 fa    	ulnk      
    2a80:	00 00 06    	return    

00002a82 <_rd3Q_handler>:

void rd3Q_handler(char *args) {
    2a82:	02 00 fa    	lnk       #0x2
    2a84:	00 0f 78    	mov.w     w0, [w14]
    if (RD3_ == ON)
    2a86:	e0 16 80    	mov.w     0x2dc, w0
    2a88:	68 00 60    	and.w     w0, #0x8, w0
    2a8a:	00 00 e0    	cp0.w     w0
    2a8c:	04 00 32    	bra       Z, 0x2a96 <.L238>
        parser_puts("1\r\n");
    2a8e:	d1 41 80    	mov.w     0x83a, w1
    2a90:	b0 64 29    	mov.w     #0x964b, w0
    2a92:	01 00 01    	call      w1
    2a94:	03 00 37    	bra       0x2a9c <.L237>

00002a96 <.L238>:
    else
        parser_puts("0\r\n");
    2a96:	d1 41 80    	mov.w     0x83a, w1
    2a98:	f0 64 29    	mov.w     #0x964f, w0
    2a9a:	01 00 01    	call      w1

00002a9c <.L237>:
}
    2a9c:	00 80 fa    	ulnk      
    2a9e:	00 00 06    	return    

00002aa0 <_rd4_handler>:

void rd4_handler(char *args) {
    2aa0:	08 00 fa    	lnk       #0x8
    2aa2:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2aa4:	00 00 eb    	clr.w     w0
    2aa6:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2aa8:	0e 80 e8    	inc2.w    w14, w0
    2aaa:	00 01 78    	mov.w     w0, w2
    2aac:	91 63 29    	mov.w     #0x9639, w1
    2aae:	3e 00 90    	mov.w     [w14+6], w0
    2ab0:	8f f7 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2ab2:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2ab4:	1e 00 78    	mov.w     [w14], w0
    2ab6:	00 00 e0    	cp0.w     w0
    2ab8:	35 00 32    	bra       Z, 0x2b24 <.L240>
        if (str_cmp(token, "ON") == 0) {
    2aba:	d1 63 29    	mov.w     #0x963d, w1
    2abc:	1e 00 78    	mov.w     [w14], w0
    2abe:	2d f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2ac0:	00 00 e0    	cp0.w     w0
    2ac2:	02 00 3a    	bra       NZ, 0x2ac8 <.L242>
            RD4_ = ON;
    2ac4:	dc 82 a8    	bset.b    0x2dc, #0x4
    2ac6:	2e 00 37    	bra       0x2b24 <.L240>

00002ac8 <.L242>:
        } else if (str_cmp(token, "OFF") == 0) {
    2ac8:	01 64 29    	mov.w     #0x9640, w1
    2aca:	1e 00 78    	mov.w     [w14], w0
    2acc:	26 f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2ace:	00 00 e0    	cp0.w     w0
    2ad0:	02 00 3a    	bra       NZ, 0x2ad6 <.L243>
            RD4_ = OFF;
    2ad2:	dc 82 a9    	bclr.b    0x2dc, #0x4
    2ad4:	27 00 37    	bra       0x2b24 <.L240>

00002ad6 <.L243>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2ad6:	41 64 29    	mov.w     #0x9644, w1
    2ad8:	1e 00 78    	mov.w     [w14], w0
    2ada:	1f f7 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2adc:	00 00 e0    	cp0.w     w0
    2ade:	0f 00 3a    	bra       NZ, 0x2afe <.L244>
            RD4_ = !RD4_;
    2ae0:	e0 16 80    	mov.w     0x2dc, w0
    2ae2:	70 00 60    	and.w     w0, #0x10, w0
    2ae4:	00 f0 a7    	btsc.w    w0, #0xf
    2ae6:	00 00 ea    	neg.w     w0, w0
    2ae8:	00 00 e9    	dec.w     w0, w0
    2aea:	4f 00 de    	lsr.w     w0, #0xf, w0
    2aec:	00 40 78    	mov.b     w0, w0
    2aee:	00 80 fb    	ze        w0, w0
    2af0:	61 00 60    	and.w     w0, #0x1, w0
    2af2:	44 00 dd    	sl.w      w0, #0x4, w0
    2af4:	e1 16 80    	mov.w     0x2dc, w1
    2af6:	01 40 a1    	bclr.w    w1, #0x4
    2af8:	01 00 70    	ior.w     w0, w1, w0
    2afa:	e0 16 88    	mov.w     w0, 0x2dc
    2afc:	13 00 37    	bra       0x2b24 <.L240>

00002afe <.L244>:
        } else if (str2hex(token, &val) == 0) {
    2afe:	64 00 47    	add.w     w14, #0x4, w0
    2b00:	80 00 78    	mov.w     w0, w1
    2b02:	1e 00 78    	mov.w     [w14], w0
    2b04:	10 f6 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2b06:	00 00 e0    	cp0.w     w0
    2b08:	0d 00 3a    	bra       NZ, 0x2b24 <.L240>
            RD4_ = (val) ? 1 : 0;
    2b0a:	2e 00 90    	mov.w     [w14+4], w0
    2b0c:	00 f0 a7    	btsc.w    w0, #0xf
    2b0e:	00 00 ea    	neg.w     w0, w0
    2b10:	00 00 ea    	neg.w     w0, w0
    2b12:	4f 00 de    	lsr.w     w0, #0xf, w0
    2b14:	00 40 78    	mov.b     w0, w0
    2b16:	00 80 fb    	ze        w0, w0
    2b18:	61 00 60    	and.w     w0, #0x1, w0
    2b1a:	44 00 dd    	sl.w      w0, #0x4, w0
    2b1c:	e1 16 80    	mov.w     0x2dc, w1
    2b1e:	01 40 a1    	bclr.w    w1, #0x4
    2b20:	01 00 70    	ior.w     w0, w1, w0
    2b22:	e0 16 88    	mov.w     w0, 0x2dc

00002b24 <.L240>:
        }
    }
}
    2b24:	00 80 fa    	ulnk      
    2b26:	00 00 06    	return    

00002b28 <_rd4Q_handler>:

void rd4Q_handler(char *args) {
    2b28:	02 00 fa    	lnk       #0x2
    2b2a:	00 0f 78    	mov.w     w0, [w14]
    if (RD4_ == ON)
    2b2c:	e0 16 80    	mov.w     0x2dc, w0
    2b2e:	70 00 60    	and.w     w0, #0x10, w0
    2b30:	00 00 e0    	cp0.w     w0
    2b32:	04 00 32    	bra       Z, 0x2b3c <.L246>
        parser_puts("1\r\n");
    2b34:	d1 41 80    	mov.w     0x83a, w1
    2b36:	b0 64 29    	mov.w     #0x964b, w0
    2b38:	01 00 01    	call      w1
    2b3a:	03 00 37    	bra       0x2b42 <.L245>

00002b3c <.L246>:
    else
        parser_puts("0\r\n");
    2b3c:	d1 41 80    	mov.w     0x83a, w1
    2b3e:	f0 64 29    	mov.w     #0x964f, w0
    2b40:	01 00 01    	call      w1

00002b42 <.L245>:
}
    2b42:	00 80 fa    	ulnk      
    2b44:	00 00 06    	return    

00002b46 <_rd5_handler>:

void rd5_handler(char *args) {
    2b46:	08 00 fa    	lnk       #0x8
    2b48:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2b4a:	00 00 eb    	clr.w     w0
    2b4c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2b4e:	0e 80 e8    	inc2.w    w14, w0
    2b50:	00 01 78    	mov.w     w0, w2
    2b52:	91 63 29    	mov.w     #0x9639, w1
    2b54:	3e 00 90    	mov.w     [w14+6], w0
    2b56:	3c f7 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2b58:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2b5a:	1e 00 78    	mov.w     [w14], w0
    2b5c:	00 00 e0    	cp0.w     w0
    2b5e:	36 00 32    	bra       Z, 0x2bcc <.L248>
        if (str_cmp(token, "ON") == 0) {
    2b60:	d1 63 29    	mov.w     #0x963d, w1
    2b62:	1e 00 78    	mov.w     [w14], w0
    2b64:	da f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2b66:	00 00 e0    	cp0.w     w0
    2b68:	02 00 3a    	bra       NZ, 0x2b6e <.L250>
            RD5_ = ON;
    2b6a:	dc a2 a8    	bset.b    0x2dc, #0x5
    2b6c:	2f 00 37    	bra       0x2bcc <.L248>

00002b6e <.L250>:
        } else if (str_cmp(token, "OFF") == 0) {
    2b6e:	01 64 29    	mov.w     #0x9640, w1
    2b70:	1e 00 78    	mov.w     [w14], w0
    2b72:	d3 f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2b74:	00 00 e0    	cp0.w     w0
    2b76:	02 00 3a    	bra       NZ, 0x2b7c <.L251>
            RD5_ = OFF;
    2b78:	dc a2 a9    	bclr.b    0x2dc, #0x5
    2b7a:	28 00 37    	bra       0x2bcc <.L248>

00002b7c <.L251>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2b7c:	41 64 29    	mov.w     #0x9644, w1
    2b7e:	1e 00 78    	mov.w     [w14], w0
    2b80:	cc f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2b82:	00 00 e0    	cp0.w     w0
    2b84:	10 00 3a    	bra       NZ, 0x2ba6 <.L252>
            RD5_ = !RD5_;
    2b86:	e1 16 80    	mov.w     0x2dc, w1
    2b88:	00 02 20    	mov.w     #0x20, w0
    2b8a:	00 80 60    	and.w     w1, w0, w0
    2b8c:	00 f0 a7    	btsc.w    w0, #0xf
    2b8e:	00 00 ea    	neg.w     w0, w0
    2b90:	00 00 e9    	dec.w     w0, w0
    2b92:	4f 00 de    	lsr.w     w0, #0xf, w0
    2b94:	00 40 78    	mov.b     w0, w0
    2b96:	00 80 fb    	ze        w0, w0
    2b98:	61 00 60    	and.w     w0, #0x1, w0
    2b9a:	45 00 dd    	sl.w      w0, #0x5, w0
    2b9c:	e1 16 80    	mov.w     0x2dc, w1
    2b9e:	01 50 a1    	bclr.w    w1, #0x5
    2ba0:	01 00 70    	ior.w     w0, w1, w0
    2ba2:	e0 16 88    	mov.w     w0, 0x2dc
    2ba4:	13 00 37    	bra       0x2bcc <.L248>

00002ba6 <.L252>:
        } else if (str2hex(token, &val) == 0) {
    2ba6:	64 00 47    	add.w     w14, #0x4, w0
    2ba8:	80 00 78    	mov.w     w0, w1
    2baa:	1e 00 78    	mov.w     [w14], w0
    2bac:	bc f5 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2bae:	00 00 e0    	cp0.w     w0
    2bb0:	0d 00 3a    	bra       NZ, 0x2bcc <.L248>
            RD5_ = (val) ? 1 : 0;
    2bb2:	2e 00 90    	mov.w     [w14+4], w0
    2bb4:	00 f0 a7    	btsc.w    w0, #0xf
    2bb6:	00 00 ea    	neg.w     w0, w0
    2bb8:	00 00 ea    	neg.w     w0, w0
    2bba:	4f 00 de    	lsr.w     w0, #0xf, w0
    2bbc:	00 40 78    	mov.b     w0, w0
    2bbe:	00 80 fb    	ze        w0, w0
    2bc0:	61 00 60    	and.w     w0, #0x1, w0
    2bc2:	45 00 dd    	sl.w      w0, #0x5, w0
    2bc4:	e1 16 80    	mov.w     0x2dc, w1
    2bc6:	01 50 a1    	bclr.w    w1, #0x5
    2bc8:	01 00 70    	ior.w     w0, w1, w0
    2bca:	e0 16 88    	mov.w     w0, 0x2dc

00002bcc <.L248>:
        }
    }
}
    2bcc:	00 80 fa    	ulnk      
    2bce:	00 00 06    	return    

00002bd0 <_rd5Q_handler>:

void rd5Q_handler(char *args) {
    2bd0:	02 00 fa    	lnk       #0x2
    2bd2:	00 0f 78    	mov.w     w0, [w14]
    if (RD5_ == ON)
    2bd4:	e1 16 80    	mov.w     0x2dc, w1
    2bd6:	00 02 20    	mov.w     #0x20, w0
    2bd8:	00 80 60    	and.w     w1, w0, w0
    2bda:	00 00 e0    	cp0.w     w0
    2bdc:	04 00 32    	bra       Z, 0x2be6 <.L254>
        parser_puts("1\r\n");
    2bde:	d1 41 80    	mov.w     0x83a, w1
    2be0:	b0 64 29    	mov.w     #0x964b, w0
    2be2:	01 00 01    	call      w1
    2be4:	03 00 37    	bra       0x2bec <.L253>

00002be6 <.L254>:
    else
        parser_puts("0\r\n");
    2be6:	d1 41 80    	mov.w     0x83a, w1
    2be8:	f0 64 29    	mov.w     #0x964f, w0
    2bea:	01 00 01    	call      w1

00002bec <.L253>:
}
    2bec:	00 80 fa    	ulnk      
    2bee:	00 00 06    	return    

00002bf0 <_rd6_handler>:

void rd6_handler(char *args) {
    2bf0:	08 00 fa    	lnk       #0x8
    2bf2:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2bf4:	00 00 eb    	clr.w     w0
    2bf6:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2bf8:	0e 80 e8    	inc2.w    w14, w0
    2bfa:	00 01 78    	mov.w     w0, w2
    2bfc:	91 63 29    	mov.w     #0x9639, w1
    2bfe:	3e 00 90    	mov.w     [w14+6], w0
    2c00:	e7 f6 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2c02:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2c04:	1e 00 78    	mov.w     [w14], w0
    2c06:	00 00 e0    	cp0.w     w0
    2c08:	36 00 32    	bra       Z, 0x2c76 <.L256>
        if (str_cmp(token, "ON") == 0) {
    2c0a:	d1 63 29    	mov.w     #0x963d, w1
    2c0c:	1e 00 78    	mov.w     [w14], w0
    2c0e:	85 f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2c10:	00 00 e0    	cp0.w     w0
    2c12:	02 00 3a    	bra       NZ, 0x2c18 <.L258>
            RD6_ = ON;
    2c14:	dc c2 a8    	bset.b    0x2dc, #0x6
    2c16:	2f 00 37    	bra       0x2c76 <.L256>

00002c18 <.L258>:
        } else if (str_cmp(token, "OFF") == 0) {
    2c18:	01 64 29    	mov.w     #0x9640, w1
    2c1a:	1e 00 78    	mov.w     [w14], w0
    2c1c:	7e f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2c1e:	00 00 e0    	cp0.w     w0
    2c20:	02 00 3a    	bra       NZ, 0x2c26 <.L259>
            RD6_ = OFF;
    2c22:	dc c2 a9    	bclr.b    0x2dc, #0x6
    2c24:	28 00 37    	bra       0x2c76 <.L256>

00002c26 <.L259>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2c26:	41 64 29    	mov.w     #0x9644, w1
    2c28:	1e 00 78    	mov.w     [w14], w0
    2c2a:	77 f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2c2c:	00 00 e0    	cp0.w     w0
    2c2e:	10 00 3a    	bra       NZ, 0x2c50 <.L260>
            RD6_ = !RD6_;
    2c30:	e1 16 80    	mov.w     0x2dc, w1
    2c32:	00 04 20    	mov.w     #0x40, w0
    2c34:	00 80 60    	and.w     w1, w0, w0
    2c36:	00 f0 a7    	btsc.w    w0, #0xf
    2c38:	00 00 ea    	neg.w     w0, w0
    2c3a:	00 00 e9    	dec.w     w0, w0
    2c3c:	4f 00 de    	lsr.w     w0, #0xf, w0
    2c3e:	00 40 78    	mov.b     w0, w0
    2c40:	00 80 fb    	ze        w0, w0
    2c42:	61 00 60    	and.w     w0, #0x1, w0
    2c44:	46 00 dd    	sl.w      w0, #0x6, w0
    2c46:	e1 16 80    	mov.w     0x2dc, w1
    2c48:	01 60 a1    	bclr.w    w1, #0x6
    2c4a:	01 00 70    	ior.w     w0, w1, w0
    2c4c:	e0 16 88    	mov.w     w0, 0x2dc
    2c4e:	13 00 37    	bra       0x2c76 <.L256>

00002c50 <.L260>:
        } else if (str2hex(token, &val) == 0) {
    2c50:	64 00 47    	add.w     w14, #0x4, w0
    2c52:	80 00 78    	mov.w     w0, w1
    2c54:	1e 00 78    	mov.w     [w14], w0
    2c56:	67 f5 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2c58:	00 00 e0    	cp0.w     w0
    2c5a:	0d 00 3a    	bra       NZ, 0x2c76 <.L256>
            RD6_ = (val) ? 1 : 0;
    2c5c:	2e 00 90    	mov.w     [w14+4], w0
    2c5e:	00 f0 a7    	btsc.w    w0, #0xf
    2c60:	00 00 ea    	neg.w     w0, w0
    2c62:	00 00 ea    	neg.w     w0, w0
    2c64:	4f 00 de    	lsr.w     w0, #0xf, w0
    2c66:	00 40 78    	mov.b     w0, w0
    2c68:	00 80 fb    	ze        w0, w0
    2c6a:	61 00 60    	and.w     w0, #0x1, w0
    2c6c:	46 00 dd    	sl.w      w0, #0x6, w0
    2c6e:	e1 16 80    	mov.w     0x2dc, w1
    2c70:	01 60 a1    	bclr.w    w1, #0x6
    2c72:	01 00 70    	ior.w     w0, w1, w0
    2c74:	e0 16 88    	mov.w     w0, 0x2dc

00002c76 <.L256>:
        }
    }
}
    2c76:	00 80 fa    	ulnk      
    2c78:	00 00 06    	return    

00002c7a <_rd6Q_handler>:

void rd6Q_handler(char *args) {
    2c7a:	02 00 fa    	lnk       #0x2
    2c7c:	00 0f 78    	mov.w     w0, [w14]
    if (RD6_ == ON)
    2c7e:	e1 16 80    	mov.w     0x2dc, w1
    2c80:	00 04 20    	mov.w     #0x40, w0
    2c82:	00 80 60    	and.w     w1, w0, w0
    2c84:	00 00 e0    	cp0.w     w0
    2c86:	04 00 32    	bra       Z, 0x2c90 <.L262>
        parser_puts("1\r\n");
    2c88:	d1 41 80    	mov.w     0x83a, w1
    2c8a:	b0 64 29    	mov.w     #0x964b, w0
    2c8c:	01 00 01    	call      w1
    2c8e:	03 00 37    	bra       0x2c96 <.L261>

00002c90 <.L262>:
    else
        parser_puts("0\r\n");
    2c90:	d1 41 80    	mov.w     0x83a, w1
    2c92:	f0 64 29    	mov.w     #0x964f, w0
    2c94:	01 00 01    	call      w1

00002c96 <.L261>:
}
    2c96:	00 80 fa    	ulnk      
    2c98:	00 00 06    	return    

00002c9a <_porte_handler>:

void porte_handler(char *args) {
    2c9a:	08 00 fa    	lnk       #0x8
    2c9c:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2c9e:	00 00 eb    	clr.w     w0
    2ca0:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ", ", &remainder);
    2ca2:	0e 80 e8    	inc2.w    w14, w0
    2ca4:	00 01 78    	mov.w     w0, w2
    2ca6:	61 65 29    	mov.w     #0x9656, w1
    2ca8:	3e 00 90    	mov.w     [w14+6], w0
    2caa:	92 f6 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2cac:	00 0f 78    	mov.w     w0, [w14]
    if (token && (str2hex(token, &val) == 0)) {
    2cae:	1e 00 78    	mov.w     [w14], w0
    2cb0:	00 00 e0    	cp0.w     w0
    2cb2:	0e 00 32    	bra       Z, 0x2cd0 <.L264>
    2cb4:	64 00 47    	add.w     w14, #0x4, w0
    2cb6:	80 00 78    	mov.w     w0, w1
    2cb8:	1e 00 78    	mov.w     [w14], w0
    2cba:	35 f5 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2cbc:	00 00 e0    	cp0.w     w0
    2cbe:	08 00 3a    	bra       NZ, 0x2cd0 <.L264>
        LATE = (LATE & 0xFF80) | (val & 0x7F);
    2cc0:	21 17 80    	mov.w     0x2e4, w1
    2cc2:	00 f8 2f    	mov.w     #0xff80, w0
    2cc4:	80 80 60    	and.w     w1, w0, w1
    2cc6:	2e 01 90    	mov.w     [w14+4], w2
    2cc8:	f0 07 20    	mov.w     #0x7f, w0
    2cca:	00 00 61    	and.w     w2, w0, w0
    2ccc:	01 00 70    	ior.w     w0, w1, w0
    2cce:	20 17 88    	mov.w     w0, 0x2e4

00002cd0 <.L264>:
    }
}
    2cd0:	00 80 fa    	ulnk      
    2cd2:	00 00 06    	return    

00002cd4 <_porteQ_handler>:

void porteQ_handler(char *args) {
    2cd4:	08 00 fa    	lnk       #0x8
    2cd6:	30 07 98    	mov.w     w0, [w14+6]
    char str[5];

    hex2str_alt(LATE & 0x7F, str);
    2cd8:	21 17 80    	mov.w     0x2e4, w1
    2cda:	f0 07 20    	mov.w     #0x7f, w0
    2cdc:	00 80 60    	and.w     w1, w0, w0
    2cde:	8e 00 78    	mov.w     w14, w1
    2ce0:	e7 f5 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
    parser_puts(str);
    2ce2:	d1 41 80    	mov.w     0x83a, w1
    2ce4:	0e 00 78    	mov.w     w14, w0
    2ce6:	01 00 01    	call      w1
    parser_puts("\r\n");
    2ce8:	d1 41 80    	mov.w     0x83a, w1
    2cea:	30 65 29    	mov.w     #0x9653, w0
    2cec:	01 00 01    	call      w1
}
    2cee:	00 80 fa    	ulnk      
    2cf0:	00 00 06    	return    

00002cf2 <_re0_handler>:

void re0_handler(char *args) {
    2cf2:	08 00 fa    	lnk       #0x8
    2cf4:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2cf6:	00 00 eb    	clr.w     w0
    2cf8:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2cfa:	0e 80 e8    	inc2.w    w14, w0
    2cfc:	00 01 78    	mov.w     w0, w2
    2cfe:	91 63 29    	mov.w     #0x9639, w1
    2d00:	3e 00 90    	mov.w     [w14+6], w0
    2d02:	66 f6 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2d04:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2d06:	1e 00 78    	mov.w     [w14], w0
    2d08:	00 00 e0    	cp0.w     w0
    2d0a:	33 00 32    	bra       Z, 0x2d72 <.L267>
        if (str_cmp(token, "ON") == 0) {
    2d0c:	d1 63 29    	mov.w     #0x963d, w1
    2d0e:	1e 00 78    	mov.w     [w14], w0
    2d10:	04 f6 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2d12:	00 00 e0    	cp0.w     w0
    2d14:	02 00 3a    	bra       NZ, 0x2d1a <.L269>
            RE0_ = ON;
    2d16:	e4 02 a8    	bset.b    0x2e4, #0x0
    2d18:	2c 00 37    	bra       0x2d72 <.L267>

00002d1a <.L269>:
        } else if (str_cmp(token, "OFF") == 0) {
    2d1a:	01 64 29    	mov.w     #0x9640, w1
    2d1c:	1e 00 78    	mov.w     [w14], w0
    2d1e:	fd f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2d20:	00 00 e0    	cp0.w     w0
    2d22:	02 00 3a    	bra       NZ, 0x2d28 <.L270>
            RE0_ = OFF;
    2d24:	e4 02 a9    	bclr.b    0x2e4, #0x0
    2d26:	25 00 37    	bra       0x2d72 <.L267>

00002d28 <.L270>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2d28:	41 64 29    	mov.w     #0x9644, w1
    2d2a:	1e 00 78    	mov.w     [w14], w0
    2d2c:	f6 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2d2e:	00 00 e0    	cp0.w     w0
    2d30:	0e 00 3a    	bra       NZ, 0x2d4e <.L271>
            RE0_ = !RE0_;
    2d32:	20 17 80    	mov.w     0x2e4, w0
    2d34:	61 00 60    	and.w     w0, #0x1, w0
    2d36:	00 f0 a7    	btsc.w    w0, #0xf
    2d38:	00 00 ea    	neg.w     w0, w0
    2d3a:	00 00 e9    	dec.w     w0, w0
    2d3c:	4f 00 de    	lsr.w     w0, #0xf, w0
    2d3e:	00 40 78    	mov.b     w0, w0
    2d40:	00 80 fb    	ze        w0, w0
    2d42:	61 00 60    	and.w     w0, #0x1, w0
    2d44:	21 17 80    	mov.w     0x2e4, w1
    2d46:	01 00 a1    	bclr.w    w1, #0x0
    2d48:	01 00 70    	ior.w     w0, w1, w0
    2d4a:	20 17 88    	mov.w     w0, 0x2e4
    2d4c:	12 00 37    	bra       0x2d72 <.L267>

00002d4e <.L271>:
        } else if (str2hex(token, &val) == 0) {
    2d4e:	64 00 47    	add.w     w14, #0x4, w0
    2d50:	80 00 78    	mov.w     w0, w1
    2d52:	1e 00 78    	mov.w     [w14], w0
    2d54:	e8 f4 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2d56:	00 00 e0    	cp0.w     w0
    2d58:	0c 00 3a    	bra       NZ, 0x2d72 <.L267>
            RE0_ = (val) ? 1 : 0;
    2d5a:	2e 00 90    	mov.w     [w14+4], w0
    2d5c:	00 f0 a7    	btsc.w    w0, #0xf
    2d5e:	00 00 ea    	neg.w     w0, w0
    2d60:	00 00 ea    	neg.w     w0, w0
    2d62:	4f 00 de    	lsr.w     w0, #0xf, w0
    2d64:	00 40 78    	mov.b     w0, w0
    2d66:	00 80 fb    	ze        w0, w0
    2d68:	61 00 60    	and.w     w0, #0x1, w0
    2d6a:	21 17 80    	mov.w     0x2e4, w1
    2d6c:	01 00 a1    	bclr.w    w1, #0x0
    2d6e:	01 00 70    	ior.w     w0, w1, w0
    2d70:	20 17 88    	mov.w     w0, 0x2e4

00002d72 <.L267>:
        }
    }
}
    2d72:	00 80 fa    	ulnk      
    2d74:	00 00 06    	return    

00002d76 <_re0Q_handler>:

void re0Q_handler(char *args) {
    2d76:	02 00 fa    	lnk       #0x2
    2d78:	00 0f 78    	mov.w     w0, [w14]
    if (RE0_ == ON)
    2d7a:	20 17 80    	mov.w     0x2e4, w0
    2d7c:	61 00 60    	and.w     w0, #0x1, w0
    2d7e:	00 00 e0    	cp0.w     w0
    2d80:	04 00 32    	bra       Z, 0x2d8a <.L273>
        parser_puts("1\r\n");
    2d82:	d1 41 80    	mov.w     0x83a, w1
    2d84:	b0 64 29    	mov.w     #0x964b, w0
    2d86:	01 00 01    	call      w1
    2d88:	03 00 37    	bra       0x2d90 <.L272>

00002d8a <.L273>:
    else
        parser_puts("0\r\n");
    2d8a:	d1 41 80    	mov.w     0x83a, w1
    2d8c:	f0 64 29    	mov.w     #0x964f, w0
    2d8e:	01 00 01    	call      w1

00002d90 <.L272>:
}
    2d90:	00 80 fa    	ulnk      
    2d92:	00 00 06    	return    

00002d94 <_re1_handler>:

void re1_handler(char *args) {
    2d94:	08 00 fa    	lnk       #0x8
    2d96:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2d98:	00 00 eb    	clr.w     w0
    2d9a:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2d9c:	0e 80 e8    	inc2.w    w14, w0
    2d9e:	00 01 78    	mov.w     w0, w2
    2da0:	91 63 29    	mov.w     #0x9639, w1
    2da2:	3e 00 90    	mov.w     [w14+6], w0
    2da4:	15 f6 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2da6:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2da8:	1e 00 78    	mov.w     [w14], w0
    2daa:	00 00 e0    	cp0.w     w0
    2dac:	35 00 32    	bra       Z, 0x2e18 <.L275>
        if (str_cmp(token, "ON") == 0) {
    2dae:	d1 63 29    	mov.w     #0x963d, w1
    2db0:	1e 00 78    	mov.w     [w14], w0
    2db2:	b3 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2db4:	00 00 e0    	cp0.w     w0
    2db6:	02 00 3a    	bra       NZ, 0x2dbc <.L277>
            RE1_ = ON;
    2db8:	e4 22 a8    	bset.b    0x2e4, #0x1
    2dba:	2e 00 37    	bra       0x2e18 <.L275>

00002dbc <.L277>:
        } else if (str_cmp(token, "OFF") == 0) {
    2dbc:	01 64 29    	mov.w     #0x9640, w1
    2dbe:	1e 00 78    	mov.w     [w14], w0
    2dc0:	ac f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2dc2:	00 00 e0    	cp0.w     w0
    2dc4:	02 00 3a    	bra       NZ, 0x2dca <.L278>
            RE1_ = OFF;
    2dc6:	e4 22 a9    	bclr.b    0x2e4, #0x1
    2dc8:	27 00 37    	bra       0x2e18 <.L275>

00002dca <.L278>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2dca:	41 64 29    	mov.w     #0x9644, w1
    2dcc:	1e 00 78    	mov.w     [w14], w0
    2dce:	a5 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2dd0:	00 00 e0    	cp0.w     w0
    2dd2:	0f 00 3a    	bra       NZ, 0x2df2 <.L279>
            RE1_ = !RE1_;
    2dd4:	20 17 80    	mov.w     0x2e4, w0
    2dd6:	62 00 60    	and.w     w0, #0x2, w0
    2dd8:	00 f0 a7    	btsc.w    w0, #0xf
    2dda:	00 00 ea    	neg.w     w0, w0
    2ddc:	00 00 e9    	dec.w     w0, w0
    2dde:	4f 00 de    	lsr.w     w0, #0xf, w0
    2de0:	00 40 78    	mov.b     w0, w0
    2de2:	00 80 fb    	ze        w0, w0
    2de4:	61 00 60    	and.w     w0, #0x1, w0
    2de6:	00 00 40    	add.w     w0, w0, w0
    2de8:	21 17 80    	mov.w     0x2e4, w1
    2dea:	01 10 a1    	bclr.w    w1, #0x1
    2dec:	01 00 70    	ior.w     w0, w1, w0
    2dee:	20 17 88    	mov.w     w0, 0x2e4
    2df0:	13 00 37    	bra       0x2e18 <.L275>

00002df2 <.L279>:
        } else if (str2hex(token, &val) == 0) {
    2df2:	64 00 47    	add.w     w14, #0x4, w0
    2df4:	80 00 78    	mov.w     w0, w1
    2df6:	1e 00 78    	mov.w     [w14], w0
    2df8:	96 f4 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2dfa:	00 00 e0    	cp0.w     w0
    2dfc:	0d 00 3a    	bra       NZ, 0x2e18 <.L275>
            RE1_ = (val) ? 1 : 0;
    2dfe:	2e 00 90    	mov.w     [w14+4], w0
    2e00:	00 f0 a7    	btsc.w    w0, #0xf
    2e02:	00 00 ea    	neg.w     w0, w0
    2e04:	00 00 ea    	neg.w     w0, w0
    2e06:	4f 00 de    	lsr.w     w0, #0xf, w0
    2e08:	00 40 78    	mov.b     w0, w0
    2e0a:	00 80 fb    	ze        w0, w0
    2e0c:	61 00 60    	and.w     w0, #0x1, w0
    2e0e:	00 00 40    	add.w     w0, w0, w0
    2e10:	21 17 80    	mov.w     0x2e4, w1
    2e12:	01 10 a1    	bclr.w    w1, #0x1
    2e14:	01 00 70    	ior.w     w0, w1, w0
    2e16:	20 17 88    	mov.w     w0, 0x2e4

00002e18 <.L275>:
        }
    }
}
    2e18:	00 80 fa    	ulnk      
    2e1a:	00 00 06    	return    

00002e1c <_re1Q_handler>:

void re1Q_handler(char *args) {
    2e1c:	02 00 fa    	lnk       #0x2
    2e1e:	00 0f 78    	mov.w     w0, [w14]
    if (RE1_ == ON)
    2e20:	20 17 80    	mov.w     0x2e4, w0
    2e22:	62 00 60    	and.w     w0, #0x2, w0
    2e24:	00 00 e0    	cp0.w     w0
    2e26:	04 00 32    	bra       Z, 0x2e30 <.L281>
        parser_puts("1\r\n");
    2e28:	d1 41 80    	mov.w     0x83a, w1
    2e2a:	b0 64 29    	mov.w     #0x964b, w0
    2e2c:	01 00 01    	call      w1
    2e2e:	03 00 37    	bra       0x2e36 <.L280>

00002e30 <.L281>:
    else
        parser_puts("0\r\n");
    2e30:	d1 41 80    	mov.w     0x83a, w1
    2e32:	f0 64 29    	mov.w     #0x964f, w0
    2e34:	01 00 01    	call      w1

00002e36 <.L280>:
}
    2e36:	00 80 fa    	ulnk      
    2e38:	00 00 06    	return    

00002e3a <_re2_handler>:

void re2_handler(char *args) {
    2e3a:	08 00 fa    	lnk       #0x8
    2e3c:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2e3e:	00 00 eb    	clr.w     w0
    2e40:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2e42:	0e 80 e8    	inc2.w    w14, w0
    2e44:	00 01 78    	mov.w     w0, w2
    2e46:	91 63 29    	mov.w     #0x9639, w1
    2e48:	3e 00 90    	mov.w     [w14+6], w0
    2e4a:	c2 f5 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2e4c:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2e4e:	1e 00 78    	mov.w     [w14], w0
    2e50:	00 00 e0    	cp0.w     w0
    2e52:	35 00 32    	bra       Z, 0x2ebe <.L283>
        if (str_cmp(token, "ON") == 0) {
    2e54:	d1 63 29    	mov.w     #0x963d, w1
    2e56:	1e 00 78    	mov.w     [w14], w0
    2e58:	60 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2e5a:	00 00 e0    	cp0.w     w0
    2e5c:	02 00 3a    	bra       NZ, 0x2e62 <.L285>
            RE2_ = ON;
    2e5e:	e4 42 a8    	bset.b    0x2e4, #0x2
    2e60:	2e 00 37    	bra       0x2ebe <.L283>

00002e62 <.L285>:
        } else if (str_cmp(token, "OFF") == 0) {
    2e62:	01 64 29    	mov.w     #0x9640, w1
    2e64:	1e 00 78    	mov.w     [w14], w0
    2e66:	59 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2e68:	00 00 e0    	cp0.w     w0
    2e6a:	02 00 3a    	bra       NZ, 0x2e70 <.L286>
            RE2_ = OFF;
    2e6c:	e4 42 a9    	bclr.b    0x2e4, #0x2
    2e6e:	27 00 37    	bra       0x2ebe <.L283>

00002e70 <.L286>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2e70:	41 64 29    	mov.w     #0x9644, w1
    2e72:	1e 00 78    	mov.w     [w14], w0
    2e74:	52 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2e76:	00 00 e0    	cp0.w     w0
    2e78:	0f 00 3a    	bra       NZ, 0x2e98 <.L287>
            RE2_ = !RE2_;
    2e7a:	20 17 80    	mov.w     0x2e4, w0
    2e7c:	64 00 60    	and.w     w0, #0x4, w0
    2e7e:	00 f0 a7    	btsc.w    w0, #0xf
    2e80:	00 00 ea    	neg.w     w0, w0
    2e82:	00 00 e9    	dec.w     w0, w0
    2e84:	4f 00 de    	lsr.w     w0, #0xf, w0
    2e86:	00 40 78    	mov.b     w0, w0
    2e88:	00 80 fb    	ze        w0, w0
    2e8a:	61 00 60    	and.w     w0, #0x1, w0
    2e8c:	42 00 dd    	sl.w      w0, #0x2, w0
    2e8e:	21 17 80    	mov.w     0x2e4, w1
    2e90:	01 20 a1    	bclr.w    w1, #0x2
    2e92:	01 00 70    	ior.w     w0, w1, w0
    2e94:	20 17 88    	mov.w     w0, 0x2e4
    2e96:	13 00 37    	bra       0x2ebe <.L283>

00002e98 <.L287>:
        } else if (str2hex(token, &val) == 0) {
    2e98:	64 00 47    	add.w     w14, #0x4, w0
    2e9a:	80 00 78    	mov.w     w0, w1
    2e9c:	1e 00 78    	mov.w     [w14], w0
    2e9e:	43 f4 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2ea0:	00 00 e0    	cp0.w     w0
    2ea2:	0d 00 3a    	bra       NZ, 0x2ebe <.L283>
            RE2_ = (val) ? 1 : 0;
    2ea4:	2e 00 90    	mov.w     [w14+4], w0
    2ea6:	00 f0 a7    	btsc.w    w0, #0xf
    2ea8:	00 00 ea    	neg.w     w0, w0
    2eaa:	00 00 ea    	neg.w     w0, w0
    2eac:	4f 00 de    	lsr.w     w0, #0xf, w0
    2eae:	00 40 78    	mov.b     w0, w0
    2eb0:	00 80 fb    	ze        w0, w0
    2eb2:	61 00 60    	and.w     w0, #0x1, w0
    2eb4:	42 00 dd    	sl.w      w0, #0x2, w0
    2eb6:	21 17 80    	mov.w     0x2e4, w1
    2eb8:	01 20 a1    	bclr.w    w1, #0x2
    2eba:	01 00 70    	ior.w     w0, w1, w0
    2ebc:	20 17 88    	mov.w     w0, 0x2e4

00002ebe <.L283>:
        }
    }
}
    2ebe:	00 80 fa    	ulnk      
    2ec0:	00 00 06    	return    

00002ec2 <_re2Q_handler>:

void re2Q_handler(char *args) {
    2ec2:	02 00 fa    	lnk       #0x2
    2ec4:	00 0f 78    	mov.w     w0, [w14]
    if (RE2_ == ON)
    2ec6:	20 17 80    	mov.w     0x2e4, w0
    2ec8:	64 00 60    	and.w     w0, #0x4, w0
    2eca:	00 00 e0    	cp0.w     w0
    2ecc:	04 00 32    	bra       Z, 0x2ed6 <.L289>
        parser_puts("1\r\n");
    2ece:	d1 41 80    	mov.w     0x83a, w1
    2ed0:	b0 64 29    	mov.w     #0x964b, w0
    2ed2:	01 00 01    	call      w1
    2ed4:	03 00 37    	bra       0x2edc <.L288>

00002ed6 <.L289>:
    else
        parser_puts("0\r\n");
    2ed6:	d1 41 80    	mov.w     0x83a, w1
    2ed8:	f0 64 29    	mov.w     #0x964f, w0
    2eda:	01 00 01    	call      w1

00002edc <.L288>:
}
    2edc:	00 80 fa    	ulnk      
    2ede:	00 00 06    	return    

00002ee0 <_re3_handler>:

void re3_handler(char *args) {
    2ee0:	08 00 fa    	lnk       #0x8
    2ee2:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2ee4:	00 00 eb    	clr.w     w0
    2ee6:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2ee8:	0e 80 e8    	inc2.w    w14, w0
    2eea:	00 01 78    	mov.w     w0, w2
    2eec:	91 63 29    	mov.w     #0x9639, w1
    2eee:	3e 00 90    	mov.w     [w14+6], w0
    2ef0:	6f f5 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2ef2:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2ef4:	1e 00 78    	mov.w     [w14], w0
    2ef6:	00 00 e0    	cp0.w     w0
    2ef8:	35 00 32    	bra       Z, 0x2f64 <.L291>
        if (str_cmp(token, "ON") == 0) {
    2efa:	d1 63 29    	mov.w     #0x963d, w1
    2efc:	1e 00 78    	mov.w     [w14], w0
    2efe:	0d f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2f00:	00 00 e0    	cp0.w     w0
    2f02:	02 00 3a    	bra       NZ, 0x2f08 <.L293>
            RE3_ = ON;
    2f04:	e4 62 a8    	bset.b    0x2e4, #0x3
    2f06:	2e 00 37    	bra       0x2f64 <.L291>

00002f08 <.L293>:
        } else if (str_cmp(token, "OFF") == 0) {
    2f08:	01 64 29    	mov.w     #0x9640, w1
    2f0a:	1e 00 78    	mov.w     [w14], w0
    2f0c:	06 f5 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2f0e:	00 00 e0    	cp0.w     w0
    2f10:	02 00 3a    	bra       NZ, 0x2f16 <.L294>
            RE3_ = OFF;
    2f12:	e4 62 a9    	bclr.b    0x2e4, #0x3
    2f14:	27 00 37    	bra       0x2f64 <.L291>

00002f16 <.L294>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2f16:	41 64 29    	mov.w     #0x9644, w1
    2f18:	1e 00 78    	mov.w     [w14], w0
    2f1a:	ff f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2f1c:	00 00 e0    	cp0.w     w0
    2f1e:	0f 00 3a    	bra       NZ, 0x2f3e <.L295>
            RE3_ = !RE3_;
    2f20:	20 17 80    	mov.w     0x2e4, w0
    2f22:	68 00 60    	and.w     w0, #0x8, w0
    2f24:	00 f0 a7    	btsc.w    w0, #0xf
    2f26:	00 00 ea    	neg.w     w0, w0
    2f28:	00 00 e9    	dec.w     w0, w0
    2f2a:	4f 00 de    	lsr.w     w0, #0xf, w0
    2f2c:	00 40 78    	mov.b     w0, w0
    2f2e:	00 80 fb    	ze        w0, w0
    2f30:	61 00 60    	and.w     w0, #0x1, w0
    2f32:	43 00 dd    	sl.w      w0, #0x3, w0
    2f34:	21 17 80    	mov.w     0x2e4, w1
    2f36:	01 30 a1    	bclr.w    w1, #0x3
    2f38:	01 00 70    	ior.w     w0, w1, w0
    2f3a:	20 17 88    	mov.w     w0, 0x2e4
    2f3c:	13 00 37    	bra       0x2f64 <.L291>

00002f3e <.L295>:
        } else if (str2hex(token, &val) == 0) {
    2f3e:	64 00 47    	add.w     w14, #0x4, w0
    2f40:	80 00 78    	mov.w     w0, w1
    2f42:	1e 00 78    	mov.w     [w14], w0
    2f44:	f0 f3 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2f46:	00 00 e0    	cp0.w     w0
    2f48:	0d 00 3a    	bra       NZ, 0x2f64 <.L291>
            RE3_ = (val) ? 1 : 0;
    2f4a:	2e 00 90    	mov.w     [w14+4], w0
    2f4c:	00 f0 a7    	btsc.w    w0, #0xf
    2f4e:	00 00 ea    	neg.w     w0, w0
    2f50:	00 00 ea    	neg.w     w0, w0
    2f52:	4f 00 de    	lsr.w     w0, #0xf, w0
    2f54:	00 40 78    	mov.b     w0, w0
    2f56:	00 80 fb    	ze        w0, w0
    2f58:	61 00 60    	and.w     w0, #0x1, w0
    2f5a:	43 00 dd    	sl.w      w0, #0x3, w0
    2f5c:	21 17 80    	mov.w     0x2e4, w1
    2f5e:	01 30 a1    	bclr.w    w1, #0x3
    2f60:	01 00 70    	ior.w     w0, w1, w0
    2f62:	20 17 88    	mov.w     w0, 0x2e4

00002f64 <.L291>:
        }
    }
}
    2f64:	00 80 fa    	ulnk      
    2f66:	00 00 06    	return    

00002f68 <_re3Q_handler>:

void re3Q_handler(char *args) {
    2f68:	02 00 fa    	lnk       #0x2
    2f6a:	00 0f 78    	mov.w     w0, [w14]
    if (RE3_ == ON)
    2f6c:	20 17 80    	mov.w     0x2e4, w0
    2f6e:	68 00 60    	and.w     w0, #0x8, w0
    2f70:	00 00 e0    	cp0.w     w0
    2f72:	04 00 32    	bra       Z, 0x2f7c <.L297>
        parser_puts("1\r\n");
    2f74:	d1 41 80    	mov.w     0x83a, w1
    2f76:	b0 64 29    	mov.w     #0x964b, w0
    2f78:	01 00 01    	call      w1
    2f7a:	03 00 37    	bra       0x2f82 <.L296>

00002f7c <.L297>:
    else
        parser_puts("0\r\n");
    2f7c:	d1 41 80    	mov.w     0x83a, w1
    2f7e:	f0 64 29    	mov.w     #0x964f, w0
    2f80:	01 00 01    	call      w1

00002f82 <.L296>:
}
    2f82:	00 80 fa    	ulnk      
    2f84:	00 00 06    	return    

00002f86 <_re4_handler>:

void re4_handler(char *args) {
    2f86:	08 00 fa    	lnk       #0x8
    2f88:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    2f8a:	00 00 eb    	clr.w     w0
    2f8c:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    2f8e:	0e 80 e8    	inc2.w    w14, w0
    2f90:	00 01 78    	mov.w     w0, w2
    2f92:	91 63 29    	mov.w     #0x9639, w1
    2f94:	3e 00 90    	mov.w     [w14+6], w0
    2f96:	1c f5 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    2f98:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    2f9a:	1e 00 78    	mov.w     [w14], w0
    2f9c:	00 00 e0    	cp0.w     w0
    2f9e:	35 00 32    	bra       Z, 0x300a <.L299>
        if (str_cmp(token, "ON") == 0) {
    2fa0:	d1 63 29    	mov.w     #0x963d, w1
    2fa2:	1e 00 78    	mov.w     [w14], w0
    2fa4:	ba f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2fa6:	00 00 e0    	cp0.w     w0
    2fa8:	02 00 3a    	bra       NZ, 0x2fae <.L301>
            RE4_ = ON;
    2faa:	e4 82 a8    	bset.b    0x2e4, #0x4
    2fac:	2e 00 37    	bra       0x300a <.L299>

00002fae <.L301>:
        } else if (str_cmp(token, "OFF") == 0) {
    2fae:	01 64 29    	mov.w     #0x9640, w1
    2fb0:	1e 00 78    	mov.w     [w14], w0
    2fb2:	b3 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2fb4:	00 00 e0    	cp0.w     w0
    2fb6:	02 00 3a    	bra       NZ, 0x2fbc <.L302>
            RE4_ = OFF;
    2fb8:	e4 82 a9    	bclr.b    0x2e4, #0x4
    2fba:	27 00 37    	bra       0x300a <.L299>

00002fbc <.L302>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    2fbc:	41 64 29    	mov.w     #0x9644, w1
    2fbe:	1e 00 78    	mov.w     [w14], w0
    2fc0:	ac f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    2fc2:	00 00 e0    	cp0.w     w0
    2fc4:	0f 00 3a    	bra       NZ, 0x2fe4 <.L303>
            RE4_ = !RE4_;
    2fc6:	20 17 80    	mov.w     0x2e4, w0
    2fc8:	70 00 60    	and.w     w0, #0x10, w0
    2fca:	00 f0 a7    	btsc.w    w0, #0xf
    2fcc:	00 00 ea    	neg.w     w0, w0
    2fce:	00 00 e9    	dec.w     w0, w0
    2fd0:	4f 00 de    	lsr.w     w0, #0xf, w0
    2fd2:	00 40 78    	mov.b     w0, w0
    2fd4:	00 80 fb    	ze        w0, w0
    2fd6:	61 00 60    	and.w     w0, #0x1, w0
    2fd8:	44 00 dd    	sl.w      w0, #0x4, w0
    2fda:	21 17 80    	mov.w     0x2e4, w1
    2fdc:	01 40 a1    	bclr.w    w1, #0x4
    2fde:	01 00 70    	ior.w     w0, w1, w0
    2fe0:	20 17 88    	mov.w     w0, 0x2e4
    2fe2:	13 00 37    	bra       0x300a <.L299>

00002fe4 <.L303>:
        } else if (str2hex(token, &val) == 0) {
    2fe4:	64 00 47    	add.w     w14, #0x4, w0
    2fe6:	80 00 78    	mov.w     w0, w1
    2fe8:	1e 00 78    	mov.w     [w14], w0
    2fea:	9d f3 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    2fec:	00 00 e0    	cp0.w     w0
    2fee:	0d 00 3a    	bra       NZ, 0x300a <.L299>
            RE4_ = (val) ? 1 : 0;
    2ff0:	2e 00 90    	mov.w     [w14+4], w0
    2ff2:	00 f0 a7    	btsc.w    w0, #0xf
    2ff4:	00 00 ea    	neg.w     w0, w0
    2ff6:	00 00 ea    	neg.w     w0, w0
    2ff8:	4f 00 de    	lsr.w     w0, #0xf, w0
    2ffa:	00 40 78    	mov.b     w0, w0
    2ffc:	00 80 fb    	ze        w0, w0
    2ffe:	61 00 60    	and.w     w0, #0x1, w0
    3000:	44 00 dd    	sl.w      w0, #0x4, w0
    3002:	21 17 80    	mov.w     0x2e4, w1
    3004:	01 40 a1    	bclr.w    w1, #0x4
    3006:	01 00 70    	ior.w     w0, w1, w0
    3008:	20 17 88    	mov.w     w0, 0x2e4

0000300a <.L299>:
        }
    }
}
    300a:	00 80 fa    	ulnk      
    300c:	00 00 06    	return    

0000300e <_re4Q_handler>:

void re4Q_handler(char *args) {
    300e:	02 00 fa    	lnk       #0x2
    3010:	00 0f 78    	mov.w     w0, [w14]
    if (RE4_ == ON)
    3012:	20 17 80    	mov.w     0x2e4, w0
    3014:	70 00 60    	and.w     w0, #0x10, w0
    3016:	00 00 e0    	cp0.w     w0
    3018:	04 00 32    	bra       Z, 0x3022 <.L305>
        parser_puts("1\r\n");
    301a:	d1 41 80    	mov.w     0x83a, w1
    301c:	b0 64 29    	mov.w     #0x964b, w0
    301e:	01 00 01    	call      w1
    3020:	03 00 37    	bra       0x3028 <.L304>

00003022 <.L305>:
    else
        parser_puts("0\r\n");
    3022:	d1 41 80    	mov.w     0x83a, w1
    3024:	f0 64 29    	mov.w     #0x964f, w0
    3026:	01 00 01    	call      w1

00003028 <.L304>:
}
    3028:	00 80 fa    	ulnk      
    302a:	00 00 06    	return    

0000302c <_re5_handler>:

void re5_handler(char *args) {
    302c:	08 00 fa    	lnk       #0x8
    302e:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    3030:	00 00 eb    	clr.w     w0
    3032:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    3034:	0e 80 e8    	inc2.w    w14, w0
    3036:	00 01 78    	mov.w     w0, w2
    3038:	91 63 29    	mov.w     #0x9639, w1
    303a:	3e 00 90    	mov.w     [w14+6], w0
    303c:	c9 f4 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    303e:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    3040:	1e 00 78    	mov.w     [w14], w0
    3042:	00 00 e0    	cp0.w     w0
    3044:	36 00 32    	bra       Z, 0x30b2 <.L307>
        if (str_cmp(token, "ON") == 0) {
    3046:	d1 63 29    	mov.w     #0x963d, w1
    3048:	1e 00 78    	mov.w     [w14], w0
    304a:	67 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    304c:	00 00 e0    	cp0.w     w0
    304e:	02 00 3a    	bra       NZ, 0x3054 <.L309>
            RE5_ = ON;
    3050:	e4 a2 a8    	bset.b    0x2e4, #0x5
    3052:	2f 00 37    	bra       0x30b2 <.L307>

00003054 <.L309>:
        } else if (str_cmp(token, "OFF") == 0) {
    3054:	01 64 29    	mov.w     #0x9640, w1
    3056:	1e 00 78    	mov.w     [w14], w0
    3058:	60 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    305a:	00 00 e0    	cp0.w     w0
    305c:	02 00 3a    	bra       NZ, 0x3062 <.L310>
            RE5_ = OFF;
    305e:	e4 a2 a9    	bclr.b    0x2e4, #0x5
    3060:	28 00 37    	bra       0x30b2 <.L307>

00003062 <.L310>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    3062:	41 64 29    	mov.w     #0x9644, w1
    3064:	1e 00 78    	mov.w     [w14], w0
    3066:	59 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3068:	00 00 e0    	cp0.w     w0
    306a:	10 00 3a    	bra       NZ, 0x308c <.L311>
            RE5_ = !RE5_;
    306c:	21 17 80    	mov.w     0x2e4, w1
    306e:	00 02 20    	mov.w     #0x20, w0
    3070:	00 80 60    	and.w     w1, w0, w0
    3072:	00 f0 a7    	btsc.w    w0, #0xf
    3074:	00 00 ea    	neg.w     w0, w0
    3076:	00 00 e9    	dec.w     w0, w0
    3078:	4f 00 de    	lsr.w     w0, #0xf, w0
    307a:	00 40 78    	mov.b     w0, w0
    307c:	00 80 fb    	ze        w0, w0
    307e:	61 00 60    	and.w     w0, #0x1, w0
    3080:	45 00 dd    	sl.w      w0, #0x5, w0
    3082:	21 17 80    	mov.w     0x2e4, w1
    3084:	01 50 a1    	bclr.w    w1, #0x5
    3086:	01 00 70    	ior.w     w0, w1, w0
    3088:	20 17 88    	mov.w     w0, 0x2e4
    308a:	13 00 37    	bra       0x30b2 <.L307>

0000308c <.L311>:
        } else if (str2hex(token, &val) == 0) {
    308c:	64 00 47    	add.w     w14, #0x4, w0
    308e:	80 00 78    	mov.w     w0, w1
    3090:	1e 00 78    	mov.w     [w14], w0
    3092:	49 f3 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3094:	00 00 e0    	cp0.w     w0
    3096:	0d 00 3a    	bra       NZ, 0x30b2 <.L307>
            RE5_ = (val) ? 1 : 0;
    3098:	2e 00 90    	mov.w     [w14+4], w0
    309a:	00 f0 a7    	btsc.w    w0, #0xf
    309c:	00 00 ea    	neg.w     w0, w0
    309e:	00 00 ea    	neg.w     w0, w0
    30a0:	4f 00 de    	lsr.w     w0, #0xf, w0
    30a2:	00 40 78    	mov.b     w0, w0
    30a4:	00 80 fb    	ze        w0, w0
    30a6:	61 00 60    	and.w     w0, #0x1, w0
    30a8:	45 00 dd    	sl.w      w0, #0x5, w0
    30aa:	21 17 80    	mov.w     0x2e4, w1
    30ac:	01 50 a1    	bclr.w    w1, #0x5
    30ae:	01 00 70    	ior.w     w0, w1, w0
    30b0:	20 17 88    	mov.w     w0, 0x2e4

000030b2 <.L307>:
        }
    }
}
    30b2:	00 80 fa    	ulnk      
    30b4:	00 00 06    	return    

000030b6 <_re5Q_handler>:

void re5Q_handler(char *args) {
    30b6:	02 00 fa    	lnk       #0x2
    30b8:	00 0f 78    	mov.w     w0, [w14]
    if (RE5_ == ON)
    30ba:	21 17 80    	mov.w     0x2e4, w1
    30bc:	00 02 20    	mov.w     #0x20, w0
    30be:	00 80 60    	and.w     w1, w0, w0
    30c0:	00 00 e0    	cp0.w     w0
    30c2:	04 00 32    	bra       Z, 0x30cc <.L313>
        parser_puts("1\r\n");
    30c4:	d1 41 80    	mov.w     0x83a, w1
    30c6:	b0 64 29    	mov.w     #0x964b, w0
    30c8:	01 00 01    	call      w1
    30ca:	03 00 37    	bra       0x30d2 <.L312>

000030cc <.L313>:
    else
        parser_puts("0\r\n");
    30cc:	d1 41 80    	mov.w     0x83a, w1
    30ce:	f0 64 29    	mov.w     #0x964f, w0
    30d0:	01 00 01    	call      w1

000030d2 <.L312>:
}
    30d2:	00 80 fa    	ulnk      
    30d4:	00 00 06    	return    

000030d6 <_re6_handler>:

void re6_handler(char *args) {
    30d6:	08 00 fa    	lnk       #0x8
    30d8:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    30da:	00 00 eb    	clr.w     w0
    30dc:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    30de:	0e 80 e8    	inc2.w    w14, w0
    30e0:	00 01 78    	mov.w     w0, w2
    30e2:	91 63 29    	mov.w     #0x9639, w1
    30e4:	3e 00 90    	mov.w     [w14+6], w0
    30e6:	74 f4 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    30e8:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    30ea:	1e 00 78    	mov.w     [w14], w0
    30ec:	00 00 e0    	cp0.w     w0
    30ee:	36 00 32    	bra       Z, 0x315c <.L315>
        if (str_cmp(token, "ON") == 0) {
    30f0:	d1 63 29    	mov.w     #0x963d, w1
    30f2:	1e 00 78    	mov.w     [w14], w0
    30f4:	12 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    30f6:	00 00 e0    	cp0.w     w0
    30f8:	02 00 3a    	bra       NZ, 0x30fe <.L317>
            RE6_ = ON;
    30fa:	e4 c2 a8    	bset.b    0x2e4, #0x6
    30fc:	2f 00 37    	bra       0x315c <.L315>

000030fe <.L317>:
        } else if (str_cmp(token, "OFF") == 0) {
    30fe:	01 64 29    	mov.w     #0x9640, w1
    3100:	1e 00 78    	mov.w     [w14], w0
    3102:	0b f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3104:	00 00 e0    	cp0.w     w0
    3106:	02 00 3a    	bra       NZ, 0x310c <.L318>
            RE6_ = OFF;
    3108:	e4 c2 a9    	bclr.b    0x2e4, #0x6
    310a:	28 00 37    	bra       0x315c <.L315>

0000310c <.L318>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    310c:	41 64 29    	mov.w     #0x9644, w1
    310e:	1e 00 78    	mov.w     [w14], w0
    3110:	04 f4 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3112:	00 00 e0    	cp0.w     w0
    3114:	10 00 3a    	bra       NZ, 0x3136 <.L319>
            RE6_ = !RE6_;
    3116:	21 17 80    	mov.w     0x2e4, w1
    3118:	00 04 20    	mov.w     #0x40, w0
    311a:	00 80 60    	and.w     w1, w0, w0
    311c:	00 f0 a7    	btsc.w    w0, #0xf
    311e:	00 00 ea    	neg.w     w0, w0
    3120:	00 00 e9    	dec.w     w0, w0
    3122:	4f 00 de    	lsr.w     w0, #0xf, w0
    3124:	00 40 78    	mov.b     w0, w0
    3126:	00 80 fb    	ze        w0, w0
    3128:	61 00 60    	and.w     w0, #0x1, w0
    312a:	46 00 dd    	sl.w      w0, #0x6, w0
    312c:	21 17 80    	mov.w     0x2e4, w1
    312e:	01 60 a1    	bclr.w    w1, #0x6
    3130:	01 00 70    	ior.w     w0, w1, w0
    3132:	20 17 88    	mov.w     w0, 0x2e4
    3134:	13 00 37    	bra       0x315c <.L315>

00003136 <.L319>:
        } else if (str2hex(token, &val) == 0) {
    3136:	64 00 47    	add.w     w14, #0x4, w0
    3138:	80 00 78    	mov.w     w0, w1
    313a:	1e 00 78    	mov.w     [w14], w0
    313c:	f4 f2 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    313e:	00 00 e0    	cp0.w     w0
    3140:	0d 00 3a    	bra       NZ, 0x315c <.L315>
            RE6_ = (val) ? 1 : 0;
    3142:	2e 00 90    	mov.w     [w14+4], w0
    3144:	00 f0 a7    	btsc.w    w0, #0xf
    3146:	00 00 ea    	neg.w     w0, w0
    3148:	00 00 ea    	neg.w     w0, w0
    314a:	4f 00 de    	lsr.w     w0, #0xf, w0
    314c:	00 40 78    	mov.b     w0, w0
    314e:	00 80 fb    	ze        w0, w0
    3150:	61 00 60    	and.w     w0, #0x1, w0
    3152:	46 00 dd    	sl.w      w0, #0x6, w0
    3154:	21 17 80    	mov.w     0x2e4, w1
    3156:	01 60 a1    	bclr.w    w1, #0x6
    3158:	01 00 70    	ior.w     w0, w1, w0
    315a:	20 17 88    	mov.w     w0, 0x2e4

0000315c <.L315>:
        }
    }
}
    315c:	00 80 fa    	ulnk      
    315e:	00 00 06    	return    

00003160 <_re6Q_handler>:

void re6Q_handler(char *args) {
    3160:	02 00 fa    	lnk       #0x2
    3162:	00 0f 78    	mov.w     w0, [w14]
    if (RE6_ == ON)
    3164:	21 17 80    	mov.w     0x2e4, w1
    3166:	00 04 20    	mov.w     #0x40, w0
    3168:	00 80 60    	and.w     w1, w0, w0
    316a:	00 00 e0    	cp0.w     w0
    316c:	04 00 32    	bra       Z, 0x3176 <.L321>
        parser_puts("1\r\n");
    316e:	d1 41 80    	mov.w     0x83a, w1
    3170:	b0 64 29    	mov.w     #0x964b, w0
    3172:	01 00 01    	call      w1
    3174:	03 00 37    	bra       0x317c <.L320>

00003176 <.L321>:
    else
        parser_puts("0\r\n");
    3176:	d1 41 80    	mov.w     0x83a, w1
    3178:	f0 64 29    	mov.w     #0x964f, w0
    317a:	01 00 01    	call      w1

0000317c <.L320>:
}
    317c:	00 80 fa    	ulnk      
    317e:	00 00 06    	return    

00003180 <_ble_handler>:

// BLE commands
void ble_handler(char *args) {
    3180:	08 00 fa    	lnk       #0x8
    3182:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    3184:	00 00 eb    	clr.w     w0
    3186:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    3188:	64 00 47    	add.w     w14, #0x4, w0
    318a:	00 01 78    	mov.w     w0, w2
    318c:	91 63 29    	mov.w     #0x9639, w1
    318e:	3e 00 90    	mov.w     [w14+6], w0
    3190:	1f f4 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    3192:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    3194:	1e 00 90    	mov.w     [w14+2], w0
    3196:	00 00 e0    	cp0.w     w0
    3198:	1a 00 32    	bra       Z, 0x31ce <.L323>
        for (i = 0; i < BLE_TABLE_ENTRIES; i++) {
    319a:	00 00 eb    	clr.w     w0
    319c:	00 0f 78    	mov.w     w0, [w14]
    319e:	14 00 37    	bra       0x31c8 <.L325>

000031a0 <.L327>:
            if (str_cmp(command, ble_table[i].command) == 0) {
    31a0:	1e 00 78    	mov.w     [w14], w0
    31a2:	c2 00 dd    	sl.w      w0, #0x2, w1
    31a4:	60 47 21    	mov.w     #0x1476, w0
    31a6:	00 80 40    	add.w     w1, w0, w0
    31a8:	10 00 78    	mov.w     [w0], w0
    31aa:	80 00 78    	mov.w     w0, w1
    31ac:	1e 00 90    	mov.w     [w14+2], w0
    31ae:	b5 f3 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    31b0:	00 00 e0    	cp0.w     w0
    31b2:	09 00 3a    	bra       NZ, 0x31c6 <.L326>
                ble_table[i].handler(remainder);
    31b4:	1e 00 78    	mov.w     [w14], w0
    31b6:	42 00 dd    	sl.w      w0, #0x2, w0
    31b8:	80 80 e8    	inc2.w    w0, w1
    31ba:	60 47 21    	mov.w     #0x1476, w0
    31bc:	00 80 40    	add.w     w1, w0, w0
    31be:	90 00 78    	mov.w     [w0], w1
    31c0:	2e 00 90    	mov.w     [w14+4], w0
    31c2:	01 00 01    	call      w1
                break;
    31c4:	04 00 37    	bra       0x31ce <.L323>

000031c6 <.L326>:
    31c6:	1e 0f e8    	inc.w     [w14], [w14]

000031c8 <.L325>:
    31c8:	1e 00 78    	mov.w     [w14], w0
    31ca:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    31cc:	e9 ff 36    	bra       LEU, 0x31a0 <.L327>

000031ce <.L323>:
            }
        }
    }
}
    31ce:	00 80 fa    	ulnk      
    31d0:	00 00 06    	return    

000031d2 <_ble_reset_handler>:

void ble_reset_handler(char *args) {
    31d2:	08 00 fa    	lnk       #0x8
    31d4:	30 07 98    	mov.w     w0, [w14+6]
    char *token, *remainder;
    uint16_t val;

    remainder = (char *)NULL;
    31d6:	00 00 eb    	clr.w     w0
    31d8:	10 07 98    	mov.w     w0, [w14+2]
    token = str_tok_r(args, ":, ", &remainder);
    31da:	0e 80 e8    	inc2.w    w14, w0
    31dc:	00 01 78    	mov.w     w0, w2
    31de:	91 63 29    	mov.w     #0x9639, w1
    31e0:	3e 00 90    	mov.w     [w14+6], w0
    31e2:	f6 f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    31e4:	00 0f 78    	mov.w     w0, [w14]
    if (token) {
    31e6:	1e 00 78    	mov.w     [w14], w0
    31e8:	00 00 e0    	cp0.w     w0
    31ea:	36 00 32    	bra       Z, 0x3258 <.L328>
        if (str_cmp(token, "ON") == 0) {
    31ec:	d1 63 29    	mov.w     #0x963d, w1
    31ee:	1e 00 78    	mov.w     [w14], w0
    31f0:	94 f3 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    31f2:	00 00 e0    	cp0.w     w0
    31f4:	02 00 3a    	bra       NZ, 0x31fa <.L330>
            BLE_RST_N = ON;
    31f6:	e4 e2 a8    	bset.b    0x2e4, #0x7
    31f8:	2f 00 37    	bra       0x3258 <.L328>

000031fa <.L330>:
        } else if (str_cmp(token, "OFF") == 0) {
    31fa:	01 64 29    	mov.w     #0x9640, w1
    31fc:	1e 00 78    	mov.w     [w14], w0
    31fe:	8d f3 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3200:	00 00 e0    	cp0.w     w0
    3202:	02 00 3a    	bra       NZ, 0x3208 <.L331>
            BLE_RST_N = OFF;
    3204:	e4 e2 a9    	bclr.b    0x2e4, #0x7
    3206:	28 00 37    	bra       0x3258 <.L328>

00003208 <.L331>:
        } else if (str_cmp(token, "TOGGLE") == 0) {
    3208:	41 64 29    	mov.w     #0x9644, w1
    320a:	1e 00 78    	mov.w     [w14], w0
    320c:	86 f3 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    320e:	00 00 e0    	cp0.w     w0
    3210:	10 00 3a    	bra       NZ, 0x3232 <.L332>
            BLE_RST_N = !BLE_RST_N;
    3212:	21 17 80    	mov.w     0x2e4, w1
    3214:	00 08 20    	mov.w     #0x80, w0
    3216:	00 80 60    	and.w     w1, w0, w0
    3218:	00 f0 a7    	btsc.w    w0, #0xf
    321a:	00 00 ea    	neg.w     w0, w0
    321c:	00 00 e9    	dec.w     w0, w0
    321e:	4f 00 de    	lsr.w     w0, #0xf, w0
    3220:	00 40 78    	mov.b     w0, w0
    3222:	00 80 fb    	ze        w0, w0
    3224:	61 00 60    	and.w     w0, #0x1, w0
    3226:	47 00 dd    	sl.w      w0, #0x7, w0
    3228:	21 17 80    	mov.w     0x2e4, w1
    322a:	01 70 a1    	bclr.w    w1, #0x7
    322c:	01 00 70    	ior.w     w0, w1, w0
    322e:	20 17 88    	mov.w     w0, 0x2e4
    3230:	13 00 37    	bra       0x3258 <.L328>

00003232 <.L332>:
        } else if (str2hex(token, &val) == 0) {
    3232:	64 00 47    	add.w     w14, #0x4, w0
    3234:	80 00 78    	mov.w     w0, w1
    3236:	1e 00 78    	mov.w     [w14], w0
    3238:	76 f2 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    323a:	00 00 e0    	cp0.w     w0
    323c:	0d 00 3a    	bra       NZ, 0x3258 <.L328>
            BLE_RST_N = (val) ? 1 : 0;
    323e:	2e 00 90    	mov.w     [w14+4], w0
    3240:	00 f0 a7    	btsc.w    w0, #0xf
    3242:	00 00 ea    	neg.w     w0, w0
    3244:	00 00 ea    	neg.w     w0, w0
    3246:	4f 00 de    	lsr.w     w0, #0xf, w0
    3248:	00 40 78    	mov.b     w0, w0
    324a:	00 80 fb    	ze        w0, w0
    324c:	61 00 60    	and.w     w0, #0x1, w0
    324e:	47 00 dd    	sl.w      w0, #0x7, w0
    3250:	21 17 80    	mov.w     0x2e4, w1
    3252:	01 70 a1    	bclr.w    w1, #0x7
    3254:	01 00 70    	ior.w     w0, w1, w0
    3256:	20 17 88    	mov.w     w0, 0x2e4

00003258 <.L328>:
        }
    }
}
    3258:	00 80 fa    	ulnk      
    325a:	00 00 06    	return    

0000325c <_ble_resetQ_handler>:

void ble_resetQ_handler(char *args) {
    325c:	02 00 fa    	lnk       #0x2
    325e:	00 0f 78    	mov.w     w0, [w14]
    if (BLE_RST_N == 1)
    3260:	21 17 80    	mov.w     0x2e4, w1
    3262:	00 08 20    	mov.w     #0x80, w0
    3264:	00 80 60    	and.w     w1, w0, w0
    3266:	00 00 e0    	cp0.w     w0
    3268:	04 00 32    	bra       Z, 0x3272 <.L334>
        parser_puts("1\r\n");
    326a:	d1 41 80    	mov.w     0x83a, w1
    326c:	b0 64 29    	mov.w     #0x964b, w0
    326e:	01 00 01    	call      w1
    3270:	03 00 37    	bra       0x3278 <.L333>

00003272 <.L334>:
    else
        parser_puts("0\r\n");
    3272:	d1 41 80    	mov.w     0x83a, w1
    3274:	f0 64 29    	mov.w     #0x964f, w0
    3276:	01 00 01    	call      w1

00003278 <.L333>:
}
    3278:	00 80 fa    	ulnk      
    327a:	00 00 06    	return    

0000327c <_ble_forward_handler>:

void ble_forward_handler(char *args) {
    327c:	02 00 fa    	lnk       #0x2
    327e:	00 0f 78    	mov.w     w0, [w14]
    if (parser_state == parser_disconnected) {
    3280:	91 41 80    	mov.w     0x832, w1
    3282:	a0 5b 23    	mov.w     #0x35ba, w0
    3284:	80 8f 50    	sub.w     w1, w0, [w15]
    3286:	02 00 3a    	bra       NZ, 0x328c <.L336>
        parser_state = parser_forwarding;
    3288:	20 8f 23    	mov.w     #0x38f2, w0
    328a:	90 41 88    	mov.w     w0, 0x832

0000328c <.L336>:
    }
}
    328c:	00 80 fa    	ulnk      
    328e:	00 00 06    	return    

00003290 <_flash_handler>:

// FLASH commands
void flash_handler(char *args) {
    3290:	08 00 fa    	lnk       #0x8
    3292:	30 07 98    	mov.w     w0, [w14+6]
    uint16_t i;
    char *command, *remainder;

    remainder = (char *)NULL;
    3294:	00 00 eb    	clr.w     w0
    3296:	20 07 98    	mov.w     w0, [w14+4]
    command = str_tok_r(args, ":, ", &remainder);
    3298:	64 00 47    	add.w     w14, #0x4, w0
    329a:	00 01 78    	mov.w     w0, w2
    329c:	91 63 29    	mov.w     #0x9639, w1
    329e:	3e 00 90    	mov.w     [w14+6], w0
    32a0:	97 f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    32a2:	10 07 98    	mov.w     w0, [w14+2]
    if (command) {
    32a4:	1e 00 90    	mov.w     [w14+2], w0
    32a6:	00 00 e0    	cp0.w     w0
    32a8:	1a 00 32    	bra       Z, 0x32de <.L338>
        for (i = 0; i < FLASH_TABLE_ENTRIES; i++) {
    32aa:	00 00 eb    	clr.w     w0
    32ac:	00 0f 78    	mov.w     w0, [w14]
    32ae:	14 00 37    	bra       0x32d8 <.L340>

000032b0 <.L342>:
            if (str_cmp(command, flash_table[i].command) == 0) {
    32b0:	1e 00 78    	mov.w     [w14], w0
    32b2:	c2 00 dd    	sl.w      w0, #0x2, w1
    32b4:	20 48 21    	mov.w     #0x1482, w0
    32b6:	00 80 40    	add.w     w1, w0, w0
    32b8:	10 00 78    	mov.w     [w0], w0
    32ba:	80 00 78    	mov.w     w0, w1
    32bc:	1e 00 90    	mov.w     [w14+2], w0
    32be:	2d f3 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    32c0:	00 00 e0    	cp0.w     w0
    32c2:	09 00 3a    	bra       NZ, 0x32d6 <.L341>
                flash_table[i].handler(remainder);
    32c4:	1e 00 78    	mov.w     [w14], w0
    32c6:	42 00 dd    	sl.w      w0, #0x2, w0
    32c8:	80 80 e8    	inc2.w    w0, w1
    32ca:	20 48 21    	mov.w     #0x1482, w0
    32cc:	00 80 40    	add.w     w1, w0, w0
    32ce:	90 00 78    	mov.w     [w0], w1
    32d0:	2e 00 90    	mov.w     [w14+4], w0
    32d2:	01 00 01    	call      w1
                break;
    32d4:	04 00 37    	bra       0x32de <.L338>

000032d6 <.L341>:
    32d6:	1e 0f e8    	inc.w     [w14], [w14]

000032d8 <.L340>:
    32d8:	1e 00 78    	mov.w     [w14], w0
    32da:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    32dc:	e9 ff 36    	bra       LEU, 0x32b0 <.L342>

000032de <.L338>:
            }
        }
    }
}
    32de:	00 80 fa    	ulnk      
    32e0:	00 00 06    	return    

000032e2 <_flash_erase_handler>:

void flash_erase_handler(char *args) {
    32e2:	0a 00 fa    	lnk       #0xa
    32e4:	40 07 98    	mov.w     w0, [w14+8]
    uint16_t val1, val2;
    char *arg1, *arg2;

    arg2 = (char *)NULL;
    32e6:	00 00 eb    	clr.w     w0
    32e8:	30 07 98    	mov.w     w0, [w14+6]
    arg1 = str_tok_r(args, ", ", &arg2);
    32ea:	66 00 47    	add.w     w14, #0x6, w0
    32ec:	00 01 78    	mov.w     w0, w2
    32ee:	61 65 29    	mov.w     #0x9656, w1
    32f0:	4e 00 90    	mov.w     [w14+8], w0
    32f2:	6e f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    32f4:	00 0f 78    	mov.w     w0, [w14]
    if (arg1 && arg2) {
    32f6:	1e 00 78    	mov.w     [w14], w0
    32f8:	00 00 e0    	cp0.w     w0
    32fa:	26 00 32    	bra       Z, 0x3348 <.L343>
    32fc:	3e 00 90    	mov.w     [w14+6], w0
    32fe:	00 00 e0    	cp0.w     w0
    3300:	23 00 32    	bra       Z, 0x3348 <.L343>
        if ((str2hex(arg1, &val1) == 0) && (str2hex(arg2, &val2) == 0)) {
    3302:	0e 80 e8    	inc2.w    w14, w0
    3304:	80 00 78    	mov.w     w0, w1
    3306:	1e 00 78    	mov.w     [w14], w0
    3308:	0e f2 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    330a:	00 00 e0    	cp0.w     w0
    330c:	1d 00 3a    	bra       NZ, 0x3348 <.L343>
    330e:	3e 00 90    	mov.w     [w14+6], w0
    3310:	e4 00 47    	add.w     w14, #0x4, w1
    3312:	09 f2 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3314:	00 00 e0    	cp0.w     w0
    3316:	18 00 3a    	bra       NZ, 0x3348 <.L343>
            NVMCON = 0x4042;                // set up NVMCON to erase a page of program memory
    3318:	20 04 24    	mov.w     #0x4042, w0
    331a:	00 3b 88    	mov.w     w0, 0x760
            __asm__("push _TBLPAG");
    331c:	54 00 f8    	push      0x54
            TBLPAG = val1;
    331e:	1e 00 90    	mov.w     [w14+2], w0
    3320:	a0 02 88    	mov.w     w0, 0x54
            __builtin_tblwtl(val2, 0x0000);
    3322:	2e 00 90    	mov.w     [w14+4], w0
    3324:	80 00 eb    	clr.w     w1
    3326:	01 08 bb    	tblwtl.w  w1, [w0]
            __asm__("disi #16");            // disable interrupts for 16 cycles
    3328:	10 00 fc    	disi      #0x10
            __builtin_write_NVM();          // issue the unlock sequence and perform the write
    332a:	50 05 20    	mov.w     #0x55, w0
    332c:	30 3b 88    	mov.w     w0, 0x766
    332e:	a0 0a 20    	mov.w     #0xaa, w0
    3330:	30 3b 88    	mov.w     w0, 0x766
    3332:	61 e7 a8    	bset.b    0x761, #0x7
	...

0000333a <.L345>:
            while (NVMCONbits.WR == 1) {}   // wait until the write is complete
    333a:	01 3b 80    	mov.w     0x760, w1
    333c:	00 00 28    	mov.w     #0x8000, w0
    333e:	00 80 60    	and.w     w1, w0, w0
    3340:	00 00 e0    	cp0.w     w0
    3342:	fb ff 3a    	bra       NZ, 0x333a <.L345>
            NVMCONbits.WREN = 0;            // disable further writes to program memory
    3344:	61 c7 a9    	bclr.b    0x761, #0x6
            __asm__("pop _TBLPAG");
    3346:	54 00 f9    	pop       0x54

00003348 <.L343>:
        }
    }
}
    3348:	00 80 fa    	ulnk      
    334a:	00 00 06    	return    

0000334c <_flash_read_handler>:

void flash_read_handler(char *args) {
    334c:	14 00 fa    	lnk       #0x14
    334e:	10 0f 98    	mov.w     w0, [w14+18]
    uint16_t val1, val2, val3;
    char *arg, *remainder;
    char str[5];
    WORD temp;

    remainder = (char *)NULL;
    3350:	00 00 eb    	clr.w     w0
    3352:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    3354:	68 00 47    	add.w     w14, #0x8, w0
    3356:	00 01 78    	mov.w     w0, w2
    3358:	61 65 29    	mov.w     #0x9656, w1
    335a:	1e 08 90    	mov.w     [w14+18], w0
    335c:	39 f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    335e:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val1) != 0)
    3360:	0e 80 e8    	inc2.w    w14, w0
    3362:	80 00 78    	mov.w     w0, w1
    3364:	1e 00 78    	mov.w     [w14], w0
    3366:	df f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3368:	00 00 e0    	cp0.w     w0
    336a:	60 00 3a    	bra       NZ, 0x342c <.L355>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    336c:	68 00 47    	add.w     w14, #0x8, w0
    336e:	00 01 78    	mov.w     w0, w2
    3370:	61 65 29    	mov.w     #0x9656, w1
    3372:	00 00 eb    	clr.w     w0
    3374:	2d f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    3376:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val2) != 0)
    3378:	64 00 47    	add.w     w14, #0x4, w0
    337a:	80 00 78    	mov.w     w0, w1
    337c:	1e 00 78    	mov.w     [w14], w0
    337e:	d3 f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3380:	00 00 e0    	cp0.w     w0
    3382:	56 00 3a    	bra       NZ, 0x3430 <.L356>
        return;
    arg = str_tok_r((char *)NULL, ", ", &remainder);
    3384:	68 00 47    	add.w     w14, #0x8, w0
    3386:	00 01 78    	mov.w     w0, w2
    3388:	61 65 29    	mov.w     #0x9656, w1
    338a:	00 00 eb    	clr.w     w0
    338c:	21 f3 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    338e:	00 0f 78    	mov.w     w0, [w14]
    if (str2hex(arg, &val3) != 0)
    3390:	66 00 47    	add.w     w14, #0x6, w0
    3392:	80 00 78    	mov.w     w0, w1
    3394:	1e 00 78    	mov.w     [w14], w0
    3396:	c7 f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3398:	00 00 e0    	cp0.w     w0
    339a:	4c 00 3a    	bra       NZ, 0x3434 <.L357>
        return;

    __asm__("push _TBLPAG");
    339c:	54 00 f8    	push      0x54
    TBLPAG = val1;
    339e:	1e 00 90    	mov.w     [w14+2], w0
    33a0:	a0 02 88    	mov.w     w0, 0x54
    for (val1 = 0; val1 < val3; val2 += 2) {
    33a2:	00 00 eb    	clr.w     w0
    33a4:	10 07 98    	mov.w     w0, [w14+2]
    33a6:	3c 00 37    	bra       0x3420 <.L351>

000033a8 <.L354>:
        temp.w = __builtin_tblrdl(val2);
    33a8:	2e 00 90    	mov.w     [w14+4], w0
    33aa:	10 00 ba    	tblrdl.w  [w0], w0
    33ac:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    33ae:	0e 50 90    	mov.b     [w14+16], w0
    33b0:	00 80 fb    	ze        w0, w0
    33b2:	ea 00 47    	add.w     w14, #0xa, w1
    33b4:	7d f2 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    33b6:	d1 41 80    	mov.w     0x83a, w1
    33b8:	6a 00 47    	add.w     w14, #0xa, w0
    33ba:	01 00 01    	call      w1
        parser_putc(',');
    33bc:	c1 41 80    	mov.w     0x838, w1
    33be:	c0 c2 b3    	mov.b     #0x2c, w0
    33c0:	01 00 01    	call      w1
        hex2str_alt(temp.b[1], str);
    33c2:	1e 50 90    	mov.b     [w14+17], w0
    33c4:	00 80 fb    	ze        w0, w0
    33c6:	ea 00 47    	add.w     w14, #0xa, w1
    33c8:	73 f2 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    33ca:	d1 41 80    	mov.w     0x83a, w1
    33cc:	6a 00 47    	add.w     w14, #0xa, w0
    33ce:	01 00 01    	call      w1
        parser_putc(',');
    33d0:	c1 41 80    	mov.w     0x838, w1
    33d2:	c0 c2 b3    	mov.b     #0x2c, w0
    33d4:	01 00 01    	call      w1
        temp.w = __builtin_tblrdh(val2);
    33d6:	2e 00 90    	mov.w     [w14+4], w0
    33d8:	10 80 ba    	tblrdh.w  [w0], w0
    33da:	00 0f 98    	mov.w     w0, [w14+16]
        hex2str_alt(temp.b[0], str);
    33dc:	0e 50 90    	mov.b     [w14+16], w0
    33de:	00 80 fb    	ze        w0, w0
    33e0:	ea 00 47    	add.w     w14, #0xa, w1
    33e2:	66 f2 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    33e4:	d1 41 80    	mov.w     0x83a, w1
    33e6:	6a 00 47    	add.w     w14, #0xa, w0
    33e8:	01 00 01    	call      w1
        parser_putc(',');
    33ea:	c1 41 80    	mov.w     0x838, w1
    33ec:	c0 c2 b3    	mov.b     #0x2c, w0
    33ee:	01 00 01    	call      w1
        hex2str_alt(temp.b[1], str);
    33f0:	1e 50 90    	mov.b     [w14+17], w0
    33f2:	00 80 fb    	ze        w0, w0
    33f4:	ea 00 47    	add.w     w14, #0xa, w1
    33f6:	5c f2 07    	rcall     0x18b0 <_hex2str_alt> <.LFB3> <.LFE2>
        parser_puts(str);
    33f8:	d1 41 80    	mov.w     0x83a, w1
    33fa:	6a 00 47    	add.w     w14, #0xa, w0
    33fc:	01 00 01    	call      w1
        val1 += 4;
    33fe:	1e 00 90    	mov.w     [w14+2], w0
    3400:	64 00 40    	add.w     w0, #0x4, w0
    3402:	10 07 98    	mov.w     w0, [w14+2]
        if (val1 < val3)
    3404:	9e 00 90    	mov.w     [w14+2], w1
    3406:	3e 00 90    	mov.w     [w14+6], w0
    3408:	80 8f 50    	sub.w     w1, w0, [w15]
    340a:	04 00 31    	bra       C, 0x3414 <.L352>
            parser_putc(',');
    340c:	c1 41 80    	mov.w     0x838, w1
    340e:	c0 c2 b3    	mov.b     #0x2c, w0
    3410:	01 00 01    	call      w1
    3412:	03 00 37    	bra       0x341a <.L353>

00003414 <.L352>:
        else
            parser_puts("\r\n");
    3414:	d1 41 80    	mov.w     0x83a, w1
    3416:	30 65 29    	mov.w     #0x9653, w0
    3418:	01 00 01    	call      w1

0000341a <.L353>:
    341a:	2e 00 90    	mov.w     [w14+4], w0
    341c:	00 80 e8    	inc2.w    w0, w0
    341e:	20 07 98    	mov.w     w0, [w14+4]

00003420 <.L351>:
    3420:	9e 00 90    	mov.w     [w14+2], w1
    3422:	3e 00 90    	mov.w     [w14+6], w0
    3424:	80 8f 50    	sub.w     w1, w0, [w15]
    3426:	c0 ff 39    	bra       NC, 0x33a8 <.L354>
    }
    __asm__("pop _TBLPAG");
    3428:	54 00 f9    	pop       0x54
    342a:	05 00 37    	bra       0x3436 <.L346>

0000342c <.L355>:
    342c:	00 00 00    	nop       
    342e:	03 00 37    	bra       0x3436 <.L346>

00003430 <.L356>:
    3430:	00 00 00    	nop       
    3432:	01 00 37    	bra       0x3436 <.L346>

00003434 <.L357>:
    3434:	00 00 00    	nop       

00003436 <.L346>:
}
    3436:	00 80 fa    	ulnk      
    3438:	00 00 06    	return    

0000343a <_flash_write_handler>:

void flash_write_handler(char *args) {
    343a:	0e 00 fa    	lnk       #0xe
    343c:	60 07 98    	mov.w     w0, [w14+12]
    uint16_t val1, val2, i;
    char *arg, *remainder;
    WORD temp;

    remainder = (char *)NULL;
    343e:	00 00 eb    	clr.w     w0
    3440:	40 07 98    	mov.w     w0, [w14+8]
    arg = str_tok_r(args, ", ", &remainder);
    3442:	68 00 47    	add.w     w14, #0x8, w0
    3444:	00 01 78    	mov.w     w0, w2
    3446:	61 65 29    	mov.w     #0x9656, w1
    3448:	6e 00 90    	mov.w     [w14+12], w0
    344a:	c2 f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    344c:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val1) != 0)
    344e:	64 00 47    	add.w     w14, #0x4, w0
    3450:	80 00 78    	mov.w     w0, w1
    3452:	1e 00 90    	mov.w     [w14+2], w0
    3454:	68 f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3456:	00 00 e0    	cp0.w     w0
    3458:	98 00 3a    	bra       NZ, 0x358a <.L379>
        return;

    arg = str_tok_r((char *)NULL, ", ", &remainder);
    345a:	68 00 47    	add.w     w14, #0x8, w0
    345c:	00 01 78    	mov.w     w0, w2
    345e:	61 65 29    	mov.w     #0x9656, w1
    3460:	00 00 eb    	clr.w     w0
    3462:	b6 f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    3464:	10 07 98    	mov.w     w0, [w14+2]
    if (str2hex(arg, &val2) != 0)
    3466:	66 00 47    	add.w     w14, #0x6, w0
    3468:	80 00 78    	mov.w     w0, w1
    346a:	1e 00 90    	mov.w     [w14+2], w0
    346c:	5c f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    346e:	00 00 e0    	cp0.w     w0
    3470:	8e 00 3a    	bra       NZ, 0x358e <.L380>
        return;

    NVMCON = 0x4001;                // set up NVMCON to program a row of program memory
    3472:	10 00 24    	mov.w     #0x4001, w0
    3474:	00 3b 88    	mov.w     w0, 0x760
    __asm__("push _TBLPAG");        // save the value of TBLPAG
    3476:	54 00 f8    	push      0x54
    TBLPAG = val1;
    3478:	2e 00 90    	mov.w     [w14+4], w0
    347a:	a0 02 88    	mov.w     w0, 0x54
    val1 = val2 & 0xFFF8;
    347c:	be 00 90    	mov.w     [w14+6], w1
    347e:	80 ff 2f    	mov.w     #0xfff8, w0
    3480:	00 80 60    	and.w     w1, w0, w0
    3482:	20 07 98    	mov.w     w0, [w14+4]
    for (i = 0; i < 128; i += 2) {
    3484:	00 00 eb    	clr.w     w0
    3486:	00 0f 78    	mov.w     w0, [w14]
    3488:	0a 00 37    	bra       0x349e <.L362>

0000348a <.L363>:
        __builtin_tblwtl(val1 + i, 0xFFFF);
    348a:	2e 00 90    	mov.w     [w14+4], w0
    348c:	1e 00 40    	add.w     w0, [w14], w0
    348e:	80 80 eb    	setm.w    w1
    3490:	01 08 bb    	tblwtl.w  w1, [w0]
        __builtin_tblwth(val1 + i + 1, 0x00FF);
    3492:	2e 00 90    	mov.w     [w14+4], w0
    3494:	1e 00 40    	add.w     w0, [w14], w0
    3496:	00 00 e8    	inc.w     w0, w0
    3498:	f1 0f 20    	mov.w     #0xff, w1
    349a:	01 88 bb    	tblwth.w  w1, [w0]
    349c:	1e 8f e8    	inc2.w    [w14], [w14]

0000349e <.L362>:
    349e:	f0 07 20    	mov.w     #0x7f, w0
    34a0:	9e 00 78    	mov.w     [w14], w1
    34a2:	80 8f 50    	sub.w     w1, w0, [w15]
    34a4:	f2 ff 36    	bra       LEU, 0x348a <.L363>

000034a6 <.L377>:
    }

    for (;; val2 += 2) {
        arg = str_tok_r((char *)NULL, ", ", &remainder);
    34a6:	68 00 47    	add.w     w14, #0x8, w0
    34a8:	00 01 78    	mov.w     w0, w2
    34aa:	61 65 29    	mov.w     #0x9656, w1
    34ac:	00 00 eb    	clr.w     w0
    34ae:	90 f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    34b0:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    34b2:	1e 00 90    	mov.w     [w14+2], w0
    34b4:	00 00 e0    	cp0.w     w0
    34b6:	51 00 32    	bra       Z, 0x355a <.L381>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    34b8:	64 00 47    	add.w     w14, #0x4, w0
    34ba:	80 00 78    	mov.w     w0, w1
    34bc:	1e 00 90    	mov.w     [w14+2], w0
    34be:	33 f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    34c0:	00 00 e0    	cp0.w     w0
    34c2:	03 00 3a    	bra       NZ, 0x34ca <.L366>
    34c4:	2e 00 90    	mov.w     [w14+4], w0
    34c6:	00 40 78    	mov.b     w0, w0
    34c8:	01 00 37    	bra       0x34cc <.L367>

000034ca <.L366>:
    34ca:	00 c0 eb    	setm.b    w0

000034cc <.L367>:
    34cc:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    34ce:	68 00 47    	add.w     w14, #0x8, w0
    34d0:	00 01 78    	mov.w     w0, w2
    34d2:	61 65 29    	mov.w     #0x9656, w1
    34d4:	00 00 eb    	clr.w     w0
    34d6:	7c f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    34d8:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    34da:	1e 00 90    	mov.w     [w14+2], w0
    34dc:	00 00 e0    	cp0.w     w0
    34de:	3f 00 32    	bra       Z, 0x355e <.L382>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    34e0:	64 00 47    	add.w     w14, #0x4, w0
    34e2:	80 00 78    	mov.w     w0, w1
    34e4:	1e 00 90    	mov.w     [w14+2], w0
    34e6:	1f f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    34e8:	00 00 e0    	cp0.w     w0
    34ea:	03 00 3a    	bra       NZ, 0x34f2 <.L369>
    34ec:	2e 00 90    	mov.w     [w14+4], w0
    34ee:	00 40 78    	mov.b     w0, w0
    34f0:	01 00 37    	bra       0x34f4 <.L370>

000034f2 <.L369>:
    34f2:	00 c0 eb    	setm.b    w0

000034f4 <.L370>:
    34f4:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwtl(val2, temp.w);
    34f6:	de 00 90    	mov.w     [w14+10], w1
    34f8:	3e 00 90    	mov.w     [w14+6], w0
    34fa:	01 08 bb    	tblwtl.w  w1, [w0]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    34fc:	68 00 47    	add.w     w14, #0x8, w0
    34fe:	00 01 78    	mov.w     w0, w2
    3500:	61 65 29    	mov.w     #0x9656, w1
    3502:	00 00 eb    	clr.w     w0
    3504:	65 f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    3506:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    3508:	1e 00 90    	mov.w     [w14+2], w0
    350a:	00 00 e0    	cp0.w     w0
    350c:	2a 00 32    	bra       Z, 0x3562 <.L383>
            break;
        temp.b[0] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0xFF;
    350e:	64 00 47    	add.w     w14, #0x4, w0
    3510:	80 00 78    	mov.w     w0, w1
    3512:	1e 00 90    	mov.w     [w14+2], w0
    3514:	08 f1 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    3516:	00 00 e0    	cp0.w     w0
    3518:	03 00 3a    	bra       NZ, 0x3520 <.L372>
    351a:	2e 00 90    	mov.w     [w14+4], w0
    351c:	00 40 78    	mov.b     w0, w0
    351e:	01 00 37    	bra       0x3522 <.L373>

00003520 <.L372>:
    3520:	00 c0 eb    	setm.b    w0

00003522 <.L373>:
    3522:	20 4f 98    	mov.b     w0, [w14+10]

        arg = str_tok_r((char *)NULL, ", ", &remainder);
    3524:	68 00 47    	add.w     w14, #0x8, w0
    3526:	00 01 78    	mov.w     w0, w2
    3528:	61 65 29    	mov.w     #0x9656, w1
    352a:	00 00 eb    	clr.w     w0
    352c:	51 f2 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    352e:	10 07 98    	mov.w     w0, [w14+2]
        if (!arg) 
    3530:	1e 00 90    	mov.w     [w14+2], w0
    3532:	00 00 e0    	cp0.w     w0
    3534:	18 00 32    	bra       Z, 0x3566 <.L384>
            break;
        temp.b[1] = (str2hex(arg, &val1) == 0) ? (uint8_t)val1 : 0x00;
    3536:	64 00 47    	add.w     w14, #0x4, w0
    3538:	80 00 78    	mov.w     w0, w1
    353a:	1e 00 90    	mov.w     [w14+2], w0
    353c:	f4 f0 07    	rcall     0x1726 <_str2hex> <.L0> <.LFB0> <.Ltext0>
    353e:	00 00 e0    	cp0.w     w0
    3540:	03 00 3a    	bra       NZ, 0x3548 <.L375>
    3542:	2e 00 90    	mov.w     [w14+4], w0
    3544:	00 40 78    	mov.b     w0, w0
    3546:	01 00 37    	bra       0x354a <.L376>

00003548 <.L375>:
    3548:	00 40 eb    	clr.b     w0

0000354a <.L376>:
    354a:	30 4f 98    	mov.b     w0, [w14+11]

        __builtin_tblwth(val2, temp.w);
    354c:	de 00 90    	mov.w     [w14+10], w1
    354e:	3e 00 90    	mov.w     [w14+6], w0
    3550:	01 88 bb    	tblwth.w  w1, [w0]
    3552:	3e 00 90    	mov.w     [w14+6], w0
    3554:	00 80 e8    	inc2.w    w0, w0
    3556:	30 07 98    	mov.w     w0, [w14+6]
    }
    3558:	a6 ff 37    	bra       0x34a6 <.L377>

0000355a <.L381>:
    355a:	00 00 00    	nop       
    355c:	05 00 37    	bra       0x3568 <.L365>

0000355e <.L382>:
    355e:	00 00 00    	nop       
    3560:	03 00 37    	bra       0x3568 <.L365>

00003562 <.L383>:
    3562:	00 00 00    	nop       
    3564:	01 00 37    	bra       0x3568 <.L365>

00003566 <.L384>:
    3566:	00 00 00    	nop       

00003568 <.L365>:

    __asm__("disi #16");            // disable interrupts for 16 cycles
    3568:	10 00 fc    	disi      #0x10
    __builtin_write_NVM();          // issue the unlock sequence and perform the write
    356a:	50 05 20    	mov.w     #0x55, w0
    356c:	30 3b 88    	mov.w     w0, 0x766
    356e:	a0 0a 20    	mov.w     #0xaa, w0
    3570:	30 3b 88    	mov.w     w0, 0x766
    3572:	61 e7 a8    	bset.b    0x761, #0x7
	...

0000357a <.L378>:
    while (NVMCONbits.WR == 1) {}   // wait until the write is done
    357a:	01 3b 80    	mov.w     0x760, w1
    357c:	00 00 28    	mov.w     #0x8000, w0
    357e:	00 80 60    	and.w     w1, w0, w0
    3580:	00 00 e0    	cp0.w     w0
    3582:	fb ff 3a    	bra       NZ, 0x357a <.L378>
    NVMCONbits.WREN = 0;            // disable further writes to program memory
    3584:	61 c7 a9    	bclr.b    0x761, #0x6
    __asm__("pop _TBLPAG");         // restore original value to TBLPAG
    3586:	54 00 f9    	pop       0x54
    3588:	03 00 37    	bra       0x3590 <.L358>

0000358a <.L379>:
    358a:	00 00 00    	nop       
    358c:	01 00 37    	bra       0x3590 <.L358>

0000358e <.L380>:
    358e:	00 00 00    	nop       

00003590 <.L358>:
}
    3590:	00 80 fa    	ulnk      
    3592:	00 00 06    	return    

00003594 <_init_parser>:

// Parser public methods
void init_parser(void) {
    3594:	00 00 fa    	lnk       #0x0
    cdc_cmd_buffer_pos = cdc_cmd_buffer;
    3596:	e0 48 21    	mov.w     #0x148e, w0
    3598:	e0 41 88    	mov.w     w0, 0x83c
    cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    359a:	00 08 20    	mov.w     #0x80, w0
    359c:	00 42 88    	mov.w     w0, 0x840

    ble_cmd_buffer_pos = ble_cmd_buffer;
    359e:	e0 50 21    	mov.w     #0x150e, w0
    35a0:	f0 41 88    	mov.w     w0, 0x83e
    ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    35a2:	00 08 20    	mov.w     #0x80, w0
    35a4:	10 42 88    	mov.w     w0, 0x842

    parser_state = parser_disconnected;
    35a6:	a0 5b 23    	mov.w     #0x35ba, w0
    35a8:	90 41 88    	mov.w     w0, 0x832
    parser_last_state = (STATE_HANDLER_T)NULL;
    35aa:	34 28 ef    	clr.w     0x834
    parser_task = (STATE_HANDLER_T)NULL;
    35ac:	36 28 ef    	clr.w     0x836

    parser_putc = cdc_putc;
    35ae:	40 36 25    	mov.w     #0x5364, w0
    35b0:	c0 41 88    	mov.w     w0, 0x838
    parser_puts = cdc_puts;
    35b2:	20 3d 25    	mov.w     #0x53d2, w0
    35b4:	d0 41 88    	mov.w     w0, 0x83a
}
    35b6:	00 80 fa    	ulnk      
    35b8:	00 00 06    	return    

000035ba <_parser_disconnected>:

void parser_disconnected(void) {
    35ba:	08 00 fa    	lnk       #0x8
    uint8_t ch;
    uint16_t i;
    char *command, *remainder;

    if (parser_state != parser_last_state) {
    35bc:	91 41 80    	mov.w     0x832, w1
    35be:	a0 41 80    	mov.w     0x834, w0
    35c0:	80 8f 50    	sub.w     w1, w0, [w15]
    35c2:	06 00 32    	bra       Z, 0x35d0 <.L387>
        parser_last_state = parser_state;
    35c4:	90 41 80    	mov.w     0x832, w0
    35c6:	a0 41 88    	mov.w     w0, 0x834

        ble_cmd_buffer_pos = ble_cmd_buffer;
    35c8:	e0 50 21    	mov.w     #0x150e, w0
    35ca:	f0 41 88    	mov.w     w0, 0x83e
        ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    35cc:	00 08 20    	mov.w     #0x80, w0
    35ce:	10 42 88    	mov.w     w0, 0x842

000035d0 <.L387>:
    }

    if (parser_task)
    35d0:	b0 41 80    	mov.w     0x836, w0
    35d2:	00 00 e0    	cp0.w     w0
    35d4:	02 00 32    	bra       Z, 0x35da <.L388>
        parser_task();
    35d6:	b0 41 80    	mov.w     0x836, w0
    35d8:	00 00 01    	call      w0

000035da <.L388>:

    if (ble_in_waiting() > 0) {
    35da:	f7 07 07    	rcall     0x45ca <_ble_in_waiting> <.LFB36> <.LFE35>
    35dc:	00 00 e0    	cp0.w     w0
    35de:	48 00 32    	bra       Z, 0x3670 <.L389>
        ch = ble_getc();
    35e0:	ff 07 07    	rcall     0x45e0 <_ble_getc> <.LFB38> <.LFE37>
    35e2:	20 47 98    	mov.b     w0, [w14+2]
        if (ble_cmd_buffer_left == 1) {
    35e4:	10 42 80    	mov.w     0x842, w0
    35e6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    35e8:	0d 00 3a    	bra       NZ, 0x3604 <.L390>
            ble_cmd_buffer_pos = ble_cmd_buffer;
    35ea:	e0 50 21    	mov.w     #0x150e, w0
    35ec:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    35ee:	00 08 20    	mov.w     #0x80, w0
    35f0:	10 42 88    	mov.w     w0, 0x842

            *ble_cmd_buffer_pos++ = ch;
    35f2:	f0 41 80    	mov.w     0x83e, w0
    35f4:	ae 40 90    	mov.b     [w14+2], w1
    35f6:	01 48 78    	mov.b     w1, [w0]
    35f8:	00 00 e8    	inc.w     w0, w0
    35fa:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left--;
    35fc:	10 42 80    	mov.w     0x842, w0
    35fe:	00 00 e9    	dec.w     w0, w0
    3600:	10 42 88    	mov.w     w0, 0x842
    3602:	36 00 37    	bra       0x3670 <.L389>

00003604 <.L390>:
        } else if (ch == '%') {
    3604:	ae 40 90    	mov.b     [w14+2], w1
    3606:	50 c2 b3    	mov.b     #0x25, w0
    3608:	80 cf 50    	sub.b     w1, w0, [w15]
    360a:	2a 00 3a    	bra       NZ, 0x3660 <.L391>
            if ((ble_cmd_buffer[0] == '%') && (ble_cmd_buffer_left < CMD_BUFFER_LENGTH)) {
    360c:	e0 50 21    	mov.w     #0x150e, w0
    360e:	90 40 78    	mov.b     [w0], w1
    3610:	50 c2 b3    	mov.b     #0x25, w0
    3612:	80 cf 50    	sub.b     w1, w0, [w15]
    3614:	18 00 3a    	bra       NZ, 0x3646 <.L392>
    3616:	11 42 80    	mov.w     0x842, w1
    3618:	f0 07 20    	mov.w     #0x7f, w0
    361a:	80 8f 50    	sub.w     w1, w0, [w15]
    361c:	14 00 3e    	bra       GTU, 0x3646 <.L392>
                *ble_cmd_buffer_pos++ = ch;
    361e:	f0 41 80    	mov.w     0x83e, w0
    3620:	ae 40 90    	mov.b     [w14+2], w1
    3622:	01 48 78    	mov.b     w1, [w0]
    3624:	00 00 e8    	inc.w     w0, w0
    3626:	f0 41 88    	mov.w     w0, 0x83e
                *ble_cmd_buffer_pos = '\0';
    3628:	f0 41 80    	mov.w     0x83e, w0
    362a:	80 40 eb    	clr.b     w1
    362c:	01 48 78    	mov.b     w1, [w0]

                if (str_cmp(ble_cmd_buffer, "%STREAM_OPEN%") == 0)
    362e:	91 65 29    	mov.w     #0x9659, w1
    3630:	e0 50 21    	mov.w     #0x150e, w0
    3632:	73 f1 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3634:	00 00 e0    	cp0.w     w0
    3636:	02 00 3a    	bra       NZ, 0x363c <.L393>
                    parser_state = parser_connected;
    3638:	00 72 23    	mov.w     #0x3720, w0
    363a:	90 41 88    	mov.w     w0, 0x832

0000363c <.L393>:

                ble_cmd_buffer_pos = ble_cmd_buffer;
    363c:	e0 50 21    	mov.w     #0x150e, w0
    363e:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3640:	00 08 20    	mov.w     #0x80, w0
    3642:	10 42 88    	mov.w     w0, 0x842
    3644:	15 00 37    	bra       0x3670 <.L389>

00003646 <.L392>:
            } else {
                ble_cmd_buffer_pos = ble_cmd_buffer;
    3646:	e0 50 21    	mov.w     #0x150e, w0
    3648:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    364a:	00 08 20    	mov.w     #0x80, w0
    364c:	10 42 88    	mov.w     w0, 0x842

                *ble_cmd_buffer_pos++ = ch;
    364e:	f0 41 80    	mov.w     0x83e, w0
    3650:	ae 40 90    	mov.b     [w14+2], w1
    3652:	01 48 78    	mov.b     w1, [w0]
    3654:	00 00 e8    	inc.w     w0, w0
    3656:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left--;
    3658:	10 42 80    	mov.w     0x842, w0
    365a:	00 00 e9    	dec.w     w0, w0
    365c:	10 42 88    	mov.w     w0, 0x842
    365e:	08 00 37    	bra       0x3670 <.L389>

00003660 <.L391>:
            }
        } else {
            *ble_cmd_buffer_pos++ = ch;
    3660:	f0 41 80    	mov.w     0x83e, w0
    3662:	ae 40 90    	mov.b     [w14+2], w1
    3664:	01 48 78    	mov.b     w1, [w0]
    3666:	00 00 e8    	inc.w     w0, w0
    3668:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left--;
    366a:	10 42 80    	mov.w     0x842, w0
    366c:	00 00 e9    	dec.w     w0, w0
    366e:	10 42 88    	mov.w     w0, 0x842

00003670 <.L389>:
        }
    }

    if (cdc_in_waiting() > 0) {
    3670:	6f 0e 07    	rcall     0x5350 <_cdc_in_waiting> <.LFB5> <.LFE4>
    3672:	00 00 e0    	cp0.w     w0
    3674:	4e 00 32    	bra       Z, 0x3712 <.L395>
        ch = cdc_getc();
    3676:	92 0e 07    	rcall     0x539c <_cdc_getc> <.LFB8> <.LFE7>
    3678:	20 47 98    	mov.b     w0, [w14+2]
        if (cdc_cmd_buffer_left == 1) {
    367a:	00 42 80    	mov.w     0x840, w0
    367c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    367e:	0d 00 3a    	bra       NZ, 0x369a <.L396>
            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    3680:	e0 48 21    	mov.w     #0x148e, w0
    3682:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3684:	00 08 20    	mov.w     #0x80, w0
    3686:	00 42 88    	mov.w     w0, 0x840

            *cdc_cmd_buffer_pos++ = ch;
    3688:	e0 41 80    	mov.w     0x83c, w0
    368a:	ae 40 90    	mov.b     [w14+2], w1
    368c:	01 48 78    	mov.b     w1, [w0]
    368e:	00 00 e8    	inc.w     w0, w0
    3690:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left--;
    3692:	00 42 80    	mov.w     0x840, w0
    3694:	00 00 e9    	dec.w     w0, w0
    3696:	00 42 88    	mov.w     w0, 0x840
    3698:	3c 00 37    	bra       0x3712 <.L395>

0000369a <.L396>:
        } else if (ch == '\r') {
    369a:	2e 40 90    	mov.b     [w14+2], w0
    369c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    369e:	31 00 3a    	bra       NZ, 0x3702 <.L397>
            *cdc_cmd_buffer_pos = '\0';
    36a0:	e0 41 80    	mov.w     0x83c, w0
    36a2:	80 40 eb    	clr.b     w1
    36a4:	01 48 78    	mov.b     w1, [w0]

//            cdc_putc('[');
//            cdc_puts(cdc_cmd_buffer);
//            cdc_puts("]\r\n");

            parser_putc = cdc_putc;
    36a6:	40 36 25    	mov.w     #0x5364, w0
    36a8:	c0 41 88    	mov.w     w0, 0x838
            parser_puts = cdc_puts;
    36aa:	20 3d 25    	mov.w     #0x53d2, w0
    36ac:	d0 41 88    	mov.w     w0, 0x83a

            remainder = (char *)NULL;
    36ae:	00 00 eb    	clr.w     w0
    36b0:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(cdc_cmd_buffer, ":, ", &remainder);
    36b2:	66 00 47    	add.w     w14, #0x6, w0
    36b4:	00 01 78    	mov.w     w0, w2
    36b6:	91 63 29    	mov.w     #0x9639, w1
    36b8:	e0 48 21    	mov.w     #0x148e, w0
    36ba:	8a f1 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    36bc:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    36be:	2e 00 90    	mov.w     [w14+4], w0
    36c0:	00 00 e0    	cp0.w     w0
    36c2:	1a 00 32    	bra       Z, 0x36f8 <.L398>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    36c4:	00 00 eb    	clr.w     w0
    36c6:	00 0f 78    	mov.w     w0, [w14]
    36c8:	14 00 37    	bra       0x36f2 <.L399>

000036ca <.L401>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    36ca:	1e 00 78    	mov.w     [w14], w0
    36cc:	c2 00 dd    	sl.w      w0, #0x2, w1
    36ce:	20 30 21    	mov.w     #0x1302, w0
    36d0:	00 80 40    	add.w     w1, w0, w0
    36d2:	10 00 78    	mov.w     [w0], w0
    36d4:	80 00 78    	mov.w     w0, w1
    36d6:	2e 00 90    	mov.w     [w14+4], w0
    36d8:	20 f1 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    36da:	00 00 e0    	cp0.w     w0
    36dc:	09 00 3a    	bra       NZ, 0x36f0 <.L400>
                        root_table[i].handler(remainder);
    36de:	1e 00 78    	mov.w     [w14], w0
    36e0:	42 00 dd    	sl.w      w0, #0x2, w0
    36e2:	80 80 e8    	inc2.w    w0, w1
    36e4:	20 30 21    	mov.w     #0x1302, w0
    36e6:	00 80 40    	add.w     w1, w0, w0
    36e8:	90 00 78    	mov.w     [w0], w1
    36ea:	3e 00 90    	mov.w     [w14+6], w0
    36ec:	01 00 01    	call      w1
                        break;
    36ee:	04 00 37    	bra       0x36f8 <.L398>

000036f0 <.L400>:
    36f0:	1e 0f e8    	inc.w     [w14], [w14]

000036f2 <.L399>:
    36f2:	1e 00 78    	mov.w     [w14], w0
    36f4:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    36f6:	e9 ff 36    	bra       LEU, 0x36ca <.L401>

000036f8 <.L398>:
                    }
                }
            }

            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    36f8:	e0 48 21    	mov.w     #0x148e, w0
    36fa:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    36fc:	00 08 20    	mov.w     #0x80, w0
    36fe:	00 42 88    	mov.w     w0, 0x840
    3700:	08 00 37    	bra       0x3712 <.L395>

00003702 <.L397>:
        } else {
            *cdc_cmd_buffer_pos++ = ch;
    3702:	e0 41 80    	mov.w     0x83c, w0
    3704:	ae 40 90    	mov.b     [w14+2], w1
    3706:	01 48 78    	mov.b     w1, [w0]
    3708:	00 00 e8    	inc.w     w0, w0
    370a:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left--;
    370c:	00 42 80    	mov.w     0x840, w0
    370e:	00 00 e9    	dec.w     w0, w0
    3710:	00 42 88    	mov.w     w0, 0x840

00003712 <.L395>:
        }
    }

    if (parser_state != parser_last_state) {
    3712:	91 41 80    	mov.w     0x832, w1
    3714:	a0 41 80    	mov.w     0x834, w0
    3716:	80 8f 50    	sub.w     w1, w0, [w15]
    3718:	01 00 32    	bra       Z, 0x371c <.L386>
        parser_task = (STATE_HANDLER_T)NULL;
    371a:	36 28 ef    	clr.w     0x836

0000371c <.L386>:
    }
}
    371c:	00 80 fa    	ulnk      
    371e:	00 00 06    	return    

00003720 <_parser_connected>:

void parser_connected(void) {
    3720:	08 00 fa    	lnk       #0x8
    uint8_t ch;
    uint16_t i;
    char *command, *remainder;

    if (parser_state != parser_last_state) {
    3722:	91 41 80    	mov.w     0x832, w1
    3724:	a0 41 80    	mov.w     0x834, w0
    3726:	80 8f 50    	sub.w     w1, w0, [w15]
    3728:	07 00 32    	bra       Z, 0x3738 <.L404>
        parser_last_state = parser_state;
    372a:	90 41 80    	mov.w     0x832, w0
    372c:	a0 41 88    	mov.w     w0, 0x834

        LED1 = ON;
    372e:	dc e2 a8    	bset.b    0x2dc, #0x7

        ble_cmd_buffer_pos = ble_cmd_buffer;
    3730:	e0 50 21    	mov.w     #0x150e, w0
    3732:	f0 41 88    	mov.w     w0, 0x83e
        ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3734:	00 08 20    	mov.w     #0x80, w0
    3736:	10 42 88    	mov.w     w0, 0x842

00003738 <.L404>:
    }

    if (parser_task)
    3738:	b0 41 80    	mov.w     0x836, w0
    373a:	00 00 e0    	cp0.w     w0
    373c:	02 00 32    	bra       Z, 0x3742 <.L405>
        parser_task();
    373e:	b0 41 80    	mov.w     0x836, w0
    3740:	00 00 01    	call      w0

00003742 <.L405>:

    if (ble_in_waiting() > 0) {
    3742:	43 07 07    	rcall     0x45ca <_ble_in_waiting> <.LFB36> <.LFE35>
    3744:	00 00 e0    	cp0.w     w0
    3746:	7c 00 32    	bra       Z, 0x3840 <.L406>
        ch = ble_getc();
    3748:	4b 07 07    	rcall     0x45e0 <_ble_getc> <.LFB38> <.LFE37>
    374a:	20 47 98    	mov.b     w0, [w14+2]
        if (ble_cmd_buffer_left == 1) {
    374c:	10 42 80    	mov.w     0x842, w0
    374e:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    3750:	0d 00 3a    	bra       NZ, 0x376c <.L407>
            ble_cmd_buffer_pos = ble_cmd_buffer;
    3752:	e0 50 21    	mov.w     #0x150e, w0
    3754:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3756:	00 08 20    	mov.w     #0x80, w0
    3758:	10 42 88    	mov.w     w0, 0x842

            *ble_cmd_buffer_pos++ = ch;
    375a:	f0 41 80    	mov.w     0x83e, w0
    375c:	ae 40 90    	mov.b     [w14+2], w1
    375e:	01 48 78    	mov.b     w1, [w0]
    3760:	00 00 e8    	inc.w     w0, w0
    3762:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left--;
    3764:	10 42 80    	mov.w     0x842, w0
    3766:	00 00 e9    	dec.w     w0, w0
    3768:	10 42 88    	mov.w     w0, 0x842
    376a:	6a 00 37    	bra       0x3840 <.L406>

0000376c <.L407>:
        } else if (ch == '%') {
    376c:	ae 40 90    	mov.b     [w14+2], w1
    376e:	50 c2 b3    	mov.b     #0x25, w0
    3770:	80 cf 50    	sub.b     w1, w0, [w15]
    3772:	2a 00 3a    	bra       NZ, 0x37c8 <.L408>
            if ((ble_cmd_buffer[0] == '%') && (ble_cmd_buffer_left < CMD_BUFFER_LENGTH)) {
    3774:	e0 50 21    	mov.w     #0x150e, w0
    3776:	90 40 78    	mov.b     [w0], w1
    3778:	50 c2 b3    	mov.b     #0x25, w0
    377a:	80 cf 50    	sub.b     w1, w0, [w15]
    377c:	18 00 3a    	bra       NZ, 0x37ae <.L409>
    377e:	11 42 80    	mov.w     0x842, w1
    3780:	f0 07 20    	mov.w     #0x7f, w0
    3782:	80 8f 50    	sub.w     w1, w0, [w15]
    3784:	14 00 3e    	bra       GTU, 0x37ae <.L409>
                *ble_cmd_buffer_pos++ = ch;
    3786:	f0 41 80    	mov.w     0x83e, w0
    3788:	ae 40 90    	mov.b     [w14+2], w1
    378a:	01 48 78    	mov.b     w1, [w0]
    378c:	00 00 e8    	inc.w     w0, w0
    378e:	f0 41 88    	mov.w     w0, 0x83e
                *ble_cmd_buffer_pos = '\0';
    3790:	f0 41 80    	mov.w     0x83e, w0
    3792:	80 40 eb    	clr.b     w1
    3794:	01 48 78    	mov.b     w1, [w0]

                if (str_cmp(ble_cmd_buffer, "%DISCONNECT%") == 0)
    3796:	71 66 29    	mov.w     #0x9667, w1
    3798:	e0 50 21    	mov.w     #0x150e, w0
    379a:	bf f0 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    379c:	00 00 e0    	cp0.w     w0
    379e:	02 00 3a    	bra       NZ, 0x37a4 <.L410>
                    parser_state = parser_disconnected;
    37a0:	a0 5b 23    	mov.w     #0x35ba, w0
    37a2:	90 41 88    	mov.w     w0, 0x832

000037a4 <.L410>:

                ble_cmd_buffer_pos = ble_cmd_buffer;
    37a4:	e0 50 21    	mov.w     #0x150e, w0
    37a6:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    37a8:	00 08 20    	mov.w     #0x80, w0
    37aa:	10 42 88    	mov.w     w0, 0x842
    37ac:	49 00 37    	bra       0x3840 <.L406>

000037ae <.L409>:
            } else {
                ble_cmd_buffer_pos = ble_cmd_buffer;
    37ae:	e0 50 21    	mov.w     #0x150e, w0
    37b0:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    37b2:	00 08 20    	mov.w     #0x80, w0
    37b4:	10 42 88    	mov.w     w0, 0x842

                *ble_cmd_buffer_pos++ = ch;
    37b6:	f0 41 80    	mov.w     0x83e, w0
    37b8:	ae 40 90    	mov.b     [w14+2], w1
    37ba:	01 48 78    	mov.b     w1, [w0]
    37bc:	00 00 e8    	inc.w     w0, w0
    37be:	f0 41 88    	mov.w     w0, 0x83e
                ble_cmd_buffer_left--;
    37c0:	10 42 80    	mov.w     0x842, w0
    37c2:	00 00 e9    	dec.w     w0, w0
    37c4:	10 42 88    	mov.w     w0, 0x842
    37c6:	3c 00 37    	bra       0x3840 <.L406>

000037c8 <.L408>:
            }
        } else if (ch == '\r') {
    37c8:	2e 40 90    	mov.b     [w14+2], w0
    37ca:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    37cc:	31 00 3a    	bra       NZ, 0x3830 <.L412>
            *ble_cmd_buffer_pos = '\0';
    37ce:	f0 41 80    	mov.w     0x83e, w0
    37d0:	80 40 eb    	clr.b     w1
    37d2:	01 48 78    	mov.b     w1, [w0]

//            ble_putc('[');
//            ble_puts(ble_cmd_buffer);
//            ble_puts("]\n\r");

            parser_putc = ble_putc;
    37d4:	20 5d 24    	mov.w     #0x45d2, w0
    37d6:	c0 41 88    	mov.w     w0, 0x838
            parser_puts = ble_puts;
    37d8:	80 5e 24    	mov.w     #0x45e8, w0
    37da:	d0 41 88    	mov.w     w0, 0x83a

            remainder = (char *)NULL;
    37dc:	00 00 eb    	clr.w     w0
    37de:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(ble_cmd_buffer, ":, ", &remainder);
    37e0:	66 00 47    	add.w     w14, #0x6, w0
    37e2:	00 01 78    	mov.w     w0, w2
    37e4:	91 63 29    	mov.w     #0x9639, w1
    37e6:	e0 50 21    	mov.w     #0x150e, w0
    37e8:	f3 f0 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    37ea:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    37ec:	2e 00 90    	mov.w     [w14+4], w0
    37ee:	00 00 e0    	cp0.w     w0
    37f0:	1a 00 32    	bra       Z, 0x3826 <.L413>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    37f2:	00 00 eb    	clr.w     w0
    37f4:	00 0f 78    	mov.w     w0, [w14]
    37f6:	14 00 37    	bra       0x3820 <.L414>

000037f8 <.L416>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    37f8:	1e 00 78    	mov.w     [w14], w0
    37fa:	c2 00 dd    	sl.w      w0, #0x2, w1
    37fc:	20 30 21    	mov.w     #0x1302, w0
    37fe:	00 80 40    	add.w     w1, w0, w0
    3800:	10 00 78    	mov.w     [w0], w0
    3802:	80 00 78    	mov.w     w0, w1
    3804:	2e 00 90    	mov.w     [w14+4], w0
    3806:	89 f0 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    3808:	00 00 e0    	cp0.w     w0
    380a:	09 00 3a    	bra       NZ, 0x381e <.L415>
                        root_table[i].handler(remainder);
    380c:	1e 00 78    	mov.w     [w14], w0
    380e:	42 00 dd    	sl.w      w0, #0x2, w0
    3810:	80 80 e8    	inc2.w    w0, w1
    3812:	20 30 21    	mov.w     #0x1302, w0
    3814:	00 80 40    	add.w     w1, w0, w0
    3816:	90 00 78    	mov.w     [w0], w1
    3818:	3e 00 90    	mov.w     [w14+6], w0
    381a:	01 00 01    	call      w1
                        break;
    381c:	04 00 37    	bra       0x3826 <.L413>

0000381e <.L415>:
    381e:	1e 0f e8    	inc.w     [w14], [w14]

00003820 <.L414>:
    3820:	1e 00 78    	mov.w     [w14], w0
    3822:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    3824:	e9 ff 36    	bra       LEU, 0x37f8 <.L416>

00003826 <.L413>:
                    }
                }
            }

            ble_cmd_buffer_pos = ble_cmd_buffer;
    3826:	e0 50 21    	mov.w     #0x150e, w0
    3828:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left = CMD_BUFFER_LENGTH;
    382a:	00 08 20    	mov.w     #0x80, w0
    382c:	10 42 88    	mov.w     w0, 0x842
    382e:	08 00 37    	bra       0x3840 <.L406>

00003830 <.L412>:
        } else {
            *ble_cmd_buffer_pos++ = ch;
    3830:	f0 41 80    	mov.w     0x83e, w0
    3832:	ae 40 90    	mov.b     [w14+2], w1
    3834:	01 48 78    	mov.b     w1, [w0]
    3836:	00 00 e8    	inc.w     w0, w0
    3838:	f0 41 88    	mov.w     w0, 0x83e
            ble_cmd_buffer_left--;
    383a:	10 42 80    	mov.w     0x842, w0
    383c:	00 00 e9    	dec.w     w0, w0
    383e:	10 42 88    	mov.w     w0, 0x842

00003840 <.L406>:
        }
    }

    if (cdc_in_waiting() > 0) {
    3840:	87 0d 07    	rcall     0x5350 <_cdc_in_waiting> <.LFB5> <.LFE4>
    3842:	00 00 e0    	cp0.w     w0
    3844:	4e 00 32    	bra       Z, 0x38e2 <.L417>
        ch = cdc_getc();
    3846:	aa 0d 07    	rcall     0x539c <_cdc_getc> <.LFB8> <.LFE7>
    3848:	20 47 98    	mov.b     w0, [w14+2]
        if (cdc_cmd_buffer_left == 1) {
    384a:	00 42 80    	mov.w     0x840, w0
    384c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    384e:	0d 00 3a    	bra       NZ, 0x386a <.L418>
            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    3850:	e0 48 21    	mov.w     #0x148e, w0
    3852:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    3854:	00 08 20    	mov.w     #0x80, w0
    3856:	00 42 88    	mov.w     w0, 0x840

            *cdc_cmd_buffer_pos++ = ch;
    3858:	e0 41 80    	mov.w     0x83c, w0
    385a:	ae 40 90    	mov.b     [w14+2], w1
    385c:	01 48 78    	mov.b     w1, [w0]
    385e:	00 00 e8    	inc.w     w0, w0
    3860:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left--;
    3862:	00 42 80    	mov.w     0x840, w0
    3864:	00 00 e9    	dec.w     w0, w0
    3866:	00 42 88    	mov.w     w0, 0x840
    3868:	3c 00 37    	bra       0x38e2 <.L417>

0000386a <.L418>:
        } else if (ch == '\r') {
    386a:	2e 40 90    	mov.b     [w14+2], w0
    386c:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    386e:	31 00 3a    	bra       NZ, 0x38d2 <.L419>
            *cdc_cmd_buffer_pos = '\0';
    3870:	e0 41 80    	mov.w     0x83c, w0
    3872:	80 40 eb    	clr.b     w1
    3874:	01 48 78    	mov.b     w1, [w0]

//            cdc_putc('[');
//            cdc_puts(cdc_cmd_buffer);
//            cdc_puts("]\r\n");

            parser_putc = cdc_putc;
    3876:	40 36 25    	mov.w     #0x5364, w0
    3878:	c0 41 88    	mov.w     w0, 0x838
            parser_puts = cdc_puts;
    387a:	20 3d 25    	mov.w     #0x53d2, w0
    387c:	d0 41 88    	mov.w     w0, 0x83a

            remainder = (char *)NULL;
    387e:	00 00 eb    	clr.w     w0
    3880:	30 07 98    	mov.w     w0, [w14+6]
            command = str_tok_r(cdc_cmd_buffer, ":, ", &remainder);
    3882:	66 00 47    	add.w     w14, #0x6, w0
    3884:	00 01 78    	mov.w     w0, w2
    3886:	91 63 29    	mov.w     #0x9639, w1
    3888:	e0 48 21    	mov.w     #0x148e, w0
    388a:	a2 f0 07    	rcall     0x19d0 <_str_tok_r> <.LFB6> <.LFE5>
    388c:	20 07 98    	mov.w     w0, [w14+4]
            if (command) {
    388e:	2e 00 90    	mov.w     [w14+4], w0
    3890:	00 00 e0    	cp0.w     w0
    3892:	1a 00 32    	bra       Z, 0x38c8 <.L420>
                for (i = 0; i < ROOT_TABLE_ENTRIES; i++) {
    3894:	00 00 eb    	clr.w     w0
    3896:	00 0f 78    	mov.w     w0, [w14]
    3898:	14 00 37    	bra       0x38c2 <.L421>

0000389a <.L423>:
                    if (str_cmp(command, root_table[i].command) == 0) {
    389a:	1e 00 78    	mov.w     [w14], w0
    389c:	c2 00 dd    	sl.w      w0, #0x2, w1
    389e:	20 30 21    	mov.w     #0x1302, w0
    38a0:	00 80 40    	add.w     w1, w0, w0
    38a2:	10 00 78    	mov.w     [w0], w0
    38a4:	80 00 78    	mov.w     w0, w1
    38a6:	2e 00 90    	mov.w     [w14+4], w0
    38a8:	38 f0 07    	rcall     0x191a <_str_cmp> <.LFB4> <.LFE3>
    38aa:	00 00 e0    	cp0.w     w0
    38ac:	09 00 3a    	bra       NZ, 0x38c0 <.L422>
                        root_table[i].handler(remainder);
    38ae:	1e 00 78    	mov.w     [w14], w0
    38b0:	42 00 dd    	sl.w      w0, #0x2, w0
    38b2:	80 80 e8    	inc2.w    w0, w1
    38b4:	20 30 21    	mov.w     #0x1302, w0
    38b6:	00 80 40    	add.w     w1, w0, w0
    38b8:	90 00 78    	mov.w     [w0], w1
    38ba:	3e 00 90    	mov.w     [w14+6], w0
    38bc:	01 00 01    	call      w1
                        break;
    38be:	04 00 37    	bra       0x38c8 <.L420>

000038c0 <.L422>:
    38c0:	1e 0f e8    	inc.w     [w14], [w14]

000038c2 <.L421>:
    38c2:	1e 00 78    	mov.w     [w14], w0
    38c4:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    38c6:	e9 ff 36    	bra       LEU, 0x389a <.L423>

000038c8 <.L420>:
                    }
                }
            }

            cdc_cmd_buffer_pos = cdc_cmd_buffer;
    38c8:	e0 48 21    	mov.w     #0x148e, w0
    38ca:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left = CMD_BUFFER_LENGTH;
    38cc:	00 08 20    	mov.w     #0x80, w0
    38ce:	00 42 88    	mov.w     w0, 0x840
    38d0:	08 00 37    	bra       0x38e2 <.L417>

000038d2 <.L419>:
        } else {
            *cdc_cmd_buffer_pos++ = ch;
    38d2:	e0 41 80    	mov.w     0x83c, w0
    38d4:	ae 40 90    	mov.b     [w14+2], w1
    38d6:	01 48 78    	mov.b     w1, [w0]
    38d8:	00 00 e8    	inc.w     w0, w0
    38da:	e0 41 88    	mov.w     w0, 0x83c
            cdc_cmd_buffer_left--;
    38dc:	00 42 80    	mov.w     0x840, w0
    38de:	00 00 e9    	dec.w     w0, w0
    38e0:	00 42 88    	mov.w     w0, 0x840

000038e2 <.L417>:
        }
    }

    if (parser_state != parser_last_state) {
    38e2:	91 41 80    	mov.w     0x832, w1
    38e4:	a0 41 80    	mov.w     0x834, w0
    38e6:	80 8f 50    	sub.w     w1, w0, [w15]
    38e8:	02 00 32    	bra       Z, 0x38ee <.L403>
        parser_task = (STATE_HANDLER_T)NULL;
    38ea:	36 28 ef    	clr.w     0x836
        LED1 = OFF;
    38ec:	dc e2 a9    	bclr.b    0x2dc, #0x7

000038ee <.L403>:
    }
}
    38ee:	00 80 fa    	ulnk      
    38f0:	00 00 06    	return    

000038f2 <_parser_forwarding>:

void parser_forwarding(void) {
    38f2:	04 00 fa    	lnk       #0x4
    uint8_t ch;
    uint16_t i;

    if (parser_state != parser_last_state) {
    38f4:	91 41 80    	mov.w     0x832, w1
    38f6:	a0 41 80    	mov.w     0x834, w0
    38f8:	80 8f 50    	sub.w     w1, w0, [w15]
    38fa:	04 00 32    	bra       Z, 0x3904 <.L426>
        parser_last_state = parser_state;
    38fc:	90 41 80    	mov.w     0x832, w0
    38fe:	a0 41 88    	mov.w     w0, 0x834
        end_fwd_char_count = 0;
    3900:	44 28 ef    	clr.w     0x844
        LED2 = ON;
    3902:	ec 02 a8    	bset.b    0x2ec, #0x0

00003904 <.L426>:
    }

    if (parser_task)
    3904:	b0 41 80    	mov.w     0x836, w0
    3906:	00 00 e0    	cp0.w     w0
    3908:	02 00 32    	bra       Z, 0x390e <.L427>
        parser_task();
    390a:	b0 41 80    	mov.w     0x836, w0
    390c:	00 00 01    	call      w0

0000390e <.L427>:

    if (cdc_in_waiting() > 0) {
    390e:	20 0d 07    	rcall     0x5350 <_cdc_in_waiting> <.LFB5> <.LFE4>
    3910:	00 00 e0    	cp0.w     w0
    3912:	28 00 32    	bra       Z, 0x3964 <.L428>
        ch = cdc_getc();
    3914:	43 0d 07    	rcall     0x539c <_cdc_getc> <.LFB8> <.LFE7>
    3916:	20 47 98    	mov.b     w0, [w14+2]
        if (ch == END_FWD_CHAR) {
    3918:	ae 40 90    	mov.b     [w14+2], w1
    391a:	00 c6 b3    	mov.b     #0x60, w0
    391c:	80 cf 50    	sub.b     w1, w0, [w15]
    391e:	09 00 3a    	bra       NZ, 0x3932 <.L429>
            end_fwd_char_count++;
    3920:	20 42 80    	mov.w     0x844, w0
    3922:	00 00 e8    	inc.w     w0, w0
    3924:	20 42 88    	mov.w     w0, 0x844
            if (end_fwd_char_count == 3) {
    3926:	20 42 80    	mov.w     0x844, w0
    3928:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    392a:	1c 00 3a    	bra       NZ, 0x3964 <.L428>
                parser_state = parser_disconnected;
    392c:	a0 5b 23    	mov.w     #0x35ba, w0
    392e:	90 41 88    	mov.w     w0, 0x832
    3930:	19 00 37    	bra       0x3964 <.L428>

00003932 <.L429>:
            }
        } else if ((ch != END_FWD_CHAR) && (end_fwd_char_count > 0)) {
    3932:	ae 40 90    	mov.b     [w14+2], w1
    3934:	00 c6 b3    	mov.b     #0x60, w0
    3936:	80 cf 50    	sub.b     w1, w0, [w15]
    3938:	12 00 32    	bra       Z, 0x395e <.L430>
    393a:	20 42 80    	mov.w     0x844, w0
    393c:	00 00 e0    	cp0.w     w0
    393e:	0f 00 32    	bra       Z, 0x395e <.L430>
            for (i = 0; i < end_fwd_char_count; i++)
    3940:	00 00 eb    	clr.w     w0
    3942:	00 0f 78    	mov.w     w0, [w14]
    3944:	03 00 37    	bra       0x394c <.L431>

00003946 <.L432>:
                U1putc(END_FWD_CHAR);
    3946:	00 c6 b3    	mov.b     #0x60, w0
    3948:	73 06 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    394a:	1e 0f e8    	inc.w     [w14], [w14]

0000394c <.L431>:
    394c:	20 42 80    	mov.w     0x844, w0
    394e:	9e 00 78    	mov.w     [w14], w1
    3950:	80 8f 50    	sub.w     w1, w0, [w15]
    3952:	f9 ff 39    	bra       NC, 0x3946 <.L432>
            U1putc(ch);
    3954:	2e 40 90    	mov.b     [w14+2], w0
    3956:	6c 06 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
            U1flushTxBuffer();
    3958:	62 06 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
            end_fwd_char_count = 0;
    395a:	44 28 ef    	clr.w     0x844
    395c:	03 00 37    	bra       0x3964 <.L428>

0000395e <.L430>:
        } else {
            U1putc(ch);
    395e:	2e 40 90    	mov.b     [w14+2], w0
    3960:	67 06 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
            U1flushTxBuffer();
    3962:	5d 06 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>

00003964 <.L428>:
        }
    }

    if (U1inWaiting() > 0) {
    3964:	58 06 07    	rcall     0x4616 <_U1inWaiting> <.LFB46> <.LFE43>
    3966:	00 00 e0    	cp0.w     w0
    3968:	02 00 32    	bra       Z, 0x396e <.L433>
        cdc_putc(U1getc());
    396a:	82 06 07    	rcall     0x4670 <_U1getc> <.LFB49> <.LFE48>
    396c:	fb 0c 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>

0000396e <.L433>:
    }

    if (parser_state != parser_last_state) {
    396e:	91 41 80    	mov.w     0x832, w1
    3970:	a0 41 80    	mov.w     0x834, w0
    3972:	80 8f 50    	sub.w     w1, w0, [w15]
    3974:	02 00 32    	bra       Z, 0x397a <.L425>
        parser_task = (STATE_HANDLER_T)NULL;
    3976:	36 28 ef    	clr.w     0x836
        LED2 = OFF;
    3978:	ec 02 a9    	bclr.b    0x2ec, #0x0

0000397a <.L425>:
    }
}
    397a:	00 80 fa    	ulnk      
    397c:	00 00 06    	return    

0000397e <_init_smu_base>:
uint8_t U1TX_buffer[U1TX_BUFFER_LENGTH];
uint8_t U1RX_buffer[U1RX_BUFFER_LENGTH];
uint16_t U1TXthreshold;

void init_smu_base(void) {
    397e:	00 00 fa    	lnk       #0x0
    CLKDIV = 0x0100;        // RCDIV = 001 (4MHz, div2),
    3980:	00 10 20    	mov.w     #0x100, w0
    3982:	30 3a 88    	mov.w     w0, 0x746
                            // CPDIV = 00 (FOSC = 32MHz, FCY = 16MHz)

//    OSCTUN = 0x9000;        // enable FRC self tuning with USB host clock
    OSCCONbits.SOSCEN = 1;  // enable secondary oscillator (SOSC)
    3984:	42 27 a8    	bset.b    0x742, #0x1
    OSCTUNbits.STEN = 1;    // enable FRC oscillator self tuning from SOSC
    3986:	49 e7 a8    	bset.b    0x749, #0x7

    // Make all pins digital I/Os
    ANSB = 0;
    3988:	e2 24 ef    	clr.w     0x4e2
    ANSC = 0;
    398a:	e4 24 ef    	clr.w     0x4e4
    ANSD = 0;
    398c:	e6 24 ef    	clr.w     0x4e6
    ANSF = 0;
    398e:	ea 24 ef    	clr.w     0x4ea
    ANSG = 0;
    3990:	ec 24 ef    	clr.w     0x4ec

    ANSBbits.ANSB0 = 1;     // configure RB0 (AN0) for analog function
    3992:	e2 04 a8    	bset.b    0x4e2, #0x0
    TRISBbits.TRISB0 = 1;   // tristate RB0's output driver
    3994:	c8 02 a8    	bset.b    0x2c8, #0x0

    ANSGbits.ANSG9 = 1;     // configure RG9 (DAC1) for analog function
    3996:	ed 24 a8    	bset.b    0x4ed, #0x1
    TRISGbits.TRISG9 = 1;   // tristate RG9's output driver
    3998:	f1 22 a8    	bset.b    0x2f1, #0x1
    DAC1CON = 0x8081;       // enable DAC1, no trigger, and reference is DREF+
    399a:	10 08 28    	mov.w     #0x8081, w0
    399c:	00 22 88    	mov.w     w0, 0x440
    DAC1DAT = 0;
    399e:	42 24 ef    	clr.w     0x442

    ANSBbits.ANSB13 = 1;    // configure RB13 (DAC2) for analog function
    39a0:	e3 a4 a8    	bset.b    0x4e3, #0x5
    TRISBbits.TRISB13 = 1;  // tristate RB13's output driver
    39a2:	c9 a2 a8    	bset.b    0x2c9, #0x5
    DAC2CON = 0x8081;       // enable DAC2, no trigger, and reference is DREF+
    39a4:	10 08 28    	mov.w     #0x8081, w0
    39a6:	20 22 88    	mov.w     w0, 0x444
    DAC2DAT = 0;
    39a8:	46 24 ef    	clr.w     0x446

    // Configure LED pins as outputs, set to low (off)
    LED1 = OFF; LED1_DIR = OUT;
    39aa:	dc e2 a9    	bclr.b    0x2dc, #0x7
    39ac:	d8 e2 a9    	bclr.b    0x2d8, #0x7
    LED2 = OFF; LED2_DIR = OUT;
    39ae:	ec 02 a9    	bclr.b    0x2ec, #0x0
    39b0:	e8 02 a9    	bclr.b    0x2e8, #0x0
    LED3 = OFF; LED3_DIR = OUT;
    39b2:	ec 22 a9    	bclr.b    0x2ec, #0x1
    39b4:	e8 22 a9    	bclr.b    0x2e8, #0x1

    // Configure SW pin as inputs
    SW1_DIR = IN;
    39b6:	d1 e2 a8    	bset.b    0x2d1, #0x7

    // Configure ENA12V pin as an output, set to low (off)
    ENA12V = OFF; ENA12V_DIR = OUT;
    39b8:	cc 62 a9    	bclr.b    0x2cc, #0x3
    39ba:	c8 62 a9    	bclr.b    0x2c8, #0x3

    // Configure digital header pins as outputs, set to low
    RD0_DIR = OUT; RD0_ = 0;
    39bc:	d8 02 a9    	bclr.b    0x2d8, #0x0
    39be:	dc 02 a9    	bclr.b    0x2dc, #0x0
    RD1_DIR = OUT; RD1_ = 0;
    39c0:	d8 22 a9    	bclr.b    0x2d8, #0x1
    39c2:	dc 22 a9    	bclr.b    0x2dc, #0x1
    RD2_DIR = OUT; RD2_ = 0;
    39c4:	d8 42 a9    	bclr.b    0x2d8, #0x2
    39c6:	dc 42 a9    	bclr.b    0x2dc, #0x2
    RD3_DIR = OUT; RD3_ = 0;
    39c8:	d8 62 a9    	bclr.b    0x2d8, #0x3
    39ca:	dc 62 a9    	bclr.b    0x2dc, #0x3
    RD4_DIR = OUT; RD4_ = 0;
    39cc:	d8 82 a9    	bclr.b    0x2d8, #0x4
    39ce:	dc 82 a9    	bclr.b    0x2dc, #0x4
    RD5_DIR = OUT; RD5_ = 0;
    39d0:	d8 a2 a9    	bclr.b    0x2d8, #0x5
    39d2:	dc a2 a9    	bclr.b    0x2dc, #0x5
    RD6_DIR = OUT; RD6_ = 0;
    39d4:	d8 c2 a9    	bclr.b    0x2d8, #0x6
    39d6:	dc c2 a9    	bclr.b    0x2dc, #0x6

    RE0_DIR = OUT; RE0_ = 0;
    39d8:	e0 02 a9    	bclr.b    0x2e0, #0x0
    39da:	e4 02 a9    	bclr.b    0x2e4, #0x0
    RE1_DIR = OUT; RE1_ = 0;
    39dc:	e0 22 a9    	bclr.b    0x2e0, #0x1
    39de:	e4 22 a9    	bclr.b    0x2e4, #0x1
    RE2_DIR = OUT; RE2_ = 0;
    39e0:	e0 42 a9    	bclr.b    0x2e0, #0x2
    39e2:	e4 42 a9    	bclr.b    0x2e4, #0x2
    RE3_DIR = OUT; RE3_ = 0;
    39e4:	e0 62 a9    	bclr.b    0x2e0, #0x3
    39e6:	e4 62 a9    	bclr.b    0x2e4, #0x3
    RE4_DIR = OUT; RE4_ = 0;
    39e8:	e0 82 a9    	bclr.b    0x2e0, #0x4
    39ea:	e4 82 a9    	bclr.b    0x2e4, #0x4
    RE5_DIR = OUT; RE5_ = 0;
    39ec:	e0 a2 a9    	bclr.b    0x2e0, #0x5
    39ee:	e4 a2 a9    	bclr.b    0x2e4, #0x5
    RE6_DIR = OUT; RE6_ = 0;
    39f0:	e0 c2 a9    	bclr.b    0x2e0, #0x6
    39f2:	e4 c2 a9    	bclr.b    0x2e4, #0x6

    init_adc16();
    39f4:	05 00 07    	rcall     0x3a00 <_init_adc16> <.LFB1> <.LFE0>
    init_dac16();
    39f6:	5b 01 07    	rcall     0x3cae <_init_dac16> <.LFB11> <.LFE10>
    init_adc24();
    39f8:	c8 02 07    	rcall     0x3f8a <_init_adc24> <.LFB22> <.LFE21>
    init_ble();
    39fa:	8b 05 07    	rcall     0x4512 <_init_ble> <.LFB35> <.LFE34>
}
    39fc:	00 80 fa    	ulnk      
    39fe:	00 00 06    	return    

00003a00 <_init_adc16>:

// Functions for measuring with the 16-bit sigma-delta ADC
void init_adc16() {
    3a00:	00 00 fa    	lnk       #0x0
    // Configure 16-bit sigma-delta ADC for a data rate of 0.9765625 kS/s
    // (i.e., sample clock frequency of 4 MHz and an OSR of 1024x), which is 
    // a sample interval of 1.024ms.  Note that averaging 16 consecutive 
    // samples should reslut in a partial cancellation of 60-Hz noise.
    //
    SD1CON1 = 0x00D1;       // configure sigma-delta ADC with
    3a02:	10 0d 20    	mov.w     #0xd1, w0
    3a04:	80 26 88    	mov.w     w0, 0x4d0
                            //     SDGAIN = 000 (1x)
                            //     DITHER = 11 (high dither)
                            //     VOSCAL = 1 (measure offset error)
                            //     SDREFN = 0 (SVSS is neg ref)
                            //     SDREFP = 0 (SVDD is pos ref)
                            //     PWRLVL = 1 (2x bandwidth)
    SD1CON2 = 0xF110;       //     CHOP = 11 (chopping enabled)
    3a06:	00 11 2f    	mov.w     #0xf110, w0
    3a08:	90 26 88    	mov.w     w0, 0x4d2
                            //     SDINT = 11 (int on every samp clock)
                            //     SDWM = 01 (result updated every int)
                            //     RNDRES = 10 (round result to 16 bits)
    SD1CON3 = 0x4000;       //     SDDIV = 010 (clock divider is 4)
    3a0a:	00 00 24    	mov.w     #0x4000, w0
    3a0c:	a0 26 88    	mov.w     w0, 0x4d4
                            //     SDOSR = 000 (OSR is 1024)
                            //     SDCS = 00 (clock src is sys clock, FCY)
                            //     SDCH = 000 (select CH0)

    SD1CON1bits.SDON = 1;
    3a0e:	d1 e4 a8    	bset.b    0x4d1, #0x7

    adc16_calibrate();
    3a10:	02 00 07    	rcall     0x3a16 <_adc16_calibrate> <.LFB2> <.LFE1>
}
    3a12:	00 80 fa    	ulnk      
    3a14:	00 00 06    	return    

00003a16 <_adc16_calibrate>:

void adc16_calibrate(void) {
    3a16:	06 00 fa    	lnk       #0x6
    uint16_t i;
    int32_t offset;

    // Configure sigma-delta ADC for offset calibration
    SD1CON1bits.VOSCAL = 1;
    3a18:	d0 84 a8    	bset.b    0x4d0, #0x4

    // Measure sigma-delta ADC internal offset
    for (i = 0; i < 5; i++) {
    3a1a:	00 00 eb    	clr.w     w0
    3a1c:	00 0f 78    	mov.w     w0, [w14]
    3a1e:	08 00 37    	bra       0x3a30 <.L4>

00003a20 <.L6>:
        IFS6bits.SDA1IF = 0;
    3a20:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3a22:	00 00 00    	nop       

00003a24 <.L5>:
    3a24:	81 04 80    	mov.w     0x90, w1
    3a26:	00 20 20    	mov.w     #0x200, w0
    3a28:	00 80 60    	and.w     w1, w0, w0
    3a2a:	00 00 e0    	cp0.w     w0
    3a2c:	fb ff 32    	bra       Z, 0x3a24 <.L5>
    3a2e:	1e 0f e8    	inc.w     [w14], [w14]

00003a30 <.L4>:
    3a30:	1e 00 78    	mov.w     [w14], w0
    3a32:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3a34:	f5 ff 36    	bra       LEU, 0x3a20 <.L6>
    }
    offset = (int32_t)SD1RESH;
    3a36:	b0 26 80    	mov.w     0x4d6, w0
    3a38:	80 00 eb    	clr.w     w1
    3a3a:	10 07 98    	mov.w     w0, [w14+2]
    3a3c:	21 07 98    	mov.w     w1, [w14+4]
    for (i = 0; i < 15; i++) {
    3a3e:	00 00 eb    	clr.w     w0
    3a40:	00 0f 78    	mov.w     w0, [w14]
    3a42:	10 00 37    	bra       0x3a64 <.L7>

00003a44 <.L9>:
        IFS6bits.SDA1IF = 0;
    3a44:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3a46:	00 00 00    	nop       

00003a48 <.L8>:
    3a48:	81 04 80    	mov.w     0x90, w1
    3a4a:	00 20 20    	mov.w     #0x200, w0
    3a4c:	00 80 60    	and.w     w1, w0, w0
    3a4e:	00 00 e0    	cp0.w     w0
    3a50:	fb ff 32    	bra       Z, 0x3a48 <.L8>
        offset += (int32_t)SD1RESH;
    3a52:	b0 26 80    	mov.w     0x4d6, w0
    3a54:	80 00 eb    	clr.w     w1
    3a56:	1e 02 90    	mov.w     [w14+2], w4
    3a58:	ae 02 90    	mov.w     [w14+4], w5
    3a5a:	04 00 40    	add.w     w0, w4, w0
    3a5c:	85 80 48    	addc.w    w1, w5, w1
    3a5e:	10 07 98    	mov.w     w0, [w14+2]
    3a60:	21 07 98    	mov.w     w1, [w14+4]
    3a62:	1e 0f e8    	inc.w     [w14], [w14]

00003a64 <.L7>:
    3a64:	1e 00 78    	mov.w     [w14], w0
    3a66:	ee 0f 50    	sub.w     w0, #0xe, [w15]
    3a68:	ed ff 36    	bra       LEU, 0x3a44 <.L9>
    }
    offset = offset / 16;
    3a6a:	1e 00 90    	mov.w     [w14+2], w0
    3a6c:	ae 00 90    	mov.w     [w14+4], w1
    3a6e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    3a70:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    3a72:	02 00 3d    	bra       GE, 0x3a78 <.L10>
    3a74:	6f 00 40    	add.w     w0, #0xf, w0
    3a76:	e0 80 48    	addc.w    w1, #0x0, w1

00003a78 <.L10>:
    3a78:	4c 0a dd    	sl.w      w1, #0xc, w4
    3a7a:	44 01 de    	lsr.w     w0, #0x4, w2
    3a7c:	02 01 72    	ior.w     w4, w2, w2
    3a7e:	c4 89 de    	asr.w     w1, #0x4, w3
    3a80:	12 07 98    	mov.w     w2, [w14+2]
    3a82:	23 07 98    	mov.w     w3, [w14+4]
    adc16_offset = (int16_t)offset;
    3a84:	1e 00 90    	mov.w     [w14+2], w0
    3a86:	d0 40 88    	mov.w     w0, 0x81a

    // Configure sigma-delta ADC for normal operation
    SD1CON1bits.VOSCAL = 0;
    3a88:	d0 84 a9    	bclr.b    0x4d0, #0x4

    // Measure the sigma-delta ADC positive reference for gain calibration
    SD1CON3bits.SDCH = 3;
    3a8a:	a1 26 80    	mov.w     0x4d4, w1
    3a8c:	80 ff 2f    	mov.w     #0xfff8, w0
    3a8e:	00 80 60    	and.w     w1, w0, w0
    3a90:	30 00 b3    	ior.w     #0x3, w0
    3a92:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3a94:	00 00 eb    	clr.w     w0
    3a96:	00 0f 78    	mov.w     w0, [w14]
    3a98:	08 00 37    	bra       0x3aaa <.L11>

00003a9a <.L13>:
        IFS6bits.SDA1IF = 0;
    3a9a:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3a9c:	00 00 00    	nop       

00003a9e <.L12>:
    3a9e:	81 04 80    	mov.w     0x90, w1
    3aa0:	00 20 20    	mov.w     #0x200, w0
    3aa2:	00 80 60    	and.w     w1, w0, w0
    3aa4:	00 00 e0    	cp0.w     w0
    3aa6:	fb ff 32    	bra       Z, 0x3a9e <.L12>
    3aa8:	1e 0f e8    	inc.w     [w14], [w14]

00003aaa <.L11>:
    3aaa:	1e 00 78    	mov.w     [w14], w0
    3aac:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3aae:	f5 ff 36    	bra       LEU, 0x3a9a <.L13>
    }
    adc16_max_val = (int32_t)SD1RESH - (int32_t)adc16_offset;
    3ab0:	b0 26 80    	mov.w     0x4d6, w0
    3ab2:	61 01 b8    	mul.uu    w0, #0x1, w2
    3ab4:	d0 40 80    	mov.w     0x81a, w0
    3ab6:	cf 80 de    	asr.w     w0, #0xf, w1
    3ab8:	00 00 51    	sub.w     w2, w0, w0
    3aba:	81 80 59    	subb.w    w3, w1, w1
    3abc:	e0 40 88    	mov.w     w0, 0x81c
    3abe:	f1 40 88    	mov.w     w1, 0x81e

    // Configure sigma-delta ADC to measure CH0
    SD1CON3bits.SDCH = 0;
    3ac0:	a1 26 80    	mov.w     0x4d4, w1
    3ac2:	80 ff 2f    	mov.w     #0xfff8, w0
    3ac4:	00 80 60    	and.w     w1, w0, w0
    3ac6:	a0 26 88    	mov.w     w0, 0x4d4
}
    3ac8:	00 80 fa    	ulnk      
    3aca:	00 00 06    	return    

00003acc <_adc16_meas_ch1_raw>:

int16_t adc16_meas_ch1_raw(void) {
    3acc:	02 00 fa    	lnk       #0x2
    uint16_t i;

    SD1CON3bits.SDCH = 0;
    3ace:	a1 26 80    	mov.w     0x4d4, w1
    3ad0:	80 ff 2f    	mov.w     #0xfff8, w0
    3ad2:	00 80 60    	and.w     w1, w0, w0
    3ad4:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3ad6:	00 00 eb    	clr.w     w0
    3ad8:	00 0f 78    	mov.w     w0, [w14]
    3ada:	08 00 37    	bra       0x3aec <.L15>

00003adc <.L17>:
        IFS6bits.SDA1IF = 0;
    3adc:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3ade:	00 00 00    	nop       

00003ae0 <.L16>:
    3ae0:	81 04 80    	mov.w     0x90, w1
    3ae2:	00 20 20    	mov.w     #0x200, w0
    3ae4:	00 80 60    	and.w     w1, w0, w0
    3ae6:	00 00 e0    	cp0.w     w0
    3ae8:	fb ff 32    	bra       Z, 0x3ae0 <.L16>
    3aea:	1e 0f e8    	inc.w     [w14], [w14]

00003aec <.L15>:
    3aec:	1e 00 78    	mov.w     [w14], w0
    3aee:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3af0:	f5 ff 36    	bra       LEU, 0x3adc <.L17>
    }
    return (int16_t)SD1RESH;
    3af2:	b0 26 80    	mov.w     0x4d6, w0
}
    3af4:	00 80 fa    	ulnk      
    3af6:	00 00 06    	return    

00003af8 <_adc16_meas_ch2_raw>:

int16_t adc16_meas_ch2_raw(void) {
    3af8:	02 00 fa    	lnk       #0x2
    uint16_t i;

    SD1CON3bits.SDCH = 1;
    3afa:	a1 26 80    	mov.w     0x4d4, w1
    3afc:	80 ff 2f    	mov.w     #0xfff8, w0
    3afe:	00 80 60    	and.w     w1, w0, w0
    3b00:	00 00 a0    	bset.w    w0, #0x0
    3b02:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3b04:	00 00 eb    	clr.w     w0
    3b06:	00 0f 78    	mov.w     w0, [w14]
    3b08:	08 00 37    	bra       0x3b1a <.L19>

00003b0a <.L21>:
        IFS6bits.SDA1IF = 0;
    3b0a:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3b0c:	00 00 00    	nop       

00003b0e <.L20>:
    3b0e:	81 04 80    	mov.w     0x90, w1
    3b10:	00 20 20    	mov.w     #0x200, w0
    3b12:	00 80 60    	and.w     w1, w0, w0
    3b14:	00 00 e0    	cp0.w     w0
    3b16:	fb ff 32    	bra       Z, 0x3b0e <.L20>
    3b18:	1e 0f e8    	inc.w     [w14], [w14]

00003b1a <.L19>:
    3b1a:	1e 00 78    	mov.w     [w14], w0
    3b1c:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3b1e:	f5 ff 36    	bra       LEU, 0x3b0a <.L21>
    }
    return (int16_t)SD1RESH;
    3b20:	b0 26 80    	mov.w     0x4d6, w0
}
    3b22:	00 80 fa    	ulnk      
    3b24:	00 00 06    	return    

00003b26 <_adc16_meas_ch1>:

int16_t adc16_meas_ch1(void) {
    3b26:	06 00 fa    	lnk       #0x6
    int32_t val;
    uint16_t i;

    SD1CON3bits.SDCH = 0;
    3b28:	a1 26 80    	mov.w     0x4d4, w1
    3b2a:	80 ff 2f    	mov.w     #0xfff8, w0
    3b2c:	00 80 60    	and.w     w1, w0, w0
    3b2e:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3b30:	00 00 eb    	clr.w     w0
    3b32:	00 0f 78    	mov.w     w0, [w14]
    3b34:	08 00 37    	bra       0x3b46 <.L23>

00003b36 <.L25>:
        IFS6bits.SDA1IF = 0;
    3b36:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3b38:	00 00 00    	nop       

00003b3a <.L24>:
    3b3a:	81 04 80    	mov.w     0x90, w1
    3b3c:	00 20 20    	mov.w     #0x200, w0
    3b3e:	00 80 60    	and.w     w1, w0, w0
    3b40:	00 00 e0    	cp0.w     w0
    3b42:	fb ff 32    	bra       Z, 0x3b3a <.L24>
    3b44:	1e 0f e8    	inc.w     [w14], [w14]

00003b46 <.L23>:
    3b46:	1e 00 78    	mov.w     [w14], w0
    3b48:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3b4a:	f5 ff 36    	bra       LEU, 0x3b36 <.L25>
    }
    val = (int32_t)SD1RESH - (int32_t)adc16_offset;
    3b4c:	b0 26 80    	mov.w     0x4d6, w0
    3b4e:	61 01 b8    	mul.uu    w0, #0x1, w2
    3b50:	d0 40 80    	mov.w     0x81a, w0
    3b52:	cf 80 de    	asr.w     w0, #0xf, w1
    3b54:	00 00 51    	sub.w     w2, w0, w0
    3b56:	81 80 59    	subb.w    w3, w1, w1
    3b58:	10 07 98    	mov.w     w0, [w14+2]
    3b5a:	21 07 98    	mov.w     w1, [w14+4]
//    val = ((int32_t)32767 * val) / adc16_max_val;

    return (int16_t)val;
    3b5c:	1e 00 90    	mov.w     [w14+2], w0
}
    3b5e:	00 80 fa    	ulnk      
    3b60:	00 00 06    	return    

00003b62 <_adc16_meas_ch2>:

int16_t adc16_meas_ch2(void) {
    3b62:	06 00 fa    	lnk       #0x6
    int32_t val;
    uint16_t i;

    SD1CON3bits.SDCH = 1;
    3b64:	a1 26 80    	mov.w     0x4d4, w1
    3b66:	80 ff 2f    	mov.w     #0xfff8, w0
    3b68:	00 80 60    	and.w     w1, w0, w0
    3b6a:	00 00 a0    	bset.w    w0, #0x0
    3b6c:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3b6e:	00 00 eb    	clr.w     w0
    3b70:	00 0f 78    	mov.w     w0, [w14]
    3b72:	08 00 37    	bra       0x3b84 <.L27>

00003b74 <.L29>:
        IFS6bits.SDA1IF = 0;
    3b74:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3b76:	00 00 00    	nop       

00003b78 <.L28>:
    3b78:	81 04 80    	mov.w     0x90, w1
    3b7a:	00 20 20    	mov.w     #0x200, w0
    3b7c:	00 80 60    	and.w     w1, w0, w0
    3b7e:	00 00 e0    	cp0.w     w0
    3b80:	fb ff 32    	bra       Z, 0x3b78 <.L28>
    3b82:	1e 0f e8    	inc.w     [w14], [w14]

00003b84 <.L27>:
    3b84:	1e 00 78    	mov.w     [w14], w0
    3b86:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3b88:	f5 ff 36    	bra       LEU, 0x3b74 <.L29>
    }
    val = (int32_t)SD1RESH - (int32_t)adc16_offset;
    3b8a:	b0 26 80    	mov.w     0x4d6, w0
    3b8c:	61 01 b8    	mul.uu    w0, #0x1, w2
    3b8e:	d0 40 80    	mov.w     0x81a, w0
    3b90:	cf 80 de    	asr.w     w0, #0xf, w1
    3b92:	00 00 51    	sub.w     w2, w0, w0
    3b94:	81 80 59    	subb.w    w3, w1, w1
    3b96:	10 07 98    	mov.w     w0, [w14+2]
    3b98:	21 07 98    	mov.w     w1, [w14+4]
//    val = ((int32_t)32767 * val) / adc16_max_val;

    return (int16_t)val;
    3b9a:	1e 00 90    	mov.w     [w14+2], w0
}
    3b9c:	00 80 fa    	ulnk      
    3b9e:	00 00 06    	return    

00003ba0 <_adc16_meas_ch1_avg>:

int16_t adc16_meas_ch1_avg(void) {
    3ba0:	06 00 fa    	lnk       #0x6
    int32_t val;
    uint16_t i;

    SD1CON3bits.SDCH = 0;
    3ba2:	a1 26 80    	mov.w     0x4d4, w1
    3ba4:	80 ff 2f    	mov.w     #0xfff8, w0
    3ba6:	00 80 60    	and.w     w1, w0, w0
    3ba8:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3baa:	00 00 eb    	clr.w     w0
    3bac:	20 07 98    	mov.w     w0, [w14+4]
    3bae:	0a 00 37    	bra       0x3bc4 <.L31>

00003bb0 <.L33>:
        IFS6bits.SDA1IF = 0;
    3bb0:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3bb2:	00 00 00    	nop       

00003bb4 <.L32>:
    3bb4:	81 04 80    	mov.w     0x90, w1
    3bb6:	00 20 20    	mov.w     #0x200, w0
    3bb8:	00 80 60    	and.w     w1, w0, w0
    3bba:	00 00 e0    	cp0.w     w0
    3bbc:	fb ff 32    	bra       Z, 0x3bb4 <.L32>
    3bbe:	2e 00 90    	mov.w     [w14+4], w0
    3bc0:	00 00 e8    	inc.w     w0, w0
    3bc2:	20 07 98    	mov.w     w0, [w14+4]

00003bc4 <.L31>:
    3bc4:	2e 00 90    	mov.w     [w14+4], w0
    3bc6:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3bc8:	f3 ff 36    	bra       LEU, 0x3bb0 <.L33>
    }
    val = (int32_t)SD1RESH;
    3bca:	b0 26 80    	mov.w     0x4d6, w0
    3bcc:	80 00 eb    	clr.w     w1
    3bce:	00 8f be    	mov.d     w0, [w14]
    for (i = 0; i < 15; i++) {
    3bd0:	00 00 eb    	clr.w     w0
    3bd2:	20 07 98    	mov.w     w0, [w14+4]
    3bd4:	0e 00 37    	bra       0x3bf2 <.L34>

00003bd6 <.L36>:
        IFS6bits.SDA1IF = 0;
    3bd6:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3bd8:	00 00 00    	nop       

00003bda <.L35>:
    3bda:	81 04 80    	mov.w     0x90, w1
    3bdc:	00 20 20    	mov.w     #0x200, w0
    3bde:	00 80 60    	and.w     w1, w0, w0
    3be0:	00 00 e0    	cp0.w     w0
    3be2:	fb ff 32    	bra       Z, 0x3bda <.L35>
        val += (int32_t)SD1RESH;
    3be4:	b0 26 80    	mov.w     0x4d6, w0
    3be6:	80 00 eb    	clr.w     w1
    3be8:	1e 0f 40    	add.w     w0, [w14], [w14]
    3bea:	5e 97 48    	addc.w    w1, [++w14], [w14--]
    3bec:	2e 00 90    	mov.w     [w14+4], w0
    3bee:	00 00 e8    	inc.w     w0, w0
    3bf0:	20 07 98    	mov.w     w0, [w14+4]

00003bf2 <.L34>:
    3bf2:	2e 00 90    	mov.w     [w14+4], w0
    3bf4:	ee 0f 50    	sub.w     w0, #0xe, [w15]
    3bf6:	ef ff 36    	bra       LEU, 0x3bd6 <.L36>
    }
    val = val / 16;
    3bf8:	1e 00 be    	mov.d     [w14], w0
    3bfa:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    3bfc:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    3bfe:	02 00 3d    	bra       GE, 0x3c04 <.L37>
    3c00:	6f 00 40    	add.w     w0, #0xf, w0
    3c02:	e0 80 48    	addc.w    w1, #0x0, w1

00003c04 <.L37>:
    3c04:	4c 0a dd    	sl.w      w1, #0xc, w4
    3c06:	44 01 de    	lsr.w     w0, #0x4, w2
    3c08:	02 01 72    	ior.w     w4, w2, w2
    3c0a:	c4 89 de    	asr.w     w1, #0x4, w3
    3c0c:	02 8f be    	mov.d     w2, [w14]
    val -= (int32_t)adc16_offset;
    3c0e:	d0 40 80    	mov.w     0x81a, w0
    3c10:	cf 80 de    	asr.w     w0, #0xf, w1
    3c12:	1e 1f 10    	subr.w    w0, [w14], [w14++]
    3c14:	1e 97 18    	subbr.w   w1, [w14], [w14--]
//    val = ((int32_t)32767 * val) / adc16_max_val;

    return (int16_t)val;
    3c16:	1e 00 78    	mov.w     [w14], w0
}
    3c18:	00 80 fa    	ulnk      
    3c1a:	00 00 06    	return    

00003c1c <_adc16_meas_ch2_avg>:

int16_t adc16_meas_ch2_avg(void) {
    3c1c:	06 00 fa    	lnk       #0x6
    int32_t val;
    uint16_t i;

    SD1CON3bits.SDCH = 1;
    3c1e:	a1 26 80    	mov.w     0x4d4, w1
    3c20:	80 ff 2f    	mov.w     #0xfff8, w0
    3c22:	00 80 60    	and.w     w1, w0, w0
    3c24:	00 00 a0    	bset.w    w0, #0x0
    3c26:	a0 26 88    	mov.w     w0, 0x4d4
    for (i = 0; i < 5; i++) {
    3c28:	00 00 eb    	clr.w     w0
    3c2a:	20 07 98    	mov.w     w0, [w14+4]
    3c2c:	0a 00 37    	bra       0x3c42 <.L39>

00003c2e <.L41>:
        IFS6bits.SDA1IF = 0;
    3c2e:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3c30:	00 00 00    	nop       

00003c32 <.L40>:
    3c32:	81 04 80    	mov.w     0x90, w1
    3c34:	00 20 20    	mov.w     #0x200, w0
    3c36:	00 80 60    	and.w     w1, w0, w0
    3c38:	00 00 e0    	cp0.w     w0
    3c3a:	fb ff 32    	bra       Z, 0x3c32 <.L40>
    3c3c:	2e 00 90    	mov.w     [w14+4], w0
    3c3e:	00 00 e8    	inc.w     w0, w0
    3c40:	20 07 98    	mov.w     w0, [w14+4]

00003c42 <.L39>:
    3c42:	2e 00 90    	mov.w     [w14+4], w0
    3c44:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    3c46:	f3 ff 36    	bra       LEU, 0x3c2e <.L41>
    }
    val = (int32_t)SD1RESH;
    3c48:	b0 26 80    	mov.w     0x4d6, w0
    3c4a:	80 00 eb    	clr.w     w1
    3c4c:	00 8f be    	mov.d     w0, [w14]
    for (i = 0; i < 15; i++) {
    3c4e:	00 00 eb    	clr.w     w0
    3c50:	20 07 98    	mov.w     w0, [w14+4]
    3c52:	0e 00 37    	bra       0x3c70 <.L42>

00003c54 <.L44>:
        IFS6bits.SDA1IF = 0;
    3c54:	91 20 a9    	bclr.b    0x91, #0x1
        while (IFS6bits.SDA1IF == 0) {}
    3c56:	00 00 00    	nop       

00003c58 <.L43>:
    3c58:	81 04 80    	mov.w     0x90, w1
    3c5a:	00 20 20    	mov.w     #0x200, w0
    3c5c:	00 80 60    	and.w     w1, w0, w0
    3c5e:	00 00 e0    	cp0.w     w0
    3c60:	fb ff 32    	bra       Z, 0x3c58 <.L43>
        val += (int32_t)SD1RESH;
    3c62:	b0 26 80    	mov.w     0x4d6, w0
    3c64:	80 00 eb    	clr.w     w1
    3c66:	1e 0f 40    	add.w     w0, [w14], [w14]
    3c68:	5e 97 48    	addc.w    w1, [++w14], [w14--]
    3c6a:	2e 00 90    	mov.w     [w14+4], w0
    3c6c:	00 00 e8    	inc.w     w0, w0
    3c6e:	20 07 98    	mov.w     w0, [w14+4]

00003c70 <.L42>:
    3c70:	2e 00 90    	mov.w     [w14+4], w0
    3c72:	ee 0f 50    	sub.w     w0, #0xe, [w15]
    3c74:	ef ff 36    	bra       LEU, 0x3c54 <.L44>
    }
    val = val / 16;
    3c76:	1e 00 be    	mov.d     [w14], w0
    3c78:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    3c7a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    3c7c:	02 00 3d    	bra       GE, 0x3c82 <.L45>
    3c7e:	6f 00 40    	add.w     w0, #0xf, w0
    3c80:	e0 80 48    	addc.w    w1, #0x0, w1

00003c82 <.L45>:
    3c82:	4c 0a dd    	sl.w      w1, #0xc, w4
    3c84:	44 01 de    	lsr.w     w0, #0x4, w2
    3c86:	02 01 72    	ior.w     w4, w2, w2
    3c88:	c4 89 de    	asr.w     w1, #0x4, w3
    3c8a:	02 8f be    	mov.d     w2, [w14]
    val -= (int32_t)adc16_offset;
    3c8c:	d0 40 80    	mov.w     0x81a, w0
    3c8e:	cf 80 de    	asr.w     w0, #0xf, w1
    3c90:	1e 1f 10    	subr.w    w0, [w14], [w14++]
    3c92:	1e 97 18    	subbr.w   w1, [w14], [w14--]
//    val = ((int32_t)32767 * val) / adc16_max_val;

    return (int16_t)val;
    3c94:	1e 00 78    	mov.w     [w14], w0
}
    3c96:	00 80 fa    	ulnk      
    3c98:	00 00 06    	return    

00003c9a <_adc16_get_offset>:

int16_t adc16_get_offset(void) {
    3c9a:	00 00 fa    	lnk       #0x0
    return adc16_offset;
    3c9c:	d0 40 80    	mov.w     0x81a, w0
}
    3c9e:	00 80 fa    	ulnk      
    3ca0:	00 00 06    	return    

00003ca2 <_adc16_get_max_val>:

uint16_t adc16_get_max_val(void) {
    3ca2:	00 00 fa    	lnk       #0x0
    return (uint16_t)adc16_max_val;
    3ca4:	e0 40 80    	mov.w     0x81c, w0
    3ca6:	f1 40 80    	mov.w     0x81e, w1
    3ca8:	00 00 78    	mov.w     w0, w0
}
    3caa:	00 80 fa    	ulnk      
    3cac:	00 00 06    	return    

00003cae <_init_dac16>:

// Functions for interfacing with the quad 16-bit DAC (DAC8564)
void init_dac16(void) {
    3cae:	04 00 fa    	lnk       #0x4
    uint8_t *RPOR, *RPINR;

    // Configure DAC16 pins and SPI peripheral (SPI1)
    DAC_CSN_DIR = OUT; DAC_CSN = 1;
    3cb0:	d9 02 a9    	bclr.b    0x2d9, #0x0
    3cb2:	dd 02 a8    	bset.b    0x2dd, #0x0
    DAC_SCK_DIR = OUT; DAC_SCK = 1;
    3cb4:	d9 62 a9    	bclr.b    0x2d9, #0x3
    3cb6:	dd 62 a8    	bset.b    0x2dd, #0x3
    DAC_MOSI_DIR = OUT; DAC_MOSI = 0;
    3cb8:	d9 42 a9    	bclr.b    0x2d9, #0x2
    3cba:	dd 42 a9    	bclr.b    0x2dd, #0x2
    DAC_MISO_DIR = IN;
    3cbc:	d9 22 a8    	bset.b    0x2d9, #0x1

    RPOR = (uint8_t *)&RPOR0;
    3cbe:	00 6c 20    	mov.w     #0x6c0, w0
    3cc0:	00 0f 78    	mov.w     w0, [w14]
    RPINR = (uint8_t *)&RPINR0;
    3cc2:	00 68 20    	mov.w     #0x680, w0
    3cc4:	10 07 98    	mov.w     w0, [w14+2]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    3cc6:	11 3a 80    	mov.w     0x742, w1
    3cc8:	f0 0b 20    	mov.w     #0xbf, w0
    3cca:	00 81 60    	and.w     w1, w0, w2
    3ccc:	60 04 20    	mov.w     #0x46, w0
    3cce:	71 05 20    	mov.w     #0x57, w1
    3cd0:	23 74 20    	mov.w     #0x742, w3
    3cd2:	80 49 78    	mov.b     w0, [w3]
    3cd4:	81 49 78    	mov.b     w1, [w3]
    3cd6:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO1_RP] = DAC_MISO_RP;
    3cd8:	1e 00 90    	mov.w     [w14+2], w0
    3cda:	80 02 b0    	add.w     #0x28, w0
    3cdc:	41 c0 b3    	mov.b     #0x4, w1
    3cde:	01 48 78    	mov.b     w1, [w0]
    RPOR[DAC_MOSI_RP] = MOSI1_RP;
    3ce0:	9e 00 78    	mov.w     [w14], w1
    3ce2:	63 80 40    	add.w     w1, #0x3, w0
    3ce4:	71 c0 b3    	mov.b     #0x7, w1
    3ce6:	01 48 78    	mov.b     w1, [w0]
    RPOR[DAC_SCK_RP] = SCK1OUT_RP;
    3ce8:	9e 00 78    	mov.w     [w14], w1
    3cea:	6c 80 40    	add.w     w1, #0xc, w0
    3cec:	81 c0 b3    	mov.b     #0x8, w1
    3cee:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    3cf0:	10 3a 80    	mov.w     0x742, w0
    3cf2:	00 01 78    	mov.w     w0, w2
    3cf4:	02 60 a0    	bset.w    w2, #0x6
    3cf6:	60 04 20    	mov.w     #0x46, w0
    3cf8:	71 05 20    	mov.w     #0x57, w1
    3cfa:	23 74 20    	mov.w     #0x742, w3
    3cfc:	80 49 78    	mov.b     w0, [w3]
    3cfe:	81 49 78    	mov.b     w1, [w3]
    3d00:	82 49 78    	mov.b     w2, [w3]

    SPI1CON1 = 0x017B;      // SPI1 mode = 2, SCK freq = 2 MHz
    3d02:	b0 17 20    	mov.w     #0x17b, w0
    3d04:	10 12 88    	mov.w     w0, 0x242
    SPI1CON2 = 0;
    3d06:	44 22 ef    	clr.w     0x244
    SPI1STAT = 0x8000;
    3d08:	00 00 28    	mov.w     #0x8000, w0
    3d0a:	00 12 88    	mov.w     w0, 0x240

    dac16_dac0 = 0;
    3d0c:	20 28 ef    	clr.w     0x820
    dac16_dac1 = 0;
    3d0e:	22 28 ef    	clr.w     0x822
    dac16_dac2 = 0;
    3d10:	24 28 ef    	clr.w     0x824
    dac16_dac3 = 0;
    3d12:	26 28 ef    	clr.w     0x826
}
    3d14:	00 80 fa    	ulnk      
    3d16:	00 00 06    	return    

00003d18 <_dac16_get_dac0>:

uint16_t dac16_get_dac0(void) {
    3d18:	00 00 fa    	lnk       #0x0
    return dac16_dac0;
    3d1a:	00 41 80    	mov.w     0x820, w0
}
    3d1c:	00 80 fa    	ulnk      
    3d1e:	00 00 06    	return    

00003d20 <_dac16_set_dac0>:

void dac16_set_dac0(uint16_t val) {
    3d20:	04 00 fa    	lnk       #0x4
    3d22:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac0 = val;
    3d24:	9e 00 90    	mov.w     [w14+2], w1
    3d26:	01 41 88    	mov.w     w1, 0x820

    DAC_CSN = 0;
    3d28:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC0
    SPI1BUF = 0b00010000;
    3d2a:	00 01 20    	mov.w     #0x10, w0
    3d2c:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3d2e:	00 00 00    	nop       

00003d30 <.L51>:
    3d30:	00 12 80    	mov.w     0x240, w0
    3d32:	61 00 60    	and.w     w0, #0x1, w0
    3d34:	00 00 e0    	cp0.w     w0
    3d36:	fc ff 32    	bra       Z, 0x3d30 <.L51>
    temp = SPI1BUF;
    3d38:	41 12 80    	mov.w     0x248, w1
    3d3a:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC0 value
    SPI1BUF = dac16_dac0 >> 8;
    3d3c:	00 41 80    	mov.w     0x820, w0
    3d3e:	48 00 de    	lsr.w     w0, #0x8, w0
    3d40:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3d42:	00 00 00    	nop       

00003d44 <.L52>:
    3d44:	00 12 80    	mov.w     0x240, w0
    3d46:	61 00 60    	and.w     w0, #0x1, w0
    3d48:	00 00 e0    	cp0.w     w0
    3d4a:	fc ff 32    	bra       Z, 0x3d44 <.L52>
    temp = SPI1BUF;
    3d4c:	41 12 80    	mov.w     0x248, w1
    3d4e:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC0 value
    SPI1BUF = dac16_dac0 & 0xFF;
    3d50:	01 41 80    	mov.w     0x820, w1
    3d52:	f0 0f 20    	mov.w     #0xff, w0
    3d54:	00 80 60    	and.w     w1, w0, w0
    3d56:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3d58:	00 00 00    	nop       

00003d5a <.L53>:
    3d5a:	00 12 80    	mov.w     0x240, w0
    3d5c:	61 00 60    	and.w     w0, #0x1, w0
    3d5e:	00 00 e0    	cp0.w     w0
    3d60:	fc ff 32    	bra       Z, 0x3d5a <.L53>
    temp = SPI1BUF;
    3d62:	41 12 80    	mov.w     0x248, w1
    3d64:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3d66:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3d68:	00 80 fa    	ulnk      
    3d6a:	00 00 06    	return    

00003d6c <_dac16_get_dac1>:

uint16_t dac16_get_dac1(void) {
    3d6c:	00 00 fa    	lnk       #0x0
    return dac16_dac1;
    3d6e:	10 41 80    	mov.w     0x822, w0
}
    3d70:	00 80 fa    	ulnk      
    3d72:	00 00 06    	return    

00003d74 <_dac16_set_dac1>:

void dac16_set_dac1(uint16_t val) {
    3d74:	04 00 fa    	lnk       #0x4
    3d76:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac1 = val;
    3d78:	9e 00 90    	mov.w     [w14+2], w1
    3d7a:	11 41 88    	mov.w     w1, 0x822

    DAC_CSN = 0;
    3d7c:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC1
    SPI1BUF = 0b00010010;
    3d7e:	20 01 20    	mov.w     #0x12, w0
    3d80:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3d82:	00 00 00    	nop       

00003d84 <.L56>:
    3d84:	00 12 80    	mov.w     0x240, w0
    3d86:	61 00 60    	and.w     w0, #0x1, w0
    3d88:	00 00 e0    	cp0.w     w0
    3d8a:	fc ff 32    	bra       Z, 0x3d84 <.L56>
    temp = SPI1BUF;
    3d8c:	41 12 80    	mov.w     0x248, w1
    3d8e:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC1 value
    SPI1BUF = dac16_dac1 >> 8;
    3d90:	10 41 80    	mov.w     0x822, w0
    3d92:	48 00 de    	lsr.w     w0, #0x8, w0
    3d94:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3d96:	00 00 00    	nop       

00003d98 <.L57>:
    3d98:	00 12 80    	mov.w     0x240, w0
    3d9a:	61 00 60    	and.w     w0, #0x1, w0
    3d9c:	00 00 e0    	cp0.w     w0
    3d9e:	fc ff 32    	bra       Z, 0x3d98 <.L57>
    temp = SPI1BUF;
    3da0:	41 12 80    	mov.w     0x248, w1
    3da2:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC1 value
    SPI1BUF = dac16_dac1 & 0xFF;
    3da4:	11 41 80    	mov.w     0x822, w1
    3da6:	f0 0f 20    	mov.w     #0xff, w0
    3da8:	00 80 60    	and.w     w1, w0, w0
    3daa:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3dac:	00 00 00    	nop       

00003dae <.L58>:
    3dae:	00 12 80    	mov.w     0x240, w0
    3db0:	61 00 60    	and.w     w0, #0x1, w0
    3db2:	00 00 e0    	cp0.w     w0
    3db4:	fc ff 32    	bra       Z, 0x3dae <.L58>
    temp = SPI1BUF;
    3db6:	41 12 80    	mov.w     0x248, w1
    3db8:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3dba:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3dbc:	00 80 fa    	ulnk      
    3dbe:	00 00 06    	return    

00003dc0 <_dac16_get_dac2>:

uint16_t dac16_get_dac2(void) {
    3dc0:	00 00 fa    	lnk       #0x0
    return dac16_dac2;
    3dc2:	20 41 80    	mov.w     0x824, w0
}
    3dc4:	00 80 fa    	ulnk      
    3dc6:	00 00 06    	return    

00003dc8 <_dac16_set_dac2>:

void dac16_set_dac2(uint16_t val) {
    3dc8:	04 00 fa    	lnk       #0x4
    3dca:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac2 = val;
    3dcc:	9e 00 90    	mov.w     [w14+2], w1
    3dce:	21 41 88    	mov.w     w1, 0x824

    DAC_CSN = 0;
    3dd0:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC2
    SPI1BUF = 0b00010100;
    3dd2:	40 01 20    	mov.w     #0x14, w0
    3dd4:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3dd6:	00 00 00    	nop       

00003dd8 <.L61>:
    3dd8:	00 12 80    	mov.w     0x240, w0
    3dda:	61 00 60    	and.w     w0, #0x1, w0
    3ddc:	00 00 e0    	cp0.w     w0
    3dde:	fc ff 32    	bra       Z, 0x3dd8 <.L61>
    temp = SPI1BUF;
    3de0:	41 12 80    	mov.w     0x248, w1
    3de2:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC2 value
    SPI1BUF = dac16_dac2 >> 8;
    3de4:	20 41 80    	mov.w     0x824, w0
    3de6:	48 00 de    	lsr.w     w0, #0x8, w0
    3de8:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3dea:	00 00 00    	nop       

00003dec <.L62>:
    3dec:	00 12 80    	mov.w     0x240, w0
    3dee:	61 00 60    	and.w     w0, #0x1, w0
    3df0:	00 00 e0    	cp0.w     w0
    3df2:	fc ff 32    	bra       Z, 0x3dec <.L62>
    temp = SPI1BUF;
    3df4:	41 12 80    	mov.w     0x248, w1
    3df6:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC2 value
    SPI1BUF = dac16_dac2 & 0xFF;
    3df8:	21 41 80    	mov.w     0x824, w1
    3dfa:	f0 0f 20    	mov.w     #0xff, w0
    3dfc:	00 80 60    	and.w     w1, w0, w0
    3dfe:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e00:	00 00 00    	nop       

00003e02 <.L63>:
    3e02:	00 12 80    	mov.w     0x240, w0
    3e04:	61 00 60    	and.w     w0, #0x1, w0
    3e06:	00 00 e0    	cp0.w     w0
    3e08:	fc ff 32    	bra       Z, 0x3e02 <.L63>
    temp = SPI1BUF;
    3e0a:	41 12 80    	mov.w     0x248, w1
    3e0c:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3e0e:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3e10:	00 80 fa    	ulnk      
    3e12:	00 00 06    	return    

00003e14 <_dac16_get_dac3>:

uint16_t dac16_get_dac3(void) {
    3e14:	00 00 fa    	lnk       #0x0
    return dac16_dac3;
    3e16:	30 41 80    	mov.w     0x826, w0
}
    3e18:	00 80 fa    	ulnk      
    3e1a:	00 00 06    	return    

00003e1c <_dac16_set_dac3>:

void dac16_set_dac3(uint16_t val) {
    3e1c:	04 00 fa    	lnk       #0x4
    3e1e:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t temp;

    dac16_dac3 = val;
    3e20:	9e 00 90    	mov.w     [w14+2], w1
    3e22:	31 41 88    	mov.w     w1, 0x826

    DAC_CSN = 0;
    3e24:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer with data and load DAC3
    SPI1BUF = 0b00010110;
    3e26:	60 01 20    	mov.w     #0x16, w0
    3e28:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e2a:	00 00 00    	nop       

00003e2c <.L66>:
    3e2c:	00 12 80    	mov.w     0x240, w0
    3e2e:	61 00 60    	and.w     w0, #0x1, w0
    3e30:	00 00 e0    	cp0.w     w0
    3e32:	fc ff 32    	bra       Z, 0x3e2c <.L66>
    temp = SPI1BUF;
    3e34:	41 12 80    	mov.w     0x248, w1
    3e36:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC3 value
    SPI1BUF = dac16_dac3 >> 8;
    3e38:	30 41 80    	mov.w     0x826, w0
    3e3a:	48 00 de    	lsr.w     w0, #0x8, w0
    3e3c:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e3e:	00 00 00    	nop       

00003e40 <.L67>:
    3e40:	00 12 80    	mov.w     0x240, w0
    3e42:	61 00 60    	and.w     w0, #0x1, w0
    3e44:	00 00 e0    	cp0.w     w0
    3e46:	fc ff 32    	bra       Z, 0x3e40 <.L67>
    temp = SPI1BUF;
    3e48:	41 12 80    	mov.w     0x248, w1
    3e4a:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC3 value
    SPI1BUF = dac16_dac3 & 0xFF;
    3e4c:	31 41 80    	mov.w     0x826, w1
    3e4e:	f0 0f 20    	mov.w     #0xff, w0
    3e50:	00 80 60    	and.w     w1, w0, w0
    3e52:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e54:	00 00 00    	nop       

00003e56 <.L68>:
    3e56:	00 12 80    	mov.w     0x240, w0
    3e58:	61 00 60    	and.w     w0, #0x1, w0
    3e5a:	00 00 e0    	cp0.w     w0
    3e5c:	fc ff 32    	bra       Z, 0x3e56 <.L68>
    temp = SPI1BUF;
    3e5e:	41 12 80    	mov.w     0x248, w1
    3e60:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3e62:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3e64:	00 80 fa    	ulnk      
    3e66:	00 00 06    	return    

00003e68 <_dac16_set_ch1>:

void dac16_set_ch1(uint16_t pos, uint16_t neg) {
    3e68:	06 00 fa    	lnk       #0x6
    3e6a:	10 07 98    	mov.w     w0, [w14+2]
    3e6c:	21 07 98    	mov.w     w1, [w14+4]
    uint16_t temp;

    dac16_dac0 = neg;
    3e6e:	ae 00 90    	mov.w     [w14+4], w1
    3e70:	01 41 88    	mov.w     w1, 0x820

    DAC_CSN = 0;
    3e72:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 0 with data
    SPI1BUF = 0b00000000;
    3e74:	48 22 ef    	clr.w     0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e76:	00 00 00    	nop       

00003e78 <.L70>:
    3e78:	00 12 80    	mov.w     0x240, w0
    3e7a:	61 00 60    	and.w     w0, #0x1, w0
    3e7c:	00 00 e0    	cp0.w     w0
    3e7e:	fc ff 32    	bra       Z, 0x3e78 <.L70>
    temp = SPI1BUF;
    3e80:	41 12 80    	mov.w     0x248, w1
    3e82:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC0 value
    SPI1BUF = dac16_dac0 >> 8;
    3e84:	00 41 80    	mov.w     0x820, w0
    3e86:	48 00 de    	lsr.w     w0, #0x8, w0
    3e88:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3e8a:	00 00 00    	nop       

00003e8c <.L71>:
    3e8c:	00 12 80    	mov.w     0x240, w0
    3e8e:	61 00 60    	and.w     w0, #0x1, w0
    3e90:	00 00 e0    	cp0.w     w0
    3e92:	fc ff 32    	bra       Z, 0x3e8c <.L71>
    temp = SPI1BUF;
    3e94:	41 12 80    	mov.w     0x248, w1
    3e96:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC0 value
    SPI1BUF = dac16_dac0 & 0xFF;
    3e98:	01 41 80    	mov.w     0x820, w1
    3e9a:	f0 0f 20    	mov.w     #0xff, w0
    3e9c:	00 80 60    	and.w     w1, w0, w0
    3e9e:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ea0:	00 00 00    	nop       

00003ea2 <.L72>:
    3ea2:	00 12 80    	mov.w     0x240, w0
    3ea4:	61 00 60    	and.w     w0, #0x1, w0
    3ea6:	00 00 e0    	cp0.w     w0
    3ea8:	fc ff 32    	bra       Z, 0x3ea2 <.L72>
    temp = SPI1BUF;
    3eaa:	41 12 80    	mov.w     0x248, w1
    3eac:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3eae:	dd 02 a8    	bset.b    0x2dd, #0x0

    dac16_dac1 = pos;
    3eb0:	9e 00 90    	mov.w     [w14+2], w1
    3eb2:	11 41 88    	mov.w     w1, 0x822

    DAC_CSN = 0;
    3eb4:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 1 with data and load all DACs simultaneously
    SPI1BUF = 0b00100010;
    3eb6:	20 02 20    	mov.w     #0x22, w0
    3eb8:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3eba:	00 00 00    	nop       

00003ebc <.L73>:
    3ebc:	00 12 80    	mov.w     0x240, w0
    3ebe:	61 00 60    	and.w     w0, #0x1, w0
    3ec0:	00 00 e0    	cp0.w     w0
    3ec2:	fc ff 32    	bra       Z, 0x3ebc <.L73>
    temp = SPI1BUF;
    3ec4:	41 12 80    	mov.w     0x248, w1
    3ec6:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC1 value
    SPI1BUF = dac16_dac1 >> 8;
    3ec8:	10 41 80    	mov.w     0x822, w0
    3eca:	48 00 de    	lsr.w     w0, #0x8, w0
    3ecc:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ece:	00 00 00    	nop       

00003ed0 <.L74>:
    3ed0:	00 12 80    	mov.w     0x240, w0
    3ed2:	61 00 60    	and.w     w0, #0x1, w0
    3ed4:	00 00 e0    	cp0.w     w0
    3ed6:	fc ff 32    	bra       Z, 0x3ed0 <.L74>
    temp = SPI1BUF;
    3ed8:	41 12 80    	mov.w     0x248, w1
    3eda:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC1 value
    SPI1BUF = dac16_dac1 & 0xFF;
    3edc:	11 41 80    	mov.w     0x822, w1
    3ede:	f0 0f 20    	mov.w     #0xff, w0
    3ee0:	00 80 60    	and.w     w1, w0, w0
    3ee2:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3ee4:	00 00 00    	nop       

00003ee6 <.L75>:
    3ee6:	00 12 80    	mov.w     0x240, w0
    3ee8:	61 00 60    	and.w     w0, #0x1, w0
    3eea:	00 00 e0    	cp0.w     w0
    3eec:	fc ff 32    	bra       Z, 0x3ee6 <.L75>
    temp = SPI1BUF;
    3eee:	41 12 80    	mov.w     0x248, w1
    3ef0:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3ef2:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3ef4:	00 80 fa    	ulnk      
    3ef6:	00 00 06    	return    

00003ef8 <_dac16_set_ch2>:

void dac16_set_ch2(uint16_t pos, uint16_t neg) {
    3ef8:	06 00 fa    	lnk       #0x6
    3efa:	10 07 98    	mov.w     w0, [w14+2]
    3efc:	21 07 98    	mov.w     w1, [w14+4]
    uint16_t temp;

    dac16_dac2 = neg;
    3efe:	ae 00 90    	mov.w     [w14+4], w1
    3f00:	21 41 88    	mov.w     w1, 0x824

    DAC_CSN = 0;
    3f02:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 2 with data
    SPI1BUF = 0b00000100;
    3f04:	40 00 20    	mov.w     #0x4, w0
    3f06:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f08:	00 00 00    	nop       

00003f0a <.L77>:
    3f0a:	00 12 80    	mov.w     0x240, w0
    3f0c:	61 00 60    	and.w     w0, #0x1, w0
    3f0e:	00 00 e0    	cp0.w     w0
    3f10:	fc ff 32    	bra       Z, 0x3f0a <.L77>
    temp = SPI1BUF;
    3f12:	41 12 80    	mov.w     0x248, w1
    3f14:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC2 value
    SPI1BUF = dac16_dac2 >> 8;
    3f16:	20 41 80    	mov.w     0x824, w0
    3f18:	48 00 de    	lsr.w     w0, #0x8, w0
    3f1a:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f1c:	00 00 00    	nop       

00003f1e <.L78>:
    3f1e:	00 12 80    	mov.w     0x240, w0
    3f20:	61 00 60    	and.w     w0, #0x1, w0
    3f22:	00 00 e0    	cp0.w     w0
    3f24:	fc ff 32    	bra       Z, 0x3f1e <.L78>
    temp = SPI1BUF;
    3f26:	41 12 80    	mov.w     0x248, w1
    3f28:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC2 value
    SPI1BUF = dac16_dac2 & 0xFF;
    3f2a:	21 41 80    	mov.w     0x824, w1
    3f2c:	f0 0f 20    	mov.w     #0xff, w0
    3f2e:	00 80 60    	and.w     w1, w0, w0
    3f30:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f32:	00 00 00    	nop       

00003f34 <.L79>:
    3f34:	00 12 80    	mov.w     0x240, w0
    3f36:	61 00 60    	and.w     w0, #0x1, w0
    3f38:	00 00 e0    	cp0.w     w0
    3f3a:	fc ff 32    	bra       Z, 0x3f34 <.L79>
    temp = SPI1BUF;
    3f3c:	41 12 80    	mov.w     0x248, w1
    3f3e:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3f40:	dd 02 a8    	bset.b    0x2dd, #0x0

    dac16_dac3 = pos;
    3f42:	9e 00 90    	mov.w     [w14+2], w1
    3f44:	31 41 88    	mov.w     w1, 0x826

    DAC_CSN = 0;
    3f46:	dd 02 a9    	bclr.b    0x2dd, #0x0

    // Write to buffer 3 with data and load all DACs simultaneously
    SPI1BUF = 0b00100110;
    3f48:	60 02 20    	mov.w     #0x26, w0
    3f4a:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f4c:	00 00 00    	nop       

00003f4e <.L80>:
    3f4e:	00 12 80    	mov.w     0x240, w0
    3f50:	61 00 60    	and.w     w0, #0x1, w0
    3f52:	00 00 e0    	cp0.w     w0
    3f54:	fc ff 32    	bra       Z, 0x3f4e <.L80>
    temp = SPI1BUF;
    3f56:	41 12 80    	mov.w     0x248, w1
    3f58:	01 0f 78    	mov.w     w1, [w14]

    // Write high byte of DAC3 value
    SPI1BUF = dac16_dac3 >> 8;
    3f5a:	30 41 80    	mov.w     0x826, w0
    3f5c:	48 00 de    	lsr.w     w0, #0x8, w0
    3f5e:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f60:	00 00 00    	nop       

00003f62 <.L81>:
    3f62:	00 12 80    	mov.w     0x240, w0
    3f64:	61 00 60    	and.w     w0, #0x1, w0
    3f66:	00 00 e0    	cp0.w     w0
    3f68:	fc ff 32    	bra       Z, 0x3f62 <.L81>
    temp = SPI1BUF;
    3f6a:	41 12 80    	mov.w     0x248, w1
    3f6c:	01 0f 78    	mov.w     w1, [w14]

    // Write low byte of DAC3 value
    SPI1BUF = dac16_dac3 & 0xFF;
    3f6e:	31 41 80    	mov.w     0x826, w1
    3f70:	f0 0f 20    	mov.w     #0xff, w0
    3f72:	00 80 60    	and.w     w1, w0, w0
    3f74:	40 12 88    	mov.w     w0, 0x248
    while (SPI1STATbits.SPIRBF == 0) {}
    3f76:	00 00 00    	nop       

00003f78 <.L82>:
    3f78:	00 12 80    	mov.w     0x240, w0
    3f7a:	61 00 60    	and.w     w0, #0x1, w0
    3f7c:	00 00 e0    	cp0.w     w0
    3f7e:	fc ff 32    	bra       Z, 0x3f78 <.L82>
    temp = SPI1BUF;
    3f80:	41 12 80    	mov.w     0x248, w1
    3f82:	01 0f 78    	mov.w     w1, [w14]

    DAC_CSN = 1;
    3f84:	dd 02 a8    	bset.b    0x2dd, #0x0
}
    3f86:	00 80 fa    	ulnk      
    3f88:	00 00 06    	return    

00003f8a <_init_adc24>:

// Functions for interfacing with the 2-channel, 24-bit sigma-delta ADC (ADS1292)
void init_adc24(void) {
    3f8a:	06 00 fa    	lnk       #0x6
    uint8_t *RPOR, *RPINR;
    uint16_t i;

    // Configure ADC24 pins, SPI peripheral (SPI2), and clock (OC1)
    ADC_CSN_DIR = OUT; ADC_CSN = 1;
    3f8c:	e8 a2 a9    	bclr.b    0x2e8, #0x5
    3f8e:	ec a2 a8    	bset.b    0x2ec, #0x5
    ADC_SCK_DIR = OUT; ADC_SCK = 0;
    3f90:	c9 e2 a9    	bclr.b    0x2c9, #0x7
    3f92:	cd e2 a9    	bclr.b    0x2cd, #0x7
    ADC_MOSI_DIR = OUT; ADC_MOSI = 0;
    3f94:	e8 82 a9    	bclr.b    0x2e8, #0x4
    3f96:	ec 82 a9    	bclr.b    0x2ec, #0x4
    ADC_MISO_DIR = IN;
    3f98:	c9 c2 a8    	bset.b    0x2c9, #0x6
    ADC_START_DIR = OUT; ADC_START = 0;
    3f9a:	f1 02 a9    	bclr.b    0x2f1, #0x0
    3f9c:	f5 02 a9    	bclr.b    0x2f5, #0x0
    ADC_DRDY_DIR = IN;
    3f9e:	e8 62 a8    	bset.b    0x2e8, #0x3
    ADC_CLKSEL_DIR = OUT; ADC_CLKSEL = 0;
    3fa0:	d1 82 a9    	bclr.b    0x2d1, #0x4
    3fa2:	d5 82 a9    	bclr.b    0x2d5, #0x4
    ADC_CLK_DIR = OUT; ADC_CLK = 0;
    3fa4:	c8 82 a9    	bclr.b    0x2c8, #0x4
    3fa6:	cc 82 a9    	bclr.b    0x2cc, #0x4

    RPOR = (uint8_t *)&RPOR0;
    3fa8:	00 6c 20    	mov.w     #0x6c0, w0
    3faa:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    3fac:	00 68 20    	mov.w     #0x680, w0
    3fae:	20 07 98    	mov.w     w0, [w14+4]

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    3fb0:	11 3a 80    	mov.w     0x742, w1
    3fb2:	f0 0b 20    	mov.w     #0xbf, w0
    3fb4:	00 81 60    	and.w     w1, w0, w2
    3fb6:	60 04 20    	mov.w     #0x46, w0
    3fb8:	71 05 20    	mov.w     #0x57, w1
    3fba:	23 74 20    	mov.w     #0x742, w3
    3fbc:	80 49 78    	mov.b     w0, [w3]
    3fbe:	81 49 78    	mov.b     w1, [w3]
    3fc0:	82 49 78    	mov.b     w2, [w3]
    RPINR[MISO2_RP] = ADC_MISO_RP;
    3fc2:	2e 00 90    	mov.w     [w14+4], w0
    3fc4:	c0 02 b0    	add.w     #0x2c, w0
    3fc6:	e1 c0 b3    	mov.b     #0xe, w1
    3fc8:	01 48 78    	mov.b     w1, [w0]
    RPOR[ADC_MOSI_RP] = MOSI2_RP;
    3fca:	1e 00 90    	mov.w     [w14+2], w0
    3fcc:	6a 00 40    	add.w     w0, #0xa, w0
    3fce:	a1 c0 b3    	mov.b     #0xa, w1
    3fd0:	01 48 78    	mov.b     w1, [w0]
    RPOR[ADC_SCK_RP] = SCK2OUT_RP;
    3fd2:	1e 00 90    	mov.w     [w14+2], w0
    3fd4:	7d 00 40    	add.w     w0, #0x1d, w0
    3fd6:	b1 c0 b3    	mov.b     #0xb, w1
    3fd8:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    3fda:	10 3a 80    	mov.w     0x742, w0
    3fdc:	00 01 78    	mov.w     w0, w2
    3fde:	02 60 a0    	bset.w    w2, #0x6
    3fe0:	60 04 20    	mov.w     #0x46, w0
    3fe2:	71 05 20    	mov.w     #0x57, w1
    3fe4:	23 74 20    	mov.w     #0x742, w3
    3fe6:	80 49 78    	mov.b     w0, [w3]
    3fe8:	81 49 78    	mov.b     w1, [w3]
    3fea:	82 49 78    	mov.b     w2, [w3]

    SPI2CON1 = 0x0032;      // SPI2 mode = 1, SCK freq = 1 MHz
    3fec:	20 03 20    	mov.w     #0x32, w0
    3fee:	10 13 88    	mov.w     w0, 0x262
    SPI2CON2 = 0;
    3ff0:	64 22 ef    	clr.w     0x264
    SPI2STAT = 0x8000;
    3ff2:	00 00 28    	mov.w     #0x8000, w0
    3ff4:	00 13 88    	mov.w     w0, 0x260

    __builtin_write_OSCCONL(OSCCON & 0xBF);
    3ff6:	11 3a 80    	mov.w     0x742, w1
    3ff8:	f0 0b 20    	mov.w     #0xbf, w0
    3ffa:	00 81 60    	and.w     w1, w0, w2
    3ffc:	60 04 20    	mov.w     #0x46, w0
    3ffe:	71 05 20    	mov.w     #0x57, w1
    4000:	23 74 20    	mov.w     #0x742, w3
    4002:	80 49 78    	mov.b     w0, [w3]
    4004:	81 49 78    	mov.b     w1, [w3]
    4006:	82 49 78    	mov.b     w2, [w3]
    RPOR[ADC_CLK_RP] = OC1_RP;
    4008:	1e 00 90    	mov.w     [w14+2], w0
    400a:	7c 00 40    	add.w     w0, #0x1c, w0
    400c:	21 c1 b3    	mov.b     #0x12, w1
    400e:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    4010:	10 3a 80    	mov.w     0x742, w0
    4012:	00 01 78    	mov.w     w0, w2
    4014:	02 60 a0    	bset.w    w2, #0x6
    4016:	60 04 20    	mov.w     #0x46, w0
    4018:	71 05 20    	mov.w     #0x57, w1
    401a:	23 74 20    	mov.w     #0x742, w3
    401c:	80 49 78    	mov.b     w0, [w3]
    401e:	81 49 78    	mov.b     w1, [w3]
    4020:	82 49 78    	mov.b     w2, [w3]

    OC1CON1 = 0x1C06;       // Configure OC1 to produce a 551.7 kHz, 50% duty
    4022:	60 c0 21    	mov.w     #0x1c06, w0
    4024:	80 0c 88    	mov.w     w0, 0x190
    OC1CON2 = 0x001F;       //   cycle PWM output.  With OSR = 256, we get a 
    4026:	f0 01 20    	mov.w     #0x1f, w0
    4028:	90 0c 88    	mov.w     w0, 0x192
    OC1RS = 28;             //   sample rate of 538.8 S/s and 9 sample times 
    402a:	c0 01 20    	mov.w     #0x1c, w0
    402c:	a0 0c 88    	mov.w     w0, 0x194
    OC1R = 14;              //   is very close to 16.67 ms (i.e., 1/60 s).
    402e:	e0 00 20    	mov.w     #0xe, w0
    4030:	b0 0c 88    	mov.w     w0, 0x196

    adc24_ch1offset = 0;
    4032:	28 28 ef    	clr.w     0x828
    4034:	2a 28 ef    	clr.w     0x82a
    adc24_ch2offset = 0;
    4036:	2c 28 ef    	clr.w     0x82c
    4038:	2e 28 ef    	clr.w     0x82e

    // Wait for 20 ms to allow ADS1292 to start up
    for (i = 64000; i; i--) {}
    403a:	00 a0 2f    	mov.w     #0xfa00, w0
    403c:	00 0f 78    	mov.w     w0, [w14]
    403e:	01 00 37    	bra       0x4042 <.L84>

00004040 <.L85>:
    4040:	1e 0f e9    	dec.w     [w14], [w14]

00004042 <.L84>:
    4042:	1e 00 78    	mov.w     [w14], w0
    4044:	00 00 e0    	cp0.w     w0
    4046:	fc ff 3a    	bra       NZ, 0x4040 <.L85>

    adc24_command(ADC24_CMD_RESET);
    4048:	60 c0 b3    	mov.b     #0x6, w0
    404a:	62 00 07    	rcall     0x4110 <_adc24_command> <.LFB24> <.LFE23>

    // Wait for 36 clock periods (9 TMOD = 65.25 µs) for reset to complete
    for (i = 208; i; i--) {}
    404c:	00 0d 20    	mov.w     #0xd0, w0
    404e:	00 0f 78    	mov.w     w0, [w14]
    4050:	01 00 37    	bra       0x4054 <.L86>

00004052 <.L87>:
    4052:	1e 0f e9    	dec.w     [w14], [w14]

00004054 <.L86>:
    4054:	1e 00 78    	mov.w     [w14], w0
    4056:	00 00 e0    	cp0.w     w0
    4058:	fc ff 3a    	bra       NZ, 0x4052 <.L87>

    adc24_command(ADC24_CMD_SDATAC);
    405a:	10 c1 b3    	mov.b     #0x11, w0
    405c:	59 00 07    	rcall     0x4110 <_adc24_command> <.LFB24> <.LFE23>

    // Configure for continuous conversion mode, OSR = 256 (about 500 S/s)
    adc24_write_reg(ADC24_REG_CONFIG1, 0b00000010);
    405e:	21 c0 b3    	mov.b     #0x2, w1
    4060:	10 c0 b3    	mov.b     #0x1, w0
    4062:	74 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Set GPIO pins as outputs with low values
    adc24_write_reg(ADC24_REG_GPIO, 0b00000000);
    4064:	80 40 eb    	clr.b     w1
    4066:	b0 c0 b3    	mov.b     #0xb, w0
    4068:	71 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Configure CH1 for normal operation, PGA gain = 1
    adc24_write_reg(ADC24_REG_CH1SET, 0b000010000);
    406a:	01 c1 b3    	mov.b     #0x10, w1
    406c:	40 c0 b3    	mov.b     #0x4, w0
    406e:	6e 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Configure CH2 for normal operation, PGA gain = 1
    adc24_write_reg(ADC24_REG_CH2SET, 0b000010000);
    4070:	01 c1 b3    	mov.b     #0x10, w1
    4072:	50 c0 b3    	mov.b     #0x5, w0
    4074:	6b 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    adc24_calibrate();
    4076:	02 00 07    	rcall     0x407c <_adc24_calibrate> <.LFB23> <.LFE22>
}
    4078:	00 80 fa    	ulnk      
    407a:	00 00 06    	return    

0000407c <_adc24_calibrate>:

void adc24_calibrate(void) {
    407c:	0a 00 fa    	lnk       #0xa
    uint16_t i;
    int32_t ch1val, ch2val;

    // Configure CH1 for normal operation, PGA gain = 1, inputs shorted to
    //   measure CH1 offset
    adc24_write_reg(ADC24_REG_CH1SET, 0b000010001);
    407e:	11 c1 b3    	mov.b     #0x11, w1
    4080:	40 c0 b3    	mov.b     #0x4, w0
    4082:	64 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Configure CH2 for normal operation, PGA gain = 1, inputs shorted to
    //   measure CH2 offset
    adc24_write_reg(ADC24_REG_CH2SET, 0b000010001);
    4084:	11 c1 b3    	mov.b     #0x11, w1
    4086:	50 c0 b3    	mov.b     #0x5, w0
    4088:	61 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Measure the offset of both channels
    adc24_ch1offset = 0;
    408a:	28 28 ef    	clr.w     0x828
    408c:	2a 28 ef    	clr.w     0x82a
    adc24_ch2offset = 0;
    408e:	2c 28 ef    	clr.w     0x82c
    4090:	2e 28 ef    	clr.w     0x82e

    ADC_START = 1;
    4092:	f5 02 a8    	bset.b    0x2f5, #0x0

    while (ADC_DRDY == 1) {}
    4094:	00 00 00    	nop       

00004096 <.L89>:
    4096:	50 17 80    	mov.w     0x2ea, w0
    4098:	68 00 60    	and.w     w0, #0x8, w0
    409a:	00 00 e0    	cp0.w     w0
    409c:	fc ff 3a    	bra       NZ, 0x4096 <.L89>
    adc24_read_data(&ch1val, &ch2val);
    409e:	e6 00 47    	add.w     w14, #0x6, w1
    40a0:	0e 80 e8    	inc2.w    w14, w0
    40a2:	d3 00 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    for (i = 0; i < 9; i++) {
    40a4:	00 00 eb    	clr.w     w0
    40a6:	00 0f 78    	mov.w     w0, [w14]
    40a8:	19 00 37    	bra       0x40dc <.L90>

000040aa <.L93>:
        while (ADC_DRDY == 1) {}
    40aa:	00 00 00    	nop       

000040ac <.L91>:
    40ac:	50 17 80    	mov.w     0x2ea, w0
    40ae:	68 00 60    	and.w     w0, #0x8, w0
    40b0:	00 00 e0    	cp0.w     w0
    40b2:	fc ff 3a    	bra       NZ, 0x40ac <.L91>
        adc24_read_data(&ch1val, &ch2val);
    40b4:	e6 00 47    	add.w     w14, #0x6, w1
    40b6:	0e 80 e8    	inc2.w    w14, w0
    40b8:	c8 00 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

        adc24_ch1offset += ch1val;
    40ba:	42 41 80    	mov.w     0x828, w2
    40bc:	53 41 80    	mov.w     0x82a, w3
    40be:	1e 00 90    	mov.w     [w14+2], w0
    40c0:	ae 00 90    	mov.w     [w14+4], w1
    40c2:	02 00 40    	add.w     w0, w2, w0
    40c4:	83 80 48    	addc.w    w1, w3, w1
    40c6:	40 41 88    	mov.w     w0, 0x828
    40c8:	51 41 88    	mov.w     w1, 0x82a
        adc24_ch2offset += ch2val;
    40ca:	62 41 80    	mov.w     0x82c, w2
    40cc:	73 41 80    	mov.w     0x82e, w3
    40ce:	3e 00 90    	mov.w     [w14+6], w0
    40d0:	ce 00 90    	mov.w     [w14+8], w1
    40d2:	02 00 40    	add.w     w0, w2, w0
    40d4:	83 80 48    	addc.w    w1, w3, w1
    40d6:	60 41 88    	mov.w     w0, 0x82c
    40d8:	71 41 88    	mov.w     w1, 0x82e
    40da:	1e 0f e8    	inc.w     [w14], [w14]

000040dc <.L90>:
    40dc:	1e 00 78    	mov.w     [w14], w0
    40de:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    40e0:	e4 ff 36    	bra       LEU, 0x40aa <.L93>
    }

    ADC_START = 0;
    40e2:	f5 02 a9    	bclr.b    0x2f5, #0x0

    adc24_ch1offset = adc24_ch1offset / 9;
    40e4:	40 41 80    	mov.w     0x828, w0
    40e6:	51 41 80    	mov.w     0x82a, w1
    40e8:	92 00 20    	mov.w     #0x9, w2
    40ea:	03 00 20    	mov.w     #0x0, w3
    40ec:	8e e9 07    	rcall     0x140a <___divsi3>
    40ee:	40 41 88    	mov.w     w0, 0x828
    40f0:	51 41 88    	mov.w     w1, 0x82a
    adc24_ch2offset = adc24_ch2offset / 9;
    40f2:	60 41 80    	mov.w     0x82c, w0
    40f4:	71 41 80    	mov.w     0x82e, w1
    40f6:	92 00 20    	mov.w     #0x9, w2
    40f8:	03 00 20    	mov.w     #0x0, w3
    40fa:	87 e9 07    	rcall     0x140a <___divsi3>
    40fc:	60 41 88    	mov.w     w0, 0x82c
    40fe:	71 41 88    	mov.w     w1, 0x82e

    // Configure CH1 for normal operation, PGA gain = 1
    adc24_write_reg(ADC24_REG_CH1SET, 0b000010000);
    4100:	01 c1 b3    	mov.b     #0x10, w1
    4102:	40 c0 b3    	mov.b     #0x4, w0
    4104:	23 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>

    // Configure CH2 for normal operation, PGA gain = 1
    adc24_write_reg(ADC24_REG_CH2SET, 0b000010000);
    4106:	01 c1 b3    	mov.b     #0x10, w1
    4108:	50 c0 b3    	mov.b     #0x5, w0
    410a:	20 00 07    	rcall     0x414c <_adc24_write_reg> <.LFB25> <.LFE24>
}
    410c:	00 80 fa    	ulnk      
    410e:	00 00 06    	return    

00004110 <_adc24_command>:

void adc24_command(uint8_t cmd) {
    4110:	06 00 fa    	lnk       #0x6
    4112:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t temp, i;

    ADC_CSN = 0;
    4114:	ec a2 a9    	bclr.b    0x2ec, #0x5

    SPI2BUF = (uint16_t)cmd;
    4116:	4e 40 90    	mov.b     [w14+4], w0
    4118:	00 80 fb    	ze        w0, w0
    411a:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    411c:	00 00 00    	nop       

0000411e <.L95>:
    411e:	00 13 80    	mov.w     0x260, w0
    4120:	61 00 60    	and.w     w0, #0x1, w0
    4122:	00 00 e0    	cp0.w     w0
    4124:	fc ff 32    	bra       Z, 0x411e <.L95>
    temp = SPI2BUF;
    4126:	41 13 80    	mov.w     0x268, w1
    4128:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) before raising CSN
    for (i = 22; i; i--) {}
    412a:	60 01 20    	mov.w     #0x16, w0
    412c:	00 0f 78    	mov.w     w0, [w14]
    412e:	01 00 37    	bra       0x4132 <.L96>

00004130 <.L97>:
    4130:	1e 0f e9    	dec.w     [w14], [w14]

00004132 <.L96>:
    4132:	1e 00 78    	mov.w     [w14], w0
    4134:	00 00 e0    	cp0.w     w0
    4136:	fc ff 3a    	bra       NZ, 0x4130 <.L97>

    ADC_CSN = 1;
    4138:	ec a2 a8    	bset.b    0x2ec, #0x5

    // Delay for 3 clock periods (5.5 µs) to meet minimum CSN high time
    for (i = 16; i; i--) {}
    413a:	00 01 20    	mov.w     #0x10, w0
    413c:	00 0f 78    	mov.w     w0, [w14]
    413e:	01 00 37    	bra       0x4142 <.L98>

00004140 <.L99>:
    4140:	1e 0f e9    	dec.w     [w14], [w14]

00004142 <.L98>:
    4142:	1e 00 78    	mov.w     [w14], w0
    4144:	00 00 e0    	cp0.w     w0
    4146:	fc ff 3a    	bra       NZ, 0x4140 <.L99>
}
    4148:	00 80 fa    	ulnk      
    414a:	00 00 06    	return    

0000414c <_adc24_write_reg>:

void adc24_write_reg(uint8_t reg, uint8_t val) {
    414c:	06 00 fa    	lnk       #0x6
    414e:	40 47 98    	mov.b     w0, [w14+4]
    4150:	51 47 98    	mov.b     w1, [w14+5]
    uint16_t temp, i;

    ADC_CSN = 0;
    4152:	ec a2 a9    	bclr.b    0x2ec, #0x5

    SPI2BUF = (uint16_t)(ADC24_CMD_WREG | reg);
    4154:	4e 40 90    	mov.b     [w14+4], w0
    4156:	00 64 a0    	bset.b    w0, #0x6
    4158:	00 80 fb    	ze        w0, w0
    415a:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    415c:	00 00 00    	nop       

0000415e <.L101>:
    415e:	00 13 80    	mov.w     0x260, w0
    4160:	61 00 60    	and.w     w0, #0x1, w0
    4162:	00 00 e0    	cp0.w     w0
    4164:	fc ff 32    	bra       Z, 0x415e <.L101>
    temp = SPI2BUF;
    4166:	41 13 80    	mov.w     0x268, w1
    4168:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) for multibyte instruction decode
    for (i = 22; i; i--) {}
    416a:	60 01 20    	mov.w     #0x16, w0
    416c:	00 0f 78    	mov.w     w0, [w14]
    416e:	01 00 37    	bra       0x4172 <.L102>

00004170 <.L103>:
    4170:	1e 0f e9    	dec.w     [w14], [w14]

00004172 <.L102>:
    4172:	1e 00 78    	mov.w     [w14], w0
    4174:	00 00 e0    	cp0.w     w0
    4176:	fc ff 3a    	bra       NZ, 0x4170 <.L103>

    SPI2BUF = 0;
    4178:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    417a:	00 00 00    	nop       

0000417c <.L104>:
    417c:	00 13 80    	mov.w     0x260, w0
    417e:	61 00 60    	and.w     w0, #0x1, w0
    4180:	00 00 e0    	cp0.w     w0
    4182:	fc ff 32    	bra       Z, 0x417c <.L104>
    temp = SPI2BUF;
    4184:	41 13 80    	mov.w     0x268, w1
    4186:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) for multibyte instruction decode
    for (i = 22; i; i--) {}
    4188:	60 01 20    	mov.w     #0x16, w0
    418a:	00 0f 78    	mov.w     w0, [w14]
    418c:	01 00 37    	bra       0x4190 <.L105>

0000418e <.L106>:
    418e:	1e 0f e9    	dec.w     [w14], [w14]

00004190 <.L105>:
    4190:	1e 00 78    	mov.w     [w14], w0
    4192:	00 00 e0    	cp0.w     w0
    4194:	fc ff 3a    	bra       NZ, 0x418e <.L106>

    SPI2BUF = (uint16_t)val;
    4196:	5e 40 90    	mov.b     [w14+5], w0
    4198:	00 80 fb    	ze        w0, w0
    419a:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    419c:	00 00 00    	nop       

0000419e <.L107>:
    419e:	00 13 80    	mov.w     0x260, w0
    41a0:	61 00 60    	and.w     w0, #0x1, w0
    41a2:	00 00 e0    	cp0.w     w0
    41a4:	fc ff 32    	bra       Z, 0x419e <.L107>
    temp = SPI2BUF;
    41a6:	41 13 80    	mov.w     0x268, w1
    41a8:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) before raising CSN
    for (i = 22; i; i--) {}
    41aa:	60 01 20    	mov.w     #0x16, w0
    41ac:	00 0f 78    	mov.w     w0, [w14]
    41ae:	01 00 37    	bra       0x41b2 <.L108>

000041b0 <.L109>:
    41b0:	1e 0f e9    	dec.w     [w14], [w14]

000041b2 <.L108>:
    41b2:	1e 00 78    	mov.w     [w14], w0
    41b4:	00 00 e0    	cp0.w     w0
    41b6:	fc ff 3a    	bra       NZ, 0x41b0 <.L109>

    ADC_CSN = 1;
    41b8:	ec a2 a8    	bset.b    0x2ec, #0x5

    // Delay for 3 clock periods (5.5 µs) to meet minimum CSN high time
    for (i = 16; i; i--) {}
    41ba:	00 01 20    	mov.w     #0x10, w0
    41bc:	00 0f 78    	mov.w     w0, [w14]
    41be:	01 00 37    	bra       0x41c2 <.L110>

000041c0 <.L111>:
    41c0:	1e 0f e9    	dec.w     [w14], [w14]

000041c2 <.L110>:
    41c2:	1e 00 78    	mov.w     [w14], w0
    41c4:	00 00 e0    	cp0.w     w0
    41c6:	fc ff 3a    	bra       NZ, 0x41c0 <.L111>
}
    41c8:	00 80 fa    	ulnk      
    41ca:	00 00 06    	return    

000041cc <_adc24_read_reg>:

uint8_t adc24_read_reg(uint8_t reg) {
    41cc:	06 00 fa    	lnk       #0x6
    41ce:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t temp, i;

    ADC_CSN = 0;
    41d0:	ec a2 a9    	bclr.b    0x2ec, #0x5

    SPI2BUF = (uint16_t)(ADC24_CMD_RREG | reg);
    41d2:	4e 40 90    	mov.b     [w14+4], w0
    41d4:	00 54 a0    	bset.b    w0, #0x5
    41d6:	00 80 fb    	ze        w0, w0
    41d8:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    41da:	00 00 00    	nop       

000041dc <.L113>:
    41dc:	00 13 80    	mov.w     0x260, w0
    41de:	61 00 60    	and.w     w0, #0x1, w0
    41e0:	00 00 e0    	cp0.w     w0
    41e2:	fc ff 32    	bra       Z, 0x41dc <.L113>
    temp = SPI2BUF;
    41e4:	41 13 80    	mov.w     0x268, w1
    41e6:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) for multibyte instruction decode
    for (i = 22; i; i--) {}
    41e8:	60 01 20    	mov.w     #0x16, w0
    41ea:	00 0f 78    	mov.w     w0, [w14]
    41ec:	01 00 37    	bra       0x41f0 <.L114>

000041ee <.L115>:
    41ee:	1e 0f e9    	dec.w     [w14], [w14]

000041f0 <.L114>:
    41f0:	1e 00 78    	mov.w     [w14], w0
    41f2:	00 00 e0    	cp0.w     w0
    41f4:	fc ff 3a    	bra       NZ, 0x41ee <.L115>

    SPI2BUF = 0;
    41f6:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    41f8:	00 00 00    	nop       

000041fa <.L116>:
    41fa:	00 13 80    	mov.w     0x260, w0
    41fc:	61 00 60    	and.w     w0, #0x1, w0
    41fe:	00 00 e0    	cp0.w     w0
    4200:	fc ff 32    	bra       Z, 0x41fa <.L116>
    temp = SPI2BUF;
    4202:	41 13 80    	mov.w     0x268, w1
    4204:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) for multibyte instruction decode
    for (i = 22; i; i--) {}
    4206:	60 01 20    	mov.w     #0x16, w0
    4208:	00 0f 78    	mov.w     w0, [w14]
    420a:	01 00 37    	bra       0x420e <.L117>

0000420c <.L118>:
    420c:	1e 0f e9    	dec.w     [w14], [w14]

0000420e <.L117>:
    420e:	1e 00 78    	mov.w     [w14], w0
    4210:	00 00 e0    	cp0.w     w0
    4212:	fc ff 3a    	bra       NZ, 0x420c <.L118>

    SPI2BUF = 0;
    4214:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4216:	00 00 00    	nop       

00004218 <.L119>:
    4218:	00 13 80    	mov.w     0x260, w0
    421a:	61 00 60    	and.w     w0, #0x1, w0
    421c:	00 00 e0    	cp0.w     w0
    421e:	fc ff 32    	bra       Z, 0x4218 <.L119>
    temp = SPI2BUF;
    4220:	41 13 80    	mov.w     0x268, w1
    4222:	11 07 98    	mov.w     w1, [w14+2]

    // Delay for 4 clock periods (7.25 µs) before raising CSN
    for (i = 22; i; i--) {}
    4224:	60 01 20    	mov.w     #0x16, w0
    4226:	00 0f 78    	mov.w     w0, [w14]
    4228:	01 00 37    	bra       0x422c <.L120>

0000422a <.L121>:
    422a:	1e 0f e9    	dec.w     [w14], [w14]

0000422c <.L120>:
    422c:	1e 00 78    	mov.w     [w14], w0
    422e:	00 00 e0    	cp0.w     w0
    4230:	fc ff 3a    	bra       NZ, 0x422a <.L121>

    ADC_CSN = 1;
    4232:	ec a2 a8    	bset.b    0x2ec, #0x5

    // Delay for 3 clock periods (5.5 µs) to meet minimum CSN high time
    for (i = 16; i; i--) {}
    4234:	00 01 20    	mov.w     #0x10, w0
    4236:	00 0f 78    	mov.w     w0, [w14]
    4238:	01 00 37    	bra       0x423c <.L122>

0000423a <.L123>:
    423a:	1e 0f e9    	dec.w     [w14], [w14]

0000423c <.L122>:
    423c:	1e 00 78    	mov.w     [w14], w0
    423e:	00 00 e0    	cp0.w     w0
    4240:	fc ff 3a    	bra       NZ, 0x423a <.L123>

    return (uint8_t)temp;
    4242:	1e 00 90    	mov.w     [w14+2], w0
    4244:	00 40 78    	mov.b     w0, w0
}
    4246:	00 80 fa    	ulnk      
    4248:	00 00 06    	return    

0000424a <_adc24_read_data>:

void adc24_read_data(int32_t *ch1val, int32_t *ch2val) {
    424a:	10 00 fa    	lnk       #0x10
    424c:	60 07 98    	mov.w     w0, [w14+12]
    424e:	71 07 98    	mov.w     w1, [w14+14]
    uint16_t temp, i;
    int32_t val1, val2;

    ADC_CSN = 0;
    4250:	ec a2 a9    	bclr.b    0x2ec, #0x5

    // Send the RDATA command
    SPI2BUF = (uint16_t)ADC24_CMD_RDATA;
    4252:	20 01 20    	mov.w     #0x12, w0
    4254:	40 13 88    	mov.w     w0, 0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4256:	00 00 00    	nop       

00004258 <.L125>:
    4258:	00 13 80    	mov.w     0x260, w0
    425a:	61 00 60    	and.w     w0, #0x1, w0
    425c:	00 00 e0    	cp0.w     w0
    425e:	fc ff 32    	bra       Z, 0x4258 <.L125>
    temp = SPI2BUF;
    4260:	41 13 80    	mov.w     0x268, w1
    4262:	51 07 98    	mov.w     w1, [w14+10]

    // Read three bytes of status and discard
    SPI2BUF = 0;
    4264:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4266:	00 00 00    	nop       

00004268 <.L126>:
    4268:	00 13 80    	mov.w     0x260, w0
    426a:	61 00 60    	and.w     w0, #0x1, w0
    426c:	00 00 e0    	cp0.w     w0
    426e:	fc ff 32    	bra       Z, 0x4268 <.L126>
    temp = SPI2BUF;
    4270:	42 13 80    	mov.w     0x268, w2
    4272:	52 07 98    	mov.w     w2, [w14+10]

    SPI2BUF = 0;
    4274:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4276:	00 00 00    	nop       

00004278 <.L127>:
    4278:	00 13 80    	mov.w     0x260, w0
    427a:	61 00 60    	and.w     w0, #0x1, w0
    427c:	00 00 e0    	cp0.w     w0
    427e:	fc ff 32    	bra       Z, 0x4278 <.L127>
    temp = SPI2BUF;
    4280:	43 13 80    	mov.w     0x268, w3
    4282:	53 07 98    	mov.w     w3, [w14+10]

    SPI2BUF = 0;
    4284:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4286:	00 00 00    	nop       

00004288 <.L128>:
    4288:	00 13 80    	mov.w     0x260, w0
    428a:	61 00 60    	and.w     w0, #0x1, w0
    428c:	00 00 e0    	cp0.w     w0
    428e:	fc ff 32    	bra       Z, 0x4288 <.L128>
    temp = SPI2BUF;
    4290:	41 13 80    	mov.w     0x268, w1
    4292:	51 07 98    	mov.w     w1, [w14+10]

    // Read 24-bit CH1 value
    SPI2BUF = 0;
    4294:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4296:	00 00 00    	nop       

00004298 <.L129>:
    4298:	00 13 80    	mov.w     0x260, w0
    429a:	61 00 60    	and.w     w0, #0x1, w0
    429c:	00 00 e0    	cp0.w     w0
    429e:	fc ff 32    	bra       Z, 0x4298 <.L129>
    val1 = (int32_t)SPI2BUF;
    42a0:	40 13 80    	mov.w     0x268, w0
    42a2:	80 00 eb    	clr.w     w1
    42a4:	10 07 98    	mov.w     w0, [w14+2]
    42a6:	21 07 98    	mov.w     w1, [w14+4]

    SPI2BUF = 0;
    42a8:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    42aa:	00 00 00    	nop       

000042ac <.L130>:
    42ac:	00 13 80    	mov.w     0x260, w0
    42ae:	61 00 60    	and.w     w0, #0x1, w0
    42b0:	00 00 e0    	cp0.w     w0
    42b2:	fc ff 32    	bra       Z, 0x42ac <.L130>
    val1 = (val1 << 8) | SPI2BUF;
    42b4:	1e 00 90    	mov.w     [w14+2], w0
    42b6:	ae 00 90    	mov.w     [w14+4], w1
    42b8:	48 09 dd    	sl.w      w1, #0x8, w2
    42ba:	c8 01 de    	lsr.w     w0, #0x8, w3
    42bc:	83 01 71    	ior.w     w2, w3, w3
    42be:	48 01 dd    	sl.w      w0, #0x8, w2
    42c0:	40 13 80    	mov.w     0x268, w0
    42c2:	80 00 eb    	clr.w     w1
    42c4:	00 00 71    	ior.w     w2, w0, w0
    42c6:	81 80 71    	ior.w     w3, w1, w1
    42c8:	10 07 98    	mov.w     w0, [w14+2]
    42ca:	21 07 98    	mov.w     w1, [w14+4]

    SPI2BUF = 0;
    42cc:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    42ce:	00 00 00    	nop       

000042d0 <.L131>:
    42d0:	00 13 80    	mov.w     0x260, w0
    42d2:	61 00 60    	and.w     w0, #0x1, w0
    42d4:	00 00 e0    	cp0.w     w0
    42d6:	fc ff 32    	bra       Z, 0x42d0 <.L131>
    val1 = (val1 << 8) | SPI2BUF;
    42d8:	1e 00 90    	mov.w     [w14+2], w0
    42da:	ae 00 90    	mov.w     [w14+4], w1
    42dc:	48 09 dd    	sl.w      w1, #0x8, w2
    42de:	c8 01 de    	lsr.w     w0, #0x8, w3
    42e0:	83 01 71    	ior.w     w2, w3, w3
    42e2:	48 01 dd    	sl.w      w0, #0x8, w2
    42e4:	40 13 80    	mov.w     0x268, w0
    42e6:	80 00 eb    	clr.w     w1
    42e8:	00 00 71    	ior.w     w2, w0, w0
    42ea:	81 80 71    	ior.w     w3, w1, w1
    42ec:	10 07 98    	mov.w     w0, [w14+2]
    42ee:	21 07 98    	mov.w     w1, [w14+4]

    // Read 24-bit CH2 value
    SPI2BUF = 0;
    42f0:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    42f2:	00 00 00    	nop       

000042f4 <.L132>:
    42f4:	00 13 80    	mov.w     0x260, w0
    42f6:	61 00 60    	and.w     w0, #0x1, w0
    42f8:	00 00 e0    	cp0.w     w0
    42fa:	fc ff 32    	bra       Z, 0x42f4 <.L132>
    val2 = (int32_t)SPI2BUF;
    42fc:	40 13 80    	mov.w     0x268, w0
    42fe:	80 00 eb    	clr.w     w1
    4300:	30 07 98    	mov.w     w0, [w14+6]
    4302:	41 07 98    	mov.w     w1, [w14+8]

    SPI2BUF = 0;
    4304:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    4306:	00 00 00    	nop       

00004308 <.L133>:
    4308:	00 13 80    	mov.w     0x260, w0
    430a:	61 00 60    	and.w     w0, #0x1, w0
    430c:	00 00 e0    	cp0.w     w0
    430e:	fc ff 32    	bra       Z, 0x4308 <.L133>
    val2 = (val2 << 8) | SPI2BUF;
    4310:	3e 00 90    	mov.w     [w14+6], w0
    4312:	ce 00 90    	mov.w     [w14+8], w1
    4314:	48 09 dd    	sl.w      w1, #0x8, w2
    4316:	c8 01 de    	lsr.w     w0, #0x8, w3
    4318:	83 01 71    	ior.w     w2, w3, w3
    431a:	48 01 dd    	sl.w      w0, #0x8, w2
    431c:	40 13 80    	mov.w     0x268, w0
    431e:	80 00 eb    	clr.w     w1
    4320:	00 00 71    	ior.w     w2, w0, w0
    4322:	81 80 71    	ior.w     w3, w1, w1
    4324:	30 07 98    	mov.w     w0, [w14+6]
    4326:	41 07 98    	mov.w     w1, [w14+8]

    SPI2BUF = 0;
    4328:	68 22 ef    	clr.w     0x268
    while (SPI2STATbits.SPIRBF == 0) {}
    432a:	00 00 00    	nop       

0000432c <.L134>:
    432c:	00 13 80    	mov.w     0x260, w0
    432e:	61 00 60    	and.w     w0, #0x1, w0
    4330:	00 00 e0    	cp0.w     w0
    4332:	fc ff 32    	bra       Z, 0x432c <.L134>
    val2 = (val2 << 8) | SPI2BUF;
    4334:	3e 00 90    	mov.w     [w14+6], w0
    4336:	ce 00 90    	mov.w     [w14+8], w1
    4338:	48 09 dd    	sl.w      w1, #0x8, w2
    433a:	c8 01 de    	lsr.w     w0, #0x8, w3
    433c:	83 01 71    	ior.w     w2, w3, w3
    433e:	48 01 dd    	sl.w      w0, #0x8, w2
    4340:	40 13 80    	mov.w     0x268, w0
    4342:	80 00 eb    	clr.w     w1
    4344:	00 00 71    	ior.w     w2, w0, w0
    4346:	81 80 71    	ior.w     w3, w1, w1
    4348:	30 07 98    	mov.w     w0, [w14+6]
    434a:	41 07 98    	mov.w     w1, [w14+8]

    // Delay for 4 clock periods (7.25 µs) before raising CSN
    for (i = 22; i; i--) {}
    434c:	60 01 20    	mov.w     #0x16, w0
    434e:	00 0f 78    	mov.w     w0, [w14]
    4350:	01 00 37    	bra       0x4354 <.L135>

00004352 <.L136>:
    4352:	1e 0f e9    	dec.w     [w14], [w14]

00004354 <.L135>:
    4354:	1e 00 78    	mov.w     [w14], w0
    4356:	00 00 e0    	cp0.w     w0
    4358:	fc ff 3a    	bra       NZ, 0x4352 <.L136>

    ADC_CSN = 1;
    435a:	ec a2 a8    	bset.b    0x2ec, #0x5

    // Delay for 3 clock periods (5.5 µs) to meet minimum CSN high time
    for (i = 16; i; i--) {}
    435c:	00 01 20    	mov.w     #0x10, w0
    435e:	00 0f 78    	mov.w     w0, [w14]
    4360:	01 00 37    	bra       0x4364 <.L137>

00004362 <.L138>:
    4362:	1e 0f e9    	dec.w     [w14], [w14]

00004364 <.L137>:
    4364:	1e 00 78    	mov.w     [w14], w0
    4366:	00 00 e0    	cp0.w     w0
    4368:	fc ff 3a    	bra       NZ, 0x4362 <.L138>

    // Sign extend CH1 value to 32 bits
    if (val1 > 0x7FFFFF)
    436a:	1e 01 90    	mov.w     [w14+2], w2
    436c:	ae 01 90    	mov.w     [w14+4], w3
    436e:	f0 ff 2f    	mov.w     #0xffff, w0
    4370:	f1 07 20    	mov.w     #0x7f, w1
    4372:	80 0f 51    	sub.w     w2, w0, [w15]
    4374:	81 8f 59    	subb.w    w3, w1, [w15]
    4376:	08 00 34    	bra       LE, 0x4388 <.L139>
        val1 |= 0xFF000000;
    4378:	1e 01 90    	mov.w     [w14+2], w2
    437a:	ae 01 90    	mov.w     [w14+4], w3
    437c:	00 00 20    	mov.w     #0x0, w0
    437e:	01 f0 2f    	mov.w     #0xff00, w1
    4380:	00 00 71    	ior.w     w2, w0, w0
    4382:	81 80 71    	ior.w     w3, w1, w1
    4384:	10 07 98    	mov.w     w0, [w14+2]
    4386:	21 07 98    	mov.w     w1, [w14+4]

00004388 <.L139>:

    // Sign extend CH2 value to 32 bits
    if (val2 > 0x7FFFFF)
    4388:	3e 01 90    	mov.w     [w14+6], w2
    438a:	ce 01 90    	mov.w     [w14+8], w3
    438c:	f0 ff 2f    	mov.w     #0xffff, w0
    438e:	f1 07 20    	mov.w     #0x7f, w1
    4390:	80 0f 51    	sub.w     w2, w0, [w15]
    4392:	81 8f 59    	subb.w    w3, w1, [w15]
    4394:	08 00 34    	bra       LE, 0x43a6 <.L140>
        val2 |= 0xFF000000;
    4396:	3e 01 90    	mov.w     [w14+6], w2
    4398:	ce 01 90    	mov.w     [w14+8], w3
    439a:	00 00 20    	mov.w     #0x0, w0
    439c:	01 f0 2f    	mov.w     #0xff00, w1
    439e:	00 00 71    	ior.w     w2, w0, w0
    43a0:	81 80 71    	ior.w     w3, w1, w1
    43a2:	30 07 98    	mov.w     w0, [w14+6]
    43a4:	41 07 98    	mov.w     w1, [w14+8]

000043a6 <.L140>:

    *ch1val = val1;
    43a6:	6e 00 90    	mov.w     [w14+12], w0
    43a8:	1e 01 90    	mov.w     [w14+2], w2
    43aa:	ae 01 90    	mov.w     [w14+4], w3
    43ac:	02 88 be    	mov.d     w2, [w0]
    *ch2val = val2;
    43ae:	7e 00 90    	mov.w     [w14+14], w0
    43b0:	3e 01 90    	mov.w     [w14+6], w2
    43b2:	ce 01 90    	mov.w     [w14+8], w3
    43b4:	02 88 be    	mov.d     w2, [w0]
}
    43b6:	00 80 fa    	ulnk      
    43b8:	00 00 06    	return    

000043ba <_adc24_meas_both>:

void adc24_meas_both(int32_t *ch1val, int32_t *ch2val) {
    43ba:	0c 00 fa    	lnk       #0xc
    43bc:	40 07 98    	mov.w     w0, [w14+8]
    43be:	51 07 98    	mov.w     w1, [w14+10]
    int32_t val1, val2;

    ADC_START = 1;
    43c0:	f5 02 a8    	bset.b    0x2f5, #0x0

    while (ADC_DRDY == 1) {}
    43c2:	00 00 00    	nop       

000043c4 <.L142>:
    43c4:	50 17 80    	mov.w     0x2ea, w0
    43c6:	68 00 60    	and.w     w0, #0x8, w0
    43c8:	00 00 e0    	cp0.w     w0
    43ca:	fc ff 3a    	bra       NZ, 0x43c4 <.L142>
    adc24_read_data(&val1, &val2);
    43cc:	64 00 47    	add.w     w14, #0x4, w0
    43ce:	80 00 78    	mov.w     w0, w1
    43d0:	0e 00 78    	mov.w     w14, w0
    43d2:	3b ff 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    while (ADC_DRDY == 1) {}
    43d4:	00 00 00    	nop       

000043d6 <.L143>:
    43d6:	50 17 80    	mov.w     0x2ea, w0
    43d8:	68 00 60    	and.w     w0, #0x8, w0
    43da:	00 00 e0    	cp0.w     w0
    43dc:	fc ff 3a    	bra       NZ, 0x43d6 <.L143>
    adc24_read_data(&val1, &val2);
    43de:	64 00 47    	add.w     w14, #0x4, w0
    43e0:	80 00 78    	mov.w     w0, w1
    43e2:	0e 00 78    	mov.w     w14, w0
    43e4:	32 ff 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    ADC_START = 0;
    43e6:	f5 02 a9    	bclr.b    0x2f5, #0x0

    *ch1val = val1 - adc24_ch1offset;
    43e8:	1e 01 be    	mov.d     [w14], w2
    43ea:	40 41 80    	mov.w     0x828, w0
    43ec:	51 41 80    	mov.w     0x82a, w1
    43ee:	00 00 51    	sub.w     w2, w0, w0
    43f0:	81 80 59    	subb.w    w3, w1, w1
    43f2:	4e 01 90    	mov.w     [w14+8], w2
    43f4:	00 89 be    	mov.d     w0, [w2]
    *ch2val = val2 - adc24_ch2offset;
    43f6:	2e 01 90    	mov.w     [w14+4], w2
    43f8:	be 01 90    	mov.w     [w14+6], w3
    43fa:	60 41 80    	mov.w     0x82c, w0
    43fc:	71 41 80    	mov.w     0x82e, w1
    43fe:	00 00 51    	sub.w     w2, w0, w0
    4400:	81 80 59    	subb.w    w3, w1, w1
    4402:	5e 01 90    	mov.w     [w14+10], w2
    4404:	00 89 be    	mov.d     w0, [w2]
}
    4406:	00 80 fa    	ulnk      
    4408:	00 00 06    	return    

0000440a <_adc24_meas_both_avg>:

void adc24_meas_both_avg(int32_t *ch1val, int32_t *ch2val) {
    440a:	0e 00 fa    	lnk       #0xe
    440c:	50 07 98    	mov.w     w0, [w14+10]
    440e:	61 07 98    	mov.w     w1, [w14+12]
    uint16_t i;
    int32_t val1, val2;

    *ch1val = 0;
    4410:	5e 01 90    	mov.w     [w14+10], w2
    4412:	60 00 b8    	mul.uu    w0, #0x0, w0
    4414:	00 89 be    	mov.d     w0, [w2]
    *ch2val = 0;
    4416:	6e 01 90    	mov.w     [w14+12], w2
    4418:	60 00 b8    	mul.uu    w0, #0x0, w0
    441a:	00 89 be    	mov.d     w0, [w2]

    ADC_START = 1;
    441c:	f5 02 a8    	bset.b    0x2f5, #0x0

    while (ADC_DRDY == 1) {}
    441e:	00 00 00    	nop       

00004420 <.L145>:
    4420:	50 17 80    	mov.w     0x2ea, w0
    4422:	68 00 60    	and.w     w0, #0x8, w0
    4424:	00 00 e0    	cp0.w     w0
    4426:	fc ff 3a    	bra       NZ, 0x4420 <.L145>
    adc24_read_data(&val1, &val2);
    4428:	e6 00 47    	add.w     w14, #0x6, w1
    442a:	0e 80 e8    	inc2.w    w14, w0
    442c:	0e ff 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    for (i = 0; i < 9; i++) {
    442e:	00 00 eb    	clr.w     w0
    4430:	00 0f 78    	mov.w     w0, [w14]
    4432:	19 00 37    	bra       0x4466 <.L146>

00004434 <.L149>:
        while (ADC_DRDY == 1) {}
    4434:	00 00 00    	nop       

00004436 <.L147>:
    4436:	50 17 80    	mov.w     0x2ea, w0
    4438:	68 00 60    	and.w     w0, #0x8, w0
    443a:	00 00 e0    	cp0.w     w0
    443c:	fc ff 3a    	bra       NZ, 0x4436 <.L147>
        adc24_read_data(&val1, &val2);
    443e:	e6 00 47    	add.w     w14, #0x6, w1
    4440:	0e 80 e8    	inc2.w    w14, w0
    4442:	03 ff 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

        *ch1val += val1;
    4444:	5e 00 90    	mov.w     [w14+10], w0
    4446:	10 01 be    	mov.d     [w0], w2
    4448:	1e 00 90    	mov.w     [w14+2], w0
    444a:	ae 00 90    	mov.w     [w14+4], w1
    444c:	02 00 40    	add.w     w0, w2, w0
    444e:	83 80 48    	addc.w    w1, w3, w1
    4450:	5e 01 90    	mov.w     [w14+10], w2
    4452:	00 89 be    	mov.d     w0, [w2]
        *ch2val += val2;
    4454:	6e 00 90    	mov.w     [w14+12], w0
    4456:	10 01 be    	mov.d     [w0], w2
    4458:	3e 00 90    	mov.w     [w14+6], w0
    445a:	ce 00 90    	mov.w     [w14+8], w1
    445c:	02 00 40    	add.w     w0, w2, w0
    445e:	83 80 48    	addc.w    w1, w3, w1
    4460:	6e 01 90    	mov.w     [w14+12], w2
    4462:	00 89 be    	mov.d     w0, [w2]
    4464:	1e 0f e8    	inc.w     [w14], [w14]

00004466 <.L146>:
    4466:	1e 00 78    	mov.w     [w14], w0
    4468:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    446a:	e4 ff 36    	bra       LEU, 0x4434 <.L149>
    }

    ADC_START = 0;
    446c:	f5 02 a9    	bclr.b    0x2f5, #0x0

    *ch1val = (*ch1val / 9) - adc24_ch1offset;
    446e:	5e 00 90    	mov.w     [w14+10], w0
    4470:	10 00 be    	mov.d     [w0], w0
    4472:	92 00 20    	mov.w     #0x9, w2
    4474:	03 00 20    	mov.w     #0x0, w3
    4476:	c9 e7 07    	rcall     0x140a <___divsi3>
    4478:	00 01 be    	mov.d     w0, w2
    447a:	40 41 80    	mov.w     0x828, w0
    447c:	51 41 80    	mov.w     0x82a, w1
    447e:	00 00 51    	sub.w     w2, w0, w0
    4480:	81 80 59    	subb.w    w3, w1, w1
    4482:	5e 01 90    	mov.w     [w14+10], w2
    4484:	00 89 be    	mov.d     w0, [w2]
    *ch2val = (*ch2val / 9) - adc24_ch2offset;
    4486:	6e 00 90    	mov.w     [w14+12], w0
    4488:	10 00 be    	mov.d     [w0], w0
    448a:	92 00 20    	mov.w     #0x9, w2
    448c:	03 00 20    	mov.w     #0x0, w3
    448e:	bd e7 07    	rcall     0x140a <___divsi3>
    4490:	00 01 be    	mov.d     w0, w2
    4492:	60 41 80    	mov.w     0x82c, w0
    4494:	71 41 80    	mov.w     0x82e, w1
    4496:	00 00 51    	sub.w     w2, w0, w0
    4498:	81 80 59    	subb.w    w3, w1, w1
    449a:	6e 01 90    	mov.w     [w14+12], w2
    449c:	00 89 be    	mov.d     w0, [w2]
}
    449e:	00 80 fa    	ulnk      
    44a0:	00 00 06    	return    

000044a2 <_adc24_meas_both_raw>:

void adc24_meas_both_raw(int32_t *ch1val, int32_t *ch2val) {
    44a2:	0c 00 fa    	lnk       #0xc
    44a4:	40 07 98    	mov.w     w0, [w14+8]
    44a6:	51 07 98    	mov.w     w1, [w14+10]
    int32_t val1, val2;

    ADC_START = 1;
    44a8:	f5 02 a8    	bset.b    0x2f5, #0x0

    while (ADC_DRDY == 1) {}
    44aa:	00 00 00    	nop       

000044ac <.L151>:
    44ac:	50 17 80    	mov.w     0x2ea, w0
    44ae:	68 00 60    	and.w     w0, #0x8, w0
    44b0:	00 00 e0    	cp0.w     w0
    44b2:	fc ff 3a    	bra       NZ, 0x44ac <.L151>
    adc24_read_data(&val1, &val2);
    44b4:	64 00 47    	add.w     w14, #0x4, w0
    44b6:	80 00 78    	mov.w     w0, w1
    44b8:	0e 00 78    	mov.w     w14, w0
    44ba:	c7 fe 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    while (ADC_DRDY == 1) {}
    44bc:	00 00 00    	nop       

000044be <.L152>:
    44be:	50 17 80    	mov.w     0x2ea, w0
    44c0:	68 00 60    	and.w     w0, #0x8, w0
    44c2:	00 00 e0    	cp0.w     w0
    44c4:	fc ff 3a    	bra       NZ, 0x44be <.L152>
    adc24_read_data(&val1, &val2);
    44c6:	64 00 47    	add.w     w14, #0x4, w0
    44c8:	80 00 78    	mov.w     w0, w1
    44ca:	0e 00 78    	mov.w     w14, w0
    44cc:	be fe 07    	rcall     0x424a <_adc24_read_data> <.LFB27> <.LFE26>

    ADC_START = 0;
    44ce:	f5 02 a9    	bclr.b    0x2f5, #0x0

    *ch1val = val1;
    44d0:	1e 00 be    	mov.d     [w14], w0
    44d2:	4e 01 90    	mov.w     [w14+8], w2
    44d4:	00 89 be    	mov.d     w0, [w2]
    *ch2val = val2;
    44d6:	2e 00 90    	mov.w     [w14+4], w0
    44d8:	be 00 90    	mov.w     [w14+6], w1
    44da:	5e 01 90    	mov.w     [w14+10], w2
    44dc:	00 89 be    	mov.d     w0, [w2]
}
    44de:	00 80 fa    	ulnk      
    44e0:	00 00 06    	return    

000044e2 <_adc24_set_ch1offset>:

void adc24_set_ch1offset(int32_t val) {
    44e2:	04 00 fa    	lnk       #0x4
    44e4:	00 8f be    	mov.d     w0, [w14]
    adc24_ch1offset = val;
    44e6:	1e 01 be    	mov.d     [w14], w2
    44e8:	42 41 88    	mov.w     w2, 0x828
    44ea:	53 41 88    	mov.w     w3, 0x82a
}
    44ec:	00 80 fa    	ulnk      
    44ee:	00 00 06    	return    

000044f0 <_adc24_get_ch1offset>:

int32_t adc24_get_ch1offset(void) {
    44f0:	00 00 fa    	lnk       #0x0
    return adc24_ch1offset;
    44f2:	40 41 80    	mov.w     0x828, w0
    44f4:	51 41 80    	mov.w     0x82a, w1
}
    44f6:	00 80 fa    	ulnk      
    44f8:	00 00 06    	return    

000044fa <_adc24_set_ch2offset>:

void adc24_set_ch2offset(int32_t val) {
    44fa:	04 00 fa    	lnk       #0x4
    44fc:	00 8f be    	mov.d     w0, [w14]
    adc24_ch2offset = val;
    44fe:	1e 01 be    	mov.d     [w14], w2
    4500:	62 41 88    	mov.w     w2, 0x82c
    4502:	73 41 88    	mov.w     w3, 0x82e
}
    4504:	00 80 fa    	ulnk      
    4506:	00 00 06    	return    

00004508 <_adc24_get_ch2offset>:

int32_t adc24_get_ch2offset(void) {
    4508:	00 00 fa    	lnk       #0x0
    return adc24_ch2offset;
    450a:	60 41 80    	mov.w     0x82c, w0
    450c:	71 41 80    	mov.w     0x82e, w1
}
    450e:	00 80 fa    	ulnk      
    4510:	00 00 06    	return    

00004512 <_init_ble>:

// Functions relating to the BLE module (RN4871)
void init_ble(void) {
    4512:	06 00 fa    	lnk       #0x6
    uint8_t *RPOR, *RPINR;
    uint16_t i;

    RPOR = (uint8_t *)&RPOR0;
    4514:	00 6c 20    	mov.w     #0x6c0, w0
    4516:	10 07 98    	mov.w     w0, [w14+2]
    RPINR = (uint8_t *)&RPINR0;
    4518:	00 68 20    	mov.w     #0x680, w0
    451a:	20 07 98    	mov.w     w0, [w14+4]

    // Configure BLE module pins
    BLE_RST_N_DIR = OUT; BLE_RST_N = 1;
    451c:	e0 e2 a9    	bclr.b    0x2e0, #0x7
    451e:	e4 e2 a8    	bset.b    0x2e4, #0x7
    BLE_RX_DIR = OUT; BLE_RX = 1;
    4520:	c8 22 a9    	bclr.b    0x2c8, #0x1
    4522:	ca 22 a8    	bset.b    0x2ca, #0x1
    BLE_TX_DIR = IN;
    4524:	c8 42 a8    	bset.b    0x2c8, #0x2
    BLE_CTS_DIR = OUT; BLE_CTS = 1;
    4526:	f0 c2 a9    	bclr.b    0x2f0, #0x6
    4528:	f2 c2 a8    	bset.b    0x2f2, #0x6
    BLE_RTS_DIR = IN;
    452a:	c8 a2 a8    	bset.b    0x2c8, #0x5

    // Configure BLE pins to use UART1
    __builtin_write_OSCCONL(OSCCON & 0xBF);
    452c:	11 3a 80    	mov.w     0x742, w1
    452e:	f0 0b 20    	mov.w     #0xbf, w0
    4530:	00 81 60    	and.w     w1, w0, w2
    4532:	60 04 20    	mov.w     #0x46, w0
    4534:	71 05 20    	mov.w     #0x57, w1
    4536:	23 74 20    	mov.w     #0x742, w3
    4538:	80 49 78    	mov.b     w0, [w3]
    453a:	81 49 78    	mov.b     w1, [w3]
    453c:	82 49 78    	mov.b     w2, [w3]
    RPINR[U1RX_RP] = BLE_TX_RP;
    453e:	2e 00 90    	mov.w     [w14+4], w0
    4540:	40 02 b0    	add.w     #0x24, w0
    4542:	d1 c0 b3    	mov.b     #0xd, w1
    4544:	01 48 78    	mov.b     w1, [w0]
    RPOR[BLE_RX_RP] = U1TX_RP;
    4546:	1e 00 90    	mov.w     [w14+2], w0
    4548:	00 00 e8    	inc.w     w0, w0
    454a:	31 c0 b3    	mov.b     #0x3, w1
    454c:	01 48 78    	mov.b     w1, [w0]
    RPINR[U1CTS_RP] = BLE_RTS_RP;
    454e:	2e 00 90    	mov.w     [w14+4], w0
    4550:	50 02 b0    	add.w     #0x25, w0
    4552:	21 c1 b3    	mov.b     #0x12, w1
    4554:	01 48 78    	mov.b     w1, [w0]
    RPOR[BLE_CTS_RP] = U1RTS_RP;
    4556:	1e 00 90    	mov.w     [w14+2], w0
    4558:	75 00 40    	add.w     w0, #0x15, w0
    455a:	41 c0 b3    	mov.b     #0x4, w1
    455c:	01 48 78    	mov.b     w1, [w0]
    __builtin_write_OSCCONL(OSCCON | 0x40);
    455e:	10 3a 80    	mov.w     0x742, w0
    4560:	00 01 78    	mov.w     w0, w2
    4562:	02 60 a0    	bset.w    w2, #0x6
    4564:	60 04 20    	mov.w     #0x46, w0
    4566:	71 05 20    	mov.w     #0x57, w1
    4568:	23 74 20    	mov.w     #0x742, w3
    456a:	80 49 78    	mov.b     w0, [w3]
    456c:	81 49 78    	mov.b     w1, [w3]
    456e:	82 49 78    	mov.b     w2, [w3]

//    U1MODE = 0x0008;            // configure UART1 for transmission at
//    U1BRG = 0x0022;             //   115,200 baud, no parity, 1 stop bit
    U1MODE = 0x0208;            // configure UART1 for transmission at
    4570:	80 20 20    	mov.w     #0x208, w0
    4572:	00 11 88    	mov.w     w0, 0x220
    U1BRG = 0x0022;             //   115,200 baud, no parity, 1 stop bit
    4574:	20 02 20    	mov.w     #0x22, w0
    4576:	40 11 88    	mov.w     w0, 0x228
                                //   with hardware flow control

    U1TXbuffer.data = U1TX_buffer;
    4578:	40 86 20    	mov.w     #0x864, w0
    457a:	80 42 88    	mov.w     w0, 0x850
    U1TXbuffer.length = U1TX_BUFFER_LENGTH;
    457c:	00 40 20    	mov.w     #0x400, w0
    457e:	90 42 88    	mov.w     w0, 0x852
    U1TXbuffer.head = 0;
    4580:	00 00 eb    	clr.w     w0
    4582:	a0 42 88    	mov.w     w0, 0x854
    U1TXbuffer.tail = 0;
    4584:	00 00 eb    	clr.w     w0
    4586:	b0 42 88    	mov.w     w0, 0x856
    U1TXbuffer.count = 0;
    4588:	00 00 eb    	clr.w     w0
    458a:	c0 42 88    	mov.w     w0, 0x858
    U1TXthreshold = 3 * U1TX_BUFFER_LENGTH / 4;
    458c:	00 30 20    	mov.w     #0x300, w0
    458e:	80 41 88    	mov.w     w0, 0x830

    U1RXbuffer.data = U1RX_buffer;
    4590:	40 c6 20    	mov.w     #0xc64, w0
    4592:	d0 42 88    	mov.w     w0, 0x85a
    U1RXbuffer.length = U1RX_BUFFER_LENGTH;
    4594:	00 40 20    	mov.w     #0x400, w0
    4596:	e0 42 88    	mov.w     w0, 0x85c
    U1RXbuffer.head = 0;
    4598:	00 00 eb    	clr.w     w0
    459a:	f0 42 88    	mov.w     w0, 0x85e
    U1RXbuffer.tail = 0;
    459c:	00 00 eb    	clr.w     w0
    459e:	00 43 88    	mov.w     w0, 0x860
    U1RXbuffer.count = 0;
    45a0:	00 00 eb    	clr.w     w0
    45a2:	10 43 88    	mov.w     w0, 0x862

    U1STAbits.UTXISEL1 = 0;     // set UART1 UTXISEL<1:0> = 01, TX interrupt
    45a4:	23 e2 a9    	bclr.b    0x223, #0x7
    U1STAbits.UTXISEL0 = 1;     //   when all transmit operations are done
    45a6:	23 a2 a8    	bset.b    0x223, #0x5

    IFS0bits.U1TXIF = 0;        // lower UART1 TX interrupt flag
    45a8:	85 80 a9    	bclr.b    0x85, #0x4
    IEC0bits.U1TXIE = 1;        // enable UART1 TX interrupt
    45aa:	95 80 a8    	bset.b    0x95, #0x4

    IFS0bits.U1RXIF = 0;        // lower UART1 RX interrupt flag
    45ac:	85 60 a9    	bclr.b    0x85, #0x3
    IEC0bits.U1RXIE = 1;        // enable UART1 RX interrupt
    45ae:	95 60 a8    	bset.b    0x95, #0x3

    U1MODEbits.UARTEN = 1;      // enable UART1 module
    45b0:	21 e2 a8    	bset.b    0x221, #0x7
    U1STAbits.UTXEN = 1;        // enable UART1 data transmission
    45b2:	23 42 a8    	bset.b    0x223, #0x2

    BLE_RST_N = 0;
    45b4:	e4 e2 a9    	bclr.b    0x2e4, #0x7
    for (i = 1000; i; i--) {}
    45b6:	80 3e 20    	mov.w     #0x3e8, w0
    45b8:	00 0f 78    	mov.w     w0, [w14]
    45ba:	01 00 37    	bra       0x45be <.L158>

000045bc <.L159>:
    45bc:	1e 0f e9    	dec.w     [w14], [w14]

000045be <.L158>:
    45be:	1e 00 78    	mov.w     [w14], w0
    45c0:	00 00 e0    	cp0.w     w0
    45c2:	fc ff 3a    	bra       NZ, 0x45bc <.L159>
    BLE_RST_N = 1;
    45c4:	e4 e2 a8    	bset.b    0x2e4, #0x7
}
    45c6:	00 80 fa    	ulnk      
    45c8:	00 00 06    	return    

000045ca <_ble_in_waiting>:

uint16_t ble_in_waiting(void) {
    45ca:	00 00 fa    	lnk       #0x0
    return U1inWaiting();
    45cc:	24 00 07    	rcall     0x4616 <_U1inWaiting> <.LFB46> <.LFE43>
}
    45ce:	00 80 fa    	ulnk      
    45d0:	00 00 06    	return    

000045d2 <_ble_putc>:

void ble_putc(uint8_t ch) {
    45d2:	02 00 fa    	lnk       #0x2
    45d4:	00 4f 78    	mov.b     w0, [w14]
    U1putc(ch);
    45d6:	1e 40 78    	mov.b     [w14], w0
    45d8:	2b 00 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    U1flushTxBuffer();
    45da:	21 00 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
}
    45dc:	00 80 fa    	ulnk      
    45de:	00 00 06    	return    

000045e0 <_ble_getc>:

uint8_t ble_getc(void) {
    45e0:	00 00 fa    	lnk       #0x0
    return U1getc();
    45e2:	46 00 07    	rcall     0x4670 <_U1getc> <.LFB49> <.LFE48>
}
    45e4:	00 80 fa    	ulnk      
    45e6:	00 00 06    	return    

000045e8 <_ble_puts>:

void ble_puts(uint8_t *str) {
    45e8:	02 00 fa    	lnk       #0x2
    45ea:	00 0f 78    	mov.w     w0, [w14]
    U1puts(str);
    45ec:	1e 00 78    	mov.w     [w14], w0
    45ee:	5a 00 07    	rcall     0x46a4 <_U1puts> <.LFB50> <.LFE49>
    U1flushTxBuffer();
    45f0:	16 00 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
}
    45f2:	00 80 fa    	ulnk      
    45f4:	00 00 06    	return    

000045f6 <_dummy_in_waiting>:

uint16_t dummy_in_waiting(void) {
    45f6:	00 00 fa    	lnk       #0x0
    return 0;
    45f8:	00 00 eb    	clr.w     w0
}
    45fa:	00 80 fa    	ulnk      
    45fc:	00 00 06    	return    

000045fe <_dummy_putc>:

void dummy_putc(uint8_t ch) {
    45fe:	02 00 fa    	lnk       #0x2
    4600:	00 4f 78    	mov.b     w0, [w14]
    // Do nothing...
}
    4602:	00 80 fa    	ulnk      
    4604:	00 00 06    	return    

00004606 <_dummy_getc>:

uint8_t dummy_getc(void) {
    4606:	00 00 fa    	lnk       #0x0
    return 0;
    4608:	00 40 eb    	clr.b     w0
}
    460a:	00 80 fa    	ulnk      
    460c:	00 00 06    	return    

0000460e <_dummy_puts>:

void dummy_puts(uint8_t *str) {
    460e:	02 00 fa    	lnk       #0x2
    4610:	00 0f 78    	mov.w     w0, [w14]
    // Do nothing...
}
    4612:	00 80 fa    	ulnk      
    4614:	00 00 06    	return    

00004616 <_U1inWaiting>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag

    if (U1TXbuffer.count == 0)      // if nothing left in UART1 TX buffer, 
        U1STAbits.UTXEN = 0;        //   disable data transmission

    while ((U1STAbits.UTXBF == 0) && (U1TXbuffer.count != 0)) {
        disable_interrupts();
        ch = U1TXbuffer.data[U1TXbuffer.head];
        U1TXbuffer.head++;
        if (U1TXbuffer.head == U1TXbuffer.length)
            U1TXbuffer.head = 0;
        U1TXbuffer.count--;
        enable_interrupts();
        U1TXREG = (uint16_t)ch;
    }
}

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag

    while ((U1STAbits.URXDA == 1) && (U1RXbuffer.count != U1RXbuffer.length)) {
        disable_interrupts();
        U1RXbuffer.data[U1RXbuffer.tail] = (uint8_t)U1RXREG;
        U1RXbuffer.tail++;
        if (U1RXbuffer.tail == U1RXbuffer.length)
            U1RXbuffer.tail = 0;
        U1RXbuffer.count++;
        enable_interrupts();
    }
}

uint16_t U1inWaiting(void) {
    4616:	00 00 fa    	lnk       #0x0
    return U1RXbuffer.count;
    4618:	10 43 80    	mov.w     0x862, w0
}
    461a:	00 80 fa    	ulnk      
    461c:	00 00 06    	return    

0000461e <_U1flushTxBuffer>:

void U1flushTxBuffer(void) {
    461e:	00 00 fa    	lnk       #0x0
    if (U1STAbits.UTXEN == 0)       // if UART1 transmission is disabled,
    4620:	11 11 80    	mov.w     0x222, w1
    4622:	00 40 20    	mov.w     #0x400, w0
    4624:	00 80 60    	and.w     w1, w0, w0
    4626:	00 00 e0    	cp0.w     w0
    4628:	01 00 3a    	bra       NZ, 0x462c <.L181>
        U1STAbits.UTXEN = 1;        //   enable it
    462a:	23 42 a8    	bset.b    0x223, #0x2

0000462c <.L181>:
}
    462c:	00 80 fa    	ulnk      
    462e:	00 00 06    	return    

00004630 <_U1putc>:

void U1putc(uint8_t ch) {
    4630:	02 00 fa    	lnk       #0x2
    4632:	00 4f 78    	mov.b     w0, [w14]
    while (U1TXbuffer.count == U1TXbuffer.length) {}    // wait until UART1 TX 
    4634:	00 00 00    	nop       

00004636 <.L184>:
    4636:	c1 42 80    	mov.w     0x858, w1
    4638:	90 42 80    	mov.w     0x852, w0
    463a:	80 8f 50    	sub.w     w1, w0, [w15]
    463c:	fc ff 32    	bra       Z, 0x4636 <.L184>
                                                        //   buffer is not full
    disable_interrupts();
    463e:	ff 3f fc    	disi      #0x3fff
    U1TXbuffer.data[U1TXbuffer.tail] = ch;
    4640:	81 42 80    	mov.w     0x850, w1
    4642:	b0 42 80    	mov.w     0x856, w0
    4644:	00 80 40    	add.w     w1, w0, w0
    4646:	1e 48 78    	mov.b     [w14], [w0]
    U1TXbuffer.tail++;
    4648:	b0 42 80    	mov.w     0x856, w0
    464a:	00 00 e8    	inc.w     w0, w0
    464c:	b0 42 88    	mov.w     w0, 0x856
    if (U1TXbuffer.tail == U1TXbuffer.length)
    464e:	b1 42 80    	mov.w     0x856, w1
    4650:	90 42 80    	mov.w     0x852, w0
    4652:	80 8f 50    	sub.w     w1, w0, [w15]
    4654:	02 00 3a    	bra       NZ, 0x465a <.L185>
        U1TXbuffer.tail = 0;
    4656:	00 00 eb    	clr.w     w0
    4658:	b0 42 88    	mov.w     w0, 0x856

0000465a <.L185>:
    U1TXbuffer.count++;
    465a:	c0 42 80    	mov.w     0x858, w0
    465c:	00 00 e8    	inc.w     w0, w0
    465e:	c0 42 88    	mov.w     w0, 0x858
    enable_interrupts();
    4660:	52 20 ef    	clr.w     0x52

    if (U1TXbuffer.count >= U1TXthreshold)          // if UART1 TX buffer is 
    4662:	c1 42 80    	mov.w     0x858, w1
    4664:	80 41 80    	mov.w     0x830, w0
    4666:	80 8f 50    	sub.w     w1, w0, [w15]
    4668:	01 00 39    	bra       NC, 0x466c <.L183>
        U1STAbits.UTXEN = 1;                        //   full enough, enable 
    466a:	23 42 a8    	bset.b    0x223, #0x2

0000466c <.L183>:
                                                    //   data transmission
}
    466c:	00 80 fa    	ulnk      
    466e:	00 00 06    	return    

00004670 <_U1getc>:

uint8_t U1getc(void) {
    4670:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (U1RXbuffer.count == 0) {}    // wait until UART1 RX buffer is not empty
    4672:	00 00 00    	nop       

00004674 <.L188>:
    4674:	10 43 80    	mov.w     0x862, w0
    4676:	00 00 e0    	cp0.w     w0
    4678:	fd ff 32    	bra       Z, 0x4674 <.L188>

    disable_interrupts();
    467a:	ff 3f fc    	disi      #0x3fff
    ch = U1RXbuffer.data[U1RXbuffer.head];
    467c:	d1 42 80    	mov.w     0x85a, w1
    467e:	f0 42 80    	mov.w     0x85e, w0
    4680:	00 80 40    	add.w     w1, w0, w0
    4682:	10 4f 78    	mov.b     [w0], [w14]
    U1RXbuffer.head++;
    4684:	f0 42 80    	mov.w     0x85e, w0
    4686:	00 00 e8    	inc.w     w0, w0
    4688:	f0 42 88    	mov.w     w0, 0x85e
    if (U1RXbuffer.head == U1RXbuffer.length)
    468a:	f1 42 80    	mov.w     0x85e, w1
    468c:	e0 42 80    	mov.w     0x85c, w0
    468e:	80 8f 50    	sub.w     w1, w0, [w15]
    4690:	02 00 3a    	bra       NZ, 0x4696 <.L189>
        U1RXbuffer.head = 0;
    4692:	00 00 eb    	clr.w     w0
    4694:	f0 42 88    	mov.w     w0, 0x85e

00004696 <.L189>:
    U1RXbuffer.count--;
    4696:	10 43 80    	mov.w     0x862, w0
    4698:	00 00 e9    	dec.w     w0, w0
    469a:	10 43 88    	mov.w     w0, 0x862
    enable_interrupts();
    469c:	52 20 ef    	clr.w     0x52

    return ch;
    469e:	1e 40 78    	mov.b     [w14], w0
}
    46a0:	00 80 fa    	ulnk      
    46a2:	00 00 06    	return    

000046a4 <_U1puts>:

void U1puts(uint8_t *str) {
    46a4:	02 00 fa    	lnk       #0x2
    46a6:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    46a8:	04 00 37    	bra       0x46b2 <.L191>

000046aa <.L192>:
        U1putc(*str++);
    46aa:	1e 00 78    	mov.w     [w14], w0
    46ac:	10 40 78    	mov.b     [w0], w0
    46ae:	1e 0f e8    	inc.w     [w14], [w14]
    46b0:	bf ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>

000046b2 <.L191>:
    46b2:	1e 00 78    	mov.w     [w14], w0
    46b4:	10 40 78    	mov.b     [w0], w0
    46b6:	00 04 e0    	cp0.b     w0
    46b8:	f8 ff 3a    	bra       NZ, 0x46aa <.L192>
    U1flushTxBuffer();
    46ba:	b1 ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
}
    46bc:	00 80 fa    	ulnk      
    46be:	00 00 06    	return    

000046c0 <_U1gets>:

void U1gets(uint8_t *str, uint16_t len) {
    46c0:	04 00 fa    	lnk       #0x4
    46c2:	00 0f 78    	mov.w     w0, [w14]
    46c4:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    46c6:	1e 00 90    	mov.w     [w14+2], w0
    46c8:	00 00 e0    	cp0.w     w0
    46ca:	1a 00 32    	bra       Z, 0x4700 <.L198>
        return;

    if (len == 1) {
    46cc:	1e 00 90    	mov.w     [w14+2], w0
    46ce:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    46d0:	04 00 3a    	bra       NZ, 0x46da <.L196>
        *str = '\0';
    46d2:	1e 00 78    	mov.w     [w14], w0
    46d4:	80 40 eb    	clr.b     w1
    46d6:	01 48 78    	mov.b     w1, [w0]
        return;
    46d8:	14 00 37    	bra       0x4702 <.L193>

000046da <.L196>:
    }

    while (1) {
        *str = U1getc();
    46da:	ca ff 07    	rcall     0x4670 <_U1getc> <.LFB49> <.LFE48>
    46dc:	9e 00 78    	mov.w     [w14], w1
    46de:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    46e0:	1e 00 78    	mov.w     [w14], w0
    46e2:	10 40 78    	mov.b     [w0], w0
    46e4:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    46e6:	08 00 32    	bra       Z, 0x46f8 <.L197>
    46e8:	1e 00 90    	mov.w     [w14+2], w0
    46ea:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    46ec:	05 00 32    	bra       Z, 0x46f8 <.L197>
            break;
        str++;
    46ee:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    46f0:	1e 00 90    	mov.w     [w14+2], w0
    46f2:	00 00 e9    	dec.w     w0, w0
    46f4:	10 07 98    	mov.w     w0, [w14+2]
    }
    46f6:	f1 ff 37    	bra       0x46da <.L196>

000046f8 <.L197>:
    *str = '\0';
    46f8:	1e 00 78    	mov.w     [w14], w0
    46fa:	80 40 eb    	clr.b     w1
    46fc:	01 48 78    	mov.b     w1, [w0]
    46fe:	01 00 37    	bra       0x4702 <.L193>

00004700 <.L198>:
    4700:	00 00 00    	nop       

00004702 <.L193>:
}
    4702:	00 80 fa    	ulnk      
    4704:	00 00 06    	return    

00004706 <_U1gets_term>:

void U1gets_term(uint8_t *str, uint16_t len) {
    4706:	08 00 fa    	lnk       #0x8
    4708:	20 07 98    	mov.w     w0, [w14+4]
    470a:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    470c:	3e 00 90    	mov.w     [w14+6], w0
    470e:	00 00 e0    	cp0.w     w0
    4710:	6f 00 32    	bra       Z, 0x47f0 <.L212>
        return;

    if (len == 1) {
    4712:	3e 00 90    	mov.w     [w14+6], w0
    4714:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4716:	04 00 3a    	bra       NZ, 0x4720 <.L202>
        *str = '\0';
    4718:	2e 00 90    	mov.w     [w14+4], w0
    471a:	80 40 eb    	clr.b     w1
    471c:	01 48 78    	mov.b     w1, [w0]
        return;
    471e:	69 00 37    	bra       0x47f2 <.L199>

00004720 <.L202>:
    }

    U1putc(0x1B);                           // save current cursor position
    4720:	b0 c1 b3    	mov.b     #0x1b, w0
    4722:	86 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    U1putc('7');
    4724:	70 c3 b3    	mov.b     #0x37, w0
    4726:	84 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    U1flushTxBuffer();
    4728:	7a ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    start = str;
    472a:	ae 00 90    	mov.w     [w14+4], w1
    472c:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    472e:	be 00 90    	mov.w     [w14+6], w1
    4730:	01 0f 78    	mov.w     w1, [w14]
    4732:	03 00 37    	bra       0x473a <.L211>

00004734 <.L213>:
    while (1) {
        *str = U1getc();                    // get a character
        if (*str == '\r')                   // if character is return,
            break;                          //   end the loop
        if (*str == 0x1B) {                 // if character is escape,
            U1putc(0x1B);                   //   restore cursor position,
            U1putc('8');
            U1putc(0x1B);                   //   clear to end of line, and
            U1putc('[');
            U1putc('K');
            U1flushTxBuffer();
            str = start;                    //   start over at the beginning
            left = len;
            continue;
        }
        if ((*str == '\b') ||               // if character is backspace
            (*str == 0x7F)) {               //   or delete, 
            if (str > start) {              //   and we are not at the start, 
                U1putc('\b');               //   erase the last character and
                U1putc(' ');
                U1putc('\b');
                U1flushTxBuffer();
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                U1putc('\a');               //   send alert/bell character
                U1flushTxBuffer();
            }
            continue;
        }
        if (left == 1) {                    // if string buffer is full,
            U1putc('\a');                   //   send alert/bell character
            U1flushTxBuffer();
            continue;
        }
        if ((*str >= 32) && (*str < 127)) { // if character is printable,
            U1putc(*str);                   //   echo the received character
            U1flushTxBuffer();
            str++;                          //   and advance the pointer
            left--;
        }
    }
    4734:	00 00 00    	nop       
    4736:	01 00 37    	bra       0x473a <.L211>

00004738 <.L214>:
    4738:	00 00 00    	nop       

0000473a <.L211>:
    473a:	9a ff 07    	rcall     0x4670 <_U1getc> <.LFB49> <.LFE48>
    473c:	ae 00 90    	mov.w     [w14+4], w1
    473e:	80 48 78    	mov.b     w0, [w1]
    4740:	2e 00 90    	mov.w     [w14+4], w0
    4742:	10 40 78    	mov.b     [w0], w0
    4744:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    4746:	09 00 3a    	bra       NZ, 0x475a <.L203>
    *str = '\0';                            // terminarte the string with null
    4748:	2e 00 90    	mov.w     [w14+4], w0
    474a:	80 40 eb    	clr.b     w1
    474c:	01 48 78    	mov.b     w1, [w0]
    U1putc('\n');                           // send newline and
    474e:	a0 c0 b3    	mov.b     #0xa, w0
    4750:	6f ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    U1putc('\r');                           //   carriage return
    4752:	d0 c0 b3    	mov.b     #0xd, w0
    4754:	6d ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    U1flushTxBuffer();
    4756:	63 ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    4758:	4c 00 37    	bra       0x47f2 <.L199>

0000475a <.L203>:
    475a:	2e 00 90    	mov.w     [w14+4], w0
    475c:	10 40 78    	mov.b     [w0], w0
    475e:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    4760:	10 00 3a    	bra       NZ, 0x4782 <.L204>
    4762:	b0 c1 b3    	mov.b     #0x1b, w0
    4764:	65 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    4766:	80 c3 b3    	mov.b     #0x38, w0
    4768:	63 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    476a:	b0 c1 b3    	mov.b     #0x1b, w0
    476c:	61 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    476e:	b0 c5 b3    	mov.b     #0x5b, w0
    4770:	5f ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    4772:	b0 c4 b3    	mov.b     #0x4b, w0
    4774:	5d ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    4776:	53 ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    4778:	9e 00 90    	mov.w     [w14+2], w1
    477a:	21 07 98    	mov.w     w1, [w14+4]
    477c:	be 00 90    	mov.w     [w14+6], w1
    477e:	01 0f 78    	mov.w     w1, [w14]
    4780:	36 00 37    	bra       0x47ee <.L205>

00004782 <.L204>:
    4782:	2e 00 90    	mov.w     [w14+4], w0
    4784:	10 40 78    	mov.b     [w0], w0
    4786:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    4788:	05 00 32    	bra       Z, 0x4794 <.L206>
    478a:	2e 00 90    	mov.w     [w14+4], w0
    478c:	90 40 78    	mov.b     [w0], w1
    478e:	f0 c7 b3    	mov.b     #0x7f, w0
    4790:	80 cf 50    	sub.b     w1, w0, [w15]
    4792:	14 00 3a    	bra       NZ, 0x47bc <.L207>

00004794 <.L206>:
    4794:	ae 00 90    	mov.w     [w14+4], w1
    4796:	1e 00 90    	mov.w     [w14+2], w0
    4798:	80 8f 50    	sub.w     w1, w0, [w15]
    479a:	0c 00 36    	bra       LEU, 0x47b4 <.L208>
    479c:	80 c0 b3    	mov.b     #0x8, w0
    479e:	48 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47a0:	00 c2 b3    	mov.b     #0x20, w0
    47a2:	46 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47a4:	80 c0 b3    	mov.b     #0x8, w0
    47a6:	44 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47a8:	3a ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    47aa:	2e 00 90    	mov.w     [w14+4], w0
    47ac:	00 00 e9    	dec.w     w0, w0
    47ae:	20 07 98    	mov.w     w0, [w14+4]
    47b0:	1e 0f e8    	inc.w     [w14], [w14]
    47b2:	03 00 37    	bra       0x47ba <.L209>

000047b4 <.L208>:
    47b4:	70 c0 b3    	mov.b     #0x7, w0
    47b6:	3c ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47b8:	32 ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>

000047ba <.L209>:
    47ba:	19 00 37    	bra       0x47ee <.L205>

000047bc <.L207>:
    47bc:	1e 00 78    	mov.w     [w14], w0
    47be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    47c0:	04 00 3a    	bra       NZ, 0x47ca <.L210>
    47c2:	70 c0 b3    	mov.b     #0x7, w0
    47c4:	35 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47c6:	2b ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    47c8:	12 00 37    	bra       0x47ee <.L205>

000047ca <.L210>:
    47ca:	2e 00 90    	mov.w     [w14+4], w0
    47cc:	10 40 78    	mov.b     [w0], w0
    47ce:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    47d0:	b1 ff 36    	bra       LEU, 0x4734 <.L213>
    47d2:	2e 00 90    	mov.w     [w14+4], w0
    47d4:	90 40 78    	mov.b     [w0], w1
    47d6:	e0 c7 b3    	mov.b     #0x7e, w0
    47d8:	80 cf 50    	sub.b     w1, w0, [w15]
    47da:	ae ff 3e    	bra       GTU, 0x4738 <.L214>
    47dc:	2e 00 90    	mov.w     [w14+4], w0
    47de:	10 40 78    	mov.b     [w0], w0
    47e0:	27 ff 07    	rcall     0x4630 <_U1putc> <.LFB48> <.LFE47>
    47e2:	1d ff 07    	rcall     0x461e <_U1flushTxBuffer> <.LFB47> <.LFE46>
    47e4:	2e 00 90    	mov.w     [w14+4], w0
    47e6:	00 00 e8    	inc.w     w0, w0
    47e8:	20 07 98    	mov.w     w0, [w14+4]
    47ea:	1e 0f e9    	dec.w     [w14], [w14]
    47ec:	a6 ff 37    	bra       0x473a <.L211>

000047ee <.L205>:
    47ee:	a5 ff 37    	bra       0x473a <.L211>

000047f0 <.L212>:
    47f0:	00 00 00    	nop       

000047f2 <.L199>:
}
    47f2:	00 80 fa    	ulnk      
    47f4:	00 00 06    	return    

000047f6 <_usb_disable_endpoints>:
    usb_service();
}
#endif

void usb_disable_endpoints(uint8_t starting_ep) {
    47f6:	06 00 fa    	lnk       #0x6
    47f8:	40 47 98    	mov.b     w0, [w14+4]
    uint16_t *U1EP;
    uint8_t ep;

    U1EP = (uint16_t *)&U1EP0;
    47fa:	a0 4a 20    	mov.w     #0x4aa, w0
    47fc:	10 07 98    	mov.w     w0, [w14+2]
    for (ep = starting_ep; ep < 16; ep++) {
    47fe:	ce 40 90    	mov.b     [w14+4], w1
    4800:	01 4f 78    	mov.b     w1, [w14]
    4802:	13 00 37    	bra       0x482a <.L2>

00004804 <.L3>:
        U1EP[ep] = ENDPT_DISABLED;
    4804:	1e 80 fb    	ze        [w14], w0
    4806:	00 00 40    	add.w     w0, w0, w0
    4808:	9e 00 90    	mov.w     [w14+2], w1
    480a:	00 80 40    	add.w     w1, w0, w0
    480c:	80 00 eb    	clr.w     w1
    480e:	01 08 78    	mov.w     w1, [w0]
        USB_in_callbacks[ep] = (USB_CALLBACK_T)NULL;
    4810:	1e 80 fb    	ze        [w14], w0
    4812:	80 00 40    	add.w     w0, w0, w1
    4814:	c0 59 21    	mov.w     #0x159c, w0
    4816:	00 80 40    	add.w     w1, w0, w0
    4818:	80 00 eb    	clr.w     w1
    481a:	01 08 78    	mov.w     w1, [w0]
        USB_out_callbacks[ep] = (USB_CALLBACK_T)NULL;
    481c:	1e 80 fb    	ze        [w14], w0
    481e:	80 00 40    	add.w     w0, w0, w1
    4820:	c0 5b 21    	mov.w     #0x15bc, w0
    4822:	00 80 40    	add.w     w1, w0, w0
    4824:	80 00 eb    	clr.w     w1
    4826:	01 08 78    	mov.w     w1, [w0]
    4828:	1e 4f e8    	inc.b     [w14], [w14]

0000482a <.L2>:
    482a:	1e 40 78    	mov.b     [w14], w0
    482c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    482e:	ea ff 36    	bra       LEU, 0x4804 <.L3>
    }
}
    4830:	00 80 fa    	ulnk      
    4832:	00 00 06    	return    

00004834 <_usb_set_address_callback>:

void usb_set_address_callback(void) {
    4834:	00 00 fa    	lnk       #0x0
    switch (U1ADDR = USB_request.setup.wValue.b[0]) {
    4836:	00 59 21    	mov.w     #0x1590, w0
    4838:	10 40 78    	mov.b     [w0], w0
    483a:	00 80 fb    	ze        w0, w0
    483c:	b0 24 88    	mov.w     w0, 0x496
    483e:	b0 24 80    	mov.w     0x496, w0
    4840:	00 00 e0    	cp0.w     w0
    4842:	03 00 3a    	bra       NZ, 0x484a <.L8>
        case 0:
            USB_USWSTAT = DEFAULT_STATE;
    4844:	10 c0 b3    	mov.b     #0x1, w0
    4846:	10 e8 b7    	mov.b     WREG, 0x810
            break;
    4848:	02 00 37    	bra       0x484e <.L7>

0000484a <.L8>:
        default:
            USB_USWSTAT = ADDRESS_STATE;
    484a:	20 c0 b3    	mov.b     #0x2, w0
    484c:	10 e8 b7    	mov.b     WREG, 0x810

0000484e <.L7>:
    }
    USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    484e:	00 00 eb    	clr.w     w0
    4850:	e0 ac 88    	mov.w     w0, 0x159c
}
    4852:	00 80 fa    	ulnk      
    4854:	00 00 06    	return    

00004856 <_init_usb>:

void init_usb(void) {
    4856:	00 00 fa    	lnk       #0x0
    IEC5bits.USB1IE = 0;                    // disable USB interrupt
    4858:	9e c0 a9    	bclr.b    0x9e, #0x6

    U1CONbits.PPBRST = 1;
    485a:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    485c:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    485e:	f0 0f 20    	mov.w     #0xff, w0
    4860:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    4862:	94 24 a9    	bclr.b    0x494, #0x1
    usb_disable_endpoints(0);               // disable all endpoints
    4864:	00 40 eb    	clr.b     w0
    4866:	c7 ff 07    	rcall     0x47f6 <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE52> <.Letext0> <.Ltext0>
    U1EP0 = ENDPT_CONTROL;
    4868:	d0 00 20    	mov.w     #0xd, w0
    486a:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    486c:	00 60 21    	mov.w     #0x1600, w0
    486e:	01 c4 b3    	mov.b     #0x40, w1
    4870:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    4872:	00 68 21    	mov.w     #0x1680, w0
    4874:	10 b0 88    	mov.w     w0, 0x1602
    BD[EP0OUT].status = UOWN | DTSEN;       // set UOWN bit (USB can write)
    4876:	10 60 21    	mov.w     #0x1601, w0
    4878:	81 c8 b3    	mov.b     #0x88, w1
    487a:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    487c:	00 6c 21    	mov.w     #0x16c0, w0
    487e:	30 b0 88    	mov.w     w0, 0x1606
    BD[EP0IN].status = DTSEN;               // clear UOWN bit (MCU can write)
    4880:	50 60 21    	mov.w     #0x1605, w0
    4882:	81 c0 b3    	mov.b     #0x8, w1
    4884:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0;
    4886:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0;
    4888:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (uint16_t)BD >> 8;
    488a:	00 60 21    	mov.w     #0x1600, w0
    488c:	48 00 de    	lsr.w     w0, #0x8, w0
    488e:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    4890:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    4892:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    4894:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    4896:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0;
    4898:	0d 68 ef    	clr.b     0x80d
    USB_USWSTAT = POWERED_STATE;
    489a:	10 68 ef    	clr.b     0x810
    USB_device_status = 1;
    489c:	10 c0 b3    	mov.b     #0x1, w0
    489e:	0e e8 b7    	mov.b     WREG, 0x80e
    USB_request.setup.bmRequestType = NO_REQUEST;
    48a0:	e0 58 21    	mov.w     #0x158e, w0
    48a2:	80 c0 eb    	setm.b    w1
    48a4:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    48a6:	f0 58 21    	mov.w     #0x158f, w0
    48a8:	80 c0 eb    	setm.b    w1
    48aa:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    48ac:	00 00 eb    	clr.w     w0
    48ae:	c0 ac 88    	mov.w     w0, 0x1598
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    48b0:	00 00 eb    	clr.w     w0
    48b2:	d0 ac 88    	mov.w     w0, 0x159a
    while (U1CONbits.SE0) {}
    48b4:	00 00 00    	nop       

000048b6 <.L10>:
    48b6:	a1 24 80    	mov.w     0x494, w1
    48b8:	00 04 20    	mov.w     #0x40, w0
    48ba:	00 80 60    	and.w     w1, w0, w0
    48bc:	00 00 e0    	cp0.w     w0
    48be:	fb ff 3a    	bra       NZ, 0x48b6 <.L10>

#ifdef USB_INTERRUPT
    U1IE = 0xFF;
    U1EIE = 0xFF;
    IFS5bits.USB1IF = 0;
    IEC5bits.USB1IE = 1;
#endif
}
    48c0:	00 80 fa    	ulnk      
    48c2:	00 00 06    	return    

000048c4 <_usb_service>:

void usb_service(void) {
    48c4:	04 00 fa    	lnk       #0x4
    BUFDESC *buf_desc_ptr;
    uint8_t ep;

    if (U1IRbits.UERRIF) {
    48c6:	50 24 80    	mov.w     0x48a, w0
    48c8:	62 00 60    	and.w     w0, #0x2, w0
    48ca:	00 00 e0    	cp0.w     w0
    48cc:	05 00 32    	bra       Z, 0x48d8 <.L12>
        U1EIR = 0xFF;                       // clear all flags in U1EIR to clear U1EIR
    48ce:	f0 0f 20    	mov.w     #0xff, w0
    48d0:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;                 // clear UERRIF
    48d2:	20 00 20    	mov.w     #0x2, w0
    48d4:	50 24 88    	mov.w     w0, 0x48a
    48d6:	ba 00 37    	bra       0x4a4c <.L13>

000048d8 <.L12>:
    } else if (U1IRbits.SOFIF) {
    48d8:	50 24 80    	mov.w     0x48a, w0
    48da:	64 00 60    	and.w     w0, #0x4, w0
    48dc:	00 00 e0    	cp0.w     w0
    48de:	03 00 32    	bra       Z, 0x48e6 <.L14>
        U1IR = U1IR_SOFIF;                  // clear SOFIF
    48e0:	40 00 20    	mov.w     #0x4, w0
    48e2:	50 24 88    	mov.w     w0, 0x48a
    48e4:	b3 00 37    	bra       0x4a4c <.L13>

000048e6 <.L14>:
    } else if (U1IRbits.IDLEIF) {
    48e6:	50 24 80    	mov.w     0x48a, w0
    48e8:	70 00 60    	and.w     w0, #0x10, w0
    48ea:	00 00 e0    	cp0.w     w0
    48ec:	03 00 32    	bra       Z, 0x48f4 <.L15>
        U1IR = U1IR_IDLEIF;                 // clear IDLEIF
    48ee:	00 01 20    	mov.w     #0x10, w0
    48f0:	50 24 88    	mov.w     w0, 0x48a
    48f2:	ac 00 37    	bra       0x4a4c <.L13>

000048f4 <.L15>:
//      U1PWRCbits.USUSPND = 1;             // put USB module in suspend mode
    } else if (U1IRbits.RESUMEIF) {
    48f4:	51 24 80    	mov.w     0x48a, w1
    48f6:	00 02 20    	mov.w     #0x20, w0
    48f8:	00 80 60    	and.w     w1, w0, w0
    48fa:	00 00 e0    	cp0.w     w0
    48fc:	03 00 32    	bra       Z, 0x4904 <.L16>
        U1IR = U1IR_RESUMEIF;               // clear RESUMEIF
    48fe:	00 02 20    	mov.w     #0x20, w0
    4900:	50 24 88    	mov.w     w0, 0x48a
    4902:	a4 00 37    	bra       0x4a4c <.L13>

00004904 <.L16>:
//      U1PWRCbits.USUSPND = 0;             // resume USB module operation
    } else if (U1IRbits.STALLIF) {
    4904:	51 24 80    	mov.w     0x48a, w1
    4906:	00 08 20    	mov.w     #0x80, w0
    4908:	00 80 60    	and.w     w1, w0, w0
    490a:	00 00 e0    	cp0.w     w0
    490c:	03 00 32    	bra       Z, 0x4914 <.L17>
        U1IR = U1IR_STALLIF;                // clear STALLIF
    490e:	00 08 20    	mov.w     #0x80, w0
    4910:	50 24 88    	mov.w     w0, 0x48a
    4912:	9c 00 37    	bra       0x4a4c <.L13>

00004914 <.L17>:
    } else if (U1IRbits.URSTIF) {
    4914:	50 24 80    	mov.w     0x48a, w0
    4916:	61 00 60    	and.w     w0, #0x1, w0
    4918:	00 00 e0    	cp0.w     w0
    491a:	27 00 32    	bra       Z, 0x496a <.L18>
        USB_curr_config = 0;
    491c:	0d 68 ef    	clr.b     0x80d
        while (U1IRbits.TRNIF) {
    491e:	08 00 37    	bra       0x4930 <.L19>

00004920 <.L20>:
            U1IR = U1IR_TRNIF;              // clear TRNIF to advance the U1STAT FIFO
    4920:	80 00 20    	mov.w     #0x8, w0
    4922:	50 24 88    	mov.w     w0, 0x48a
	...

00004930 <.L19>:
    4930:	50 24 80    	mov.w     0x48a, w0
    4932:	68 00 60    	and.w     w0, #0x8, w0
    4934:	00 00 e0    	cp0.w     w0
    4936:	f4 ff 3a    	bra       NZ, 0x4920 <.L20>
            __builtin_nop();                // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();                // ...to allow a pending TRNIF to appear
        }
        usb_disable_endpoints(0);           // disable all endpoints
    4938:	00 40 eb    	clr.b     w0
    493a:	5d ff 07    	rcall     0x47f6 <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE52> <.Letext0> <.Ltext0>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    493c:	00 60 21    	mov.w     #0x1600, w0
    493e:	01 c4 b3    	mov.b     #0x40, w1
    4940:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    4942:	00 68 21    	mov.w     #0x1680, w0
    4944:	10 b0 88    	mov.w     w0, 0x1602
        BD[EP0OUT].status = UOWN | DTSEN;   // set UOWN bit (USB can write)
    4946:	10 60 21    	mov.w     #0x1601, w0
    4948:	81 c8 b3    	mov.b     #0x88, w1
    494a:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;  // EP0 IN gets a buffer
    494c:	00 6c 21    	mov.w     #0x16c0, w0
    494e:	30 b0 88    	mov.w     w0, 0x1606
        BD[EP0IN].status = DTSEN;           // clear UOWN bit (MCU can write)
    4950:	50 60 21    	mov.w     #0x1605, w0
    4952:	81 c0 b3    	mov.b     #0x8, w1
    4954:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0;                         // set USB Address to 0
    4956:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                        // clear all the USB interrupt flags
    4958:	f0 0f 20    	mov.w     #0xff, w0
    495a:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;              // EP0 is a control pipe and requires an ACK
    495c:	d0 00 20    	mov.w     #0xd, w0
    495e:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                     // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    4960:	10 c0 b3    	mov.b     #0x1, w0
    4962:	10 e8 b7    	mov.b     WREG, 0x810
        USB_device_status = 1;              // self powered, remote wakeup disabled
    4964:	10 c0 b3    	mov.b     #0x1, w0
    4966:	0e e8 b7    	mov.b     WREG, 0x80e
    4968:	71 00 37    	bra       0x4a4c <.L13>

0000496a <.L18>:
    } else if (U1IRbits.TRNIF) {
    496a:	50 24 80    	mov.w     0x48a, w0
    496c:	68 00 60    	and.w     w0, #0x8, w0
    496e:	00 00 e0    	cp0.w     w0
    4970:	6d 00 32    	bra       Z, 0x4a4c <.L13>
        buf_desc_ptr = &BD[U1STAT >> 3];    // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    4972:	90 24 80    	mov.w     0x492, w0
    4974:	43 00 de    	lsr.w     w0, #0x3, w0
    4976:	c2 00 dd    	sl.w      w0, #0x2, w1
    4978:	00 60 21    	mov.w     #0x1600, w0
    497a:	00 8f 40    	add.w     w1, w0, [w14]
        USB_buffer_desc.status = buf_desc_ptr->status;
    497c:	1e 00 78    	mov.w     [w14], w0
    497e:	10 40 90    	mov.b     [w0+1], w0
    4980:	01 e8 b7    	mov.b     WREG, 0x801
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    4982:	1e 00 78    	mov.w     [w14], w0
    4984:	10 40 78    	mov.b     [w0], w0
    4986:	00 e8 b7    	mov.b     WREG, 0x800
        USB_buffer_desc.address = buf_desc_ptr->address;
    4988:	1e 00 78    	mov.w     [w14], w0
    498a:	10 00 90    	mov.w     [w0+2], w0
    498c:	10 40 88    	mov.w     w0, 0x802
        USB_USTAT = U1STAT;                 // save the USB status register
    498e:	90 24 80    	mov.w     0x492, w0
    4990:	00 40 78    	mov.b     w0, w0
    4992:	0f e8 b7    	mov.b     WREG, 0x80f
        U1IR = U1IR_TRNIF;                  // clear TRNIF
    4994:	80 00 20    	mov.w     #0x8, w0
    4996:	50 24 88    	mov.w     w0, 0x48a
        USB_error_flags = 0;                // clear USB error flags
    4998:	0c 68 ef    	clr.b     0x80c
        switch (USB_buffer_desc.status & 0x3C) {    // extract PID bits
    499a:	01 c8 bf    	mov.b     0x801, WREG
    499c:	80 80 fb    	ze        w0, w1
    499e:	c0 03 20    	mov.w     #0x3c, w0
    49a0:	00 80 60    	and.w     w1, w0, w0
    49a2:	41 02 20    	mov.w     #0x24, w1
    49a4:	81 0f 50    	sub.w     w0, w1, [w15]
    49a6:	08 00 32    	bra       Z, 0x49b8 <.L23>
    49a8:	41 03 20    	mov.w     #0x34, w1
    49aa:	81 0f 50    	sub.w     w0, w1, [w15]
    49ac:	03 00 32    	bra       Z, 0x49b4 <.L24>
    49ae:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    49b0:	17 00 32    	bra       Z, 0x49e0 <.L22>
    49b2:	3d 00 37    	bra       0x4a2e <.L21>

000049b4 <.L24>:
            case TOKEN_SETUP:
                usb_process_setup_token();
    49b4:	4e 00 07    	rcall     0x4a52 <_usb_process_setup_token> <.LFB4> <.LFE3>
                break;
    49b6:	3b 00 37    	bra       0x4a2e <.L21>

000049b8 <.L23>:
            case TOKEN_IN:
                ep = (USB_USTAT >> 4) & 0x0F;
    49b8:	0f c8 bf    	mov.b     0x80f, WREG
    49ba:	00 80 fb    	ze        w0, w0
    49bc:	44 00 de    	lsr.w     w0, #0x4, w0
    49be:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_in_callbacks[ep])
    49c0:	2e 40 90    	mov.b     [w14+2], w0
    49c2:	00 80 fb    	ze        w0, w0
    49c4:	80 00 40    	add.w     w0, w0, w1
    49c6:	c0 59 21    	mov.w     #0x159c, w0
    49c8:	00 80 40    	add.w     w1, w0, w0
    49ca:	10 00 78    	mov.w     [w0], w0
    49cc:	00 00 e0    	cp0.w     w0
    49ce:	2e 00 32    	bra       Z, 0x4a2c <.L27>
                    USB_in_callbacks[ep]();
    49d0:	2e 40 90    	mov.b     [w14+2], w0
    49d2:	00 80 fb    	ze        w0, w0
    49d4:	80 00 40    	add.w     w0, w0, w1
    49d6:	c0 59 21    	mov.w     #0x159c, w0
    49d8:	00 80 40    	add.w     w1, w0, w0
    49da:	10 00 78    	mov.w     [w0], w0
    49dc:	00 00 01    	call      w0
                break;
    49de:	27 00 37    	bra       0x4a2e <.L21>

000049e0 <.L22>:
            case TOKEN_OUT:
                ep = (USB_USTAT >> 4) & 0x0F;
    49e0:	0f c8 bf    	mov.b     0x80f, WREG
    49e2:	00 80 fb    	ze        w0, w0
    49e4:	44 00 de    	lsr.w     w0, #0x4, w0
    49e6:	20 47 98    	mov.b     w0, [w14+2]
                if (USB_out_callbacks[ep])
    49e8:	2e 40 90    	mov.b     [w14+2], w0
    49ea:	00 80 fb    	ze        w0, w0
    49ec:	80 00 40    	add.w     w0, w0, w1
    49ee:	c0 5b 21    	mov.w     #0x15bc, w0
    49f0:	00 80 40    	add.w     w1, w0, w0
    49f2:	10 00 78    	mov.w     [w0], w0
    49f4:	00 00 e0    	cp0.w     w0
    49f6:	07 00 32    	bra       Z, 0x4a06 <.L26>
                    USB_out_callbacks[ep]();
    49f8:	2e 40 90    	mov.b     [w14+2], w0
    49fa:	00 80 fb    	ze        w0, w0
    49fc:	80 00 40    	add.w     w0, w0, w1
    49fe:	c0 5b 21    	mov.w     #0x15bc, w0
    4a00:	00 80 40    	add.w     w1, w0, w0
    4a02:	10 00 78    	mov.w     [w0], w0
    4a04:	00 00 01    	call      w0

00004a06 <.L26>:
                if ((ep == 0) && (USB_request.bytes_left.w == 0)) {
    4a06:	2e 40 90    	mov.b     [w14+2], w0
    4a08:	00 04 e0    	cp0.b     w0
    4a0a:	11 00 3a    	bra       NZ, 0x4a2e <.L21>
    4a0c:	c0 ac 80    	mov.w     0x1598, w0
    4a0e:	00 00 e0    	cp0.w     w0
    4a10:	0e 00 3a    	bra       NZ, 0x4a2e <.L21>
                    BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // reset EP0 OUT buffer
    4a12:	00 60 21    	mov.w     #0x1600, w0
    4a14:	01 c4 b3    	mov.b     #0x40, w1
    4a16:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0OUT].status = UOWN | DTSEN;
    4a18:	10 60 21    	mov.w     #0x1601, w0
    4a1a:	81 c8 b3    	mov.b     #0x88, w1
    4a1c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0;                // complete status phase of control transfer
    4a1e:	40 60 21    	mov.w     #0x1604, w0
    4a20:	80 40 eb    	clr.b     w1
    4a22:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4a24:	50 60 21    	mov.w     #0x1605, w0
    4a26:	81 cc b3    	mov.b     #0xc8, w1
    4a28:	01 48 78    	mov.b     w1, [w0]
    4a2a:	01 00 37    	bra       0x4a2e <.L21>

00004a2c <.L27>:
    4a2c:	00 00 00    	nop       

00004a2e <.L21>:
                }
        }
        if (USB_error_flags & REQUEST_ERROR) {      // if there was a Request Error...
    4a2e:	0c c8 bf    	mov.b     0x80c, WREG
    4a30:	00 80 fb    	ze        w0, w0
    4a32:	61 00 60    	and.w     w0, #0x1, w0
    4a34:	00 40 78    	mov.b     w0, w0
    4a36:	00 04 e0    	cp0.b     w0
    4a38:	09 00 32    	bra       Z, 0x4a4c <.L13>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE; // ...get ready to receive the next Setup token...
    4a3a:	00 60 21    	mov.w     #0x1600, w0
    4a3c:	01 c4 b3    	mov.b     #0x40, w1
    4a3e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | BSTALL;
    4a40:	50 60 21    	mov.w     #0x1605, w0
    4a42:	41 c8 b3    	mov.b     #0x84, w1
    4a44:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = UOWN | BSTALL;      // ...and issue a protocol stall on EP0
    4a46:	10 60 21    	mov.w     #0x1601, w0
    4a48:	41 c8 b3    	mov.b     #0x84, w1
    4a4a:	01 48 78    	mov.b     w1, [w0]

00004a4c <.L13>:
        }
    }
    IFS5bits.USB1IF = 0;                    // clear USB Interrupt flag
    4a4c:	8e c0 a9    	bclr.b    0x8e, #0x6
}
    4a4e:	00 80 fa    	ulnk      
    4a50:	00 00 06    	return    

00004a52 <_usb_process_setup_token>:

void usb_process_setup_token(void) {
    4a52:	02 00 fa    	lnk       #0x2
    uint8_t *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    4a54:	11 40 80    	mov.w     0x802, w1
    4a56:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;           // copy the setup packet received from the host
    4a58:	1e 00 78    	mov.w     [w14], w0
    4a5a:	90 40 78    	mov.b     [w0], w1
    4a5c:	40 80 20    	mov.w     #0x804, w0
    4a5e:	01 48 78    	mov.b     w1, [w0]
    4a60:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    4a62:	1e 00 78    	mov.w     [w14], w0
    4a64:	90 40 78    	mov.b     [w0], w1
    4a66:	40 80 20    	mov.w     #0x804, w0
    4a68:	11 40 98    	mov.b     w1, [w0+1]
    4a6a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    4a6c:	1e 00 78    	mov.w     [w14], w0
    4a6e:	90 40 78    	mov.b     [w0], w1
    4a70:	40 80 20    	mov.w     #0x804, w0
    4a72:	21 40 98    	mov.b     w1, [w0+2]
    4a74:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    4a76:	1e 00 78    	mov.w     [w14], w0
    4a78:	90 40 78    	mov.b     [w0], w1
    4a7a:	40 80 20    	mov.w     #0x804, w0
    4a7c:	31 40 98    	mov.b     w1, [w0+3]
    4a7e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    4a80:	1e 00 78    	mov.w     [w14], w0
    4a82:	90 40 78    	mov.b     [w0], w1
    4a84:	40 80 20    	mov.w     #0x804, w0
    4a86:	41 40 98    	mov.b     w1, [w0+4]
    4a88:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    4a8a:	1e 00 78    	mov.w     [w14], w0
    4a8c:	90 40 78    	mov.b     [w0], w1
    4a8e:	40 80 20    	mov.w     #0x804, w0
    4a90:	51 40 98    	mov.b     w1, [w0+5]
    4a92:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    4a94:	1e 00 78    	mov.w     [w14], w0
    4a96:	90 40 78    	mov.b     [w0], w1
    4a98:	40 80 20    	mov.w     #0x804, w0
    4a9a:	61 40 98    	mov.b     w1, [w0+6]
    4a9c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    4a9e:	1e 00 78    	mov.w     [w14], w0
    4aa0:	90 40 78    	mov.b     [w0], w1
    4aa2:	40 80 20    	mov.w     #0x804, w0
    4aa4:	71 40 98    	mov.b     w1, [w0+7]
    4aa6:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;         // reset the EP0 OUT byte count
    4aa8:	00 60 21    	mov.w     #0x1600, w0
    4aaa:	01 c4 b3    	mov.b     #0x40, w1
    4aac:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = DTSEN;                       // return the EP0 IN buffer to us (dequeue any pending requests)
    4aae:	50 60 21    	mov.w     #0x1605, w0
    4ab0:	81 c0 b3    	mov.b     #0x8, w1
    4ab2:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType & UOWN) && (USB_setup.wLength.w)) ? UOWN | DTS | DTSEN:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    4ab4:	40 80 20    	mov.w     #0x804, w0
    4ab6:	10 40 78    	mov.b     [w0], w0
    4ab8:	00 04 e0    	cp0.b     w0
    4aba:	06 00 35    	bra       LT, 0x4ac8 <.L29>
    4abc:	40 80 20    	mov.w     #0x804, w0
    4abe:	30 00 90    	mov.w     [w0+6], w0
    4ac0:	00 00 e0    	cp0.w     w0
    4ac2:	02 00 32    	bra       Z, 0x4ac8 <.L29>
    4ac4:	80 cc b3    	mov.b     #0xc8, w0
    4ac6:	01 00 37    	bra       0x4aca <.L30>

00004ac8 <.L29>:
    4ac8:	80 c8 b3    	mov.b     #0x88, w0

00004aca <.L30>:
    4aca:	11 60 21    	mov.w     #0x1601, w1
    4acc:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                           // assuming there is nothing to dequeue, clear the packet disable bit
    4ace:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    4ad0:	e0 58 21    	mov.w     #0x158e, w0
    4ad2:	80 c0 eb    	setm.b    w1
    4ad4:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    4ad6:	f0 58 21    	mov.w     #0x158f, w0
    4ad8:	80 c0 eb    	setm.b    w1
    4ada:	01 48 78    	mov.b     w1, [w0]
    USB_request.bytes_left.w = 0;
    4adc:	00 00 eb    	clr.w     w0
    4ade:	c0 ac 88    	mov.w     w0, 0x1598
    USB_request.done_callback = (USB_CALLBACK_T)NULL;
    4ae0:	00 00 eb    	clr.w     w0
    4ae2:	d0 ac 88    	mov.w     w0, 0x159a
    switch (USB_setup.bmRequestType & 0x60) {       // extract request type bits
    4ae4:	40 80 20    	mov.w     #0x804, w0
    4ae6:	10 40 78    	mov.b     [w0], w0
    4ae8:	80 80 fb    	ze        w0, w1
    4aea:	00 06 20    	mov.w     #0x60, w0
    4aec:	00 80 60    	and.w     w1, w0, w0
    4aee:	01 02 20    	mov.w     #0x20, w1
    4af0:	81 0f 50    	sub.w     w0, w1, [w15]
    4af2:	11 00 32    	bra       Z, 0x4b16 <.L33>
    4af4:	01 04 20    	mov.w     #0x40, w1
    4af6:	81 0f 50    	sub.w     w0, w1, [w15]
    4af8:	04 00 32    	bra       Z, 0x4b02 <.L34>
    4afa:	00 00 e0    	cp0.w     w0
    4afc:	16 00 3a    	bra       NZ, 0x4b2a <.L40>
        case STANDARD_REQ:
            usb_standard_requests();
    4afe:	1a 00 07    	rcall     0x4b34 <_usb_standard_requests> <.LFB5> <.LFE4>
            break;
    4b00:	17 00 37    	bra       0x4b30 <.L28>

00004b02 <.L34>:
        case VENDOR_REQ:
            if (USB_setup_vendor_callback)
    4b02:	c0 40 80    	mov.w     0x818, w0
    4b04:	00 00 e0    	cp0.w     w0
    4b06:	03 00 32    	bra       Z, 0x4b0e <.L36>
                USB_setup_vendor_callback();
    4b08:	c0 40 80    	mov.w     0x818, w0
    4b0a:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    4b0c:	11 00 37    	bra       0x4b30 <.L28>

00004b0e <.L36>:
    4b0e:	0c c8 bf    	mov.b     0x80c, WREG
    4b10:	00 04 a0    	bset.b    w0, #0x0
    4b12:	0c e8 b7    	mov.b     WREG, 0x80c
    4b14:	0d 00 37    	bra       0x4b30 <.L28>

00004b16 <.L33>:
        case CLASS_REQ:
            if (USB_setup_class_callback)
    4b16:	b0 40 80    	mov.w     0x816, w0
    4b18:	00 00 e0    	cp0.w     w0
    4b1a:	03 00 32    	bra       Z, 0x4b22 <.L38>
                USB_setup_class_callback();
    4b1c:	b0 40 80    	mov.w     0x816, w0
    4b1e:	00 00 01    	call      w0
            else
                USB_error_flags |= REQUEST_ERROR;
            break;
    4b20:	07 00 37    	bra       0x4b30 <.L28>

00004b22 <.L38>:
    4b22:	0c c8 bf    	mov.b     0x80c, WREG
    4b24:	00 04 a0    	bset.b    w0, #0x0
    4b26:	0c e8 b7    	mov.b     WREG, 0x80c
    4b28:	03 00 37    	bra       0x4b30 <.L28>

00004b2a <.L40>:
        default:
            USB_error_flags |= REQUEST_ERROR;
    4b2a:	0c c8 bf    	mov.b     0x80c, WREG
    4b2c:	00 04 a0    	bset.b    w0, #0x0
    4b2e:	0c e8 b7    	mov.b     WREG, 0x80c

00004b30 <.L28>:
    }
}
    4b30:	00 80 fa    	ulnk      
    4b32:	00 00 06    	return    

00004b34 <_usb_standard_requests>:

void usb_standard_requests(void) {
    4b34:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    uint16_t *U1EP;
    uint8_t ep;

    switch (USB_setup.bRequest) {
    4b36:	40 80 20    	mov.w     #0x804, w0
    4b38:	10 40 90    	mov.b     [w0+1], w0
    4b3a:	00 80 fb    	ze        w0, w0
    4b3c:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    4b3e:	7d 01 32    	bra       Z, 0x4e3a <.L46>
    4b40:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    4b42:	0c 00 3c    	bra       GT, 0x4b5c <.L51>
    4b44:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4b46:	c1 00 32    	bra       Z, 0x4cca <.L44>
    4b48:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4b4a:	03 00 3c    	bra       GT, 0x4b52 <.L52>
    4b4c:	00 00 e0    	cp0.w     w0
    4b4e:	12 00 32    	bra       Z, 0x4b74 <.L43>
    4b50:	48 02 37    	bra       0x4fe2 <.L42>

00004b52 <.L52>:
    4b52:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4b54:	ba 00 32    	bra       Z, 0x4cca <.L44>
    4b56:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    4b58:	4e 01 32    	bra       Z, 0x4df6 <.L45>
    4b5a:	43 02 37    	bra       0x4fe2 <.L42>

00004b5c <.L51>:
    4b5c:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    4b5e:	e3 01 32    	bra       Z, 0x4f26 <.L48>
    4b60:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    4b62:	03 00 3c    	bra       GT, 0x4b6a <.L53>
    4b64:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    4b66:	d4 01 32    	bra       Z, 0x4f10 <.L47>
    4b68:	3c 02 37    	bra       0x4fe2 <.L42>

00004b6a <.L53>:
    4b6a:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    4b6c:	fe 01 32    	bra       Z, 0x4f6a <.L49>
    4b6e:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    4b70:	17 02 32    	bra       Z, 0x4fa0 <.L50>
    4b72:	37 02 37    	bra       0x4fe2 <.L42>

00004b74 <.L43>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType & 0x1F) {   // extract request recipient bits
    4b74:	40 80 20    	mov.w     #0x804, w0
    4b76:	10 40 78    	mov.b     [w0], w0
    4b78:	00 80 fb    	ze        w0, w0
    4b7a:	7f 00 60    	and.w     w0, #0x1f, w0
    4b7c:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4b7e:	13 00 32    	bra       Z, 0x4ba6 <.L56>
    4b80:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4b82:	32 00 32    	bra       Z, 0x4be8 <.L57>
    4b84:	00 00 e0    	cp0.w     w0
    4b86:	9c 00 3a    	bra       NZ, 0x4cc0 <.L132>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    4b88:	30 b0 80    	mov.w     0x1606, w0
    4b8a:	e1 80 20    	mov.w     #0x80e, w1
    4b8c:	91 40 78    	mov.b     [w1], w1
    4b8e:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0;
    4b90:	30 b0 80    	mov.w     0x1606, w0
    4b92:	00 00 e8    	inc.w     w0, w0
    4b94:	80 40 eb    	clr.b     w1
    4b96:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 2;
    4b98:	40 60 21    	mov.w     #0x1604, w0
    4b9a:	21 c0 b3    	mov.b     #0x2, w1
    4b9c:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4b9e:	50 60 21    	mov.w     #0x1605, w0
    4ba0:	81 cc b3    	mov.b     #0xc8, w1
    4ba2:	01 48 78    	mov.b     w1, [w0]
                    break;
    4ba4:	91 00 37    	bra       0x4cc8 <.L58>

00004ba6 <.L56>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    4ba6:	10 c8 bf    	mov.b     0x810, WREG
    4ba8:	00 80 fb    	ze        w0, w0
    4baa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4bac:	03 00 32    	bra       Z, 0x4bb4 <.L60>
    4bae:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4bb0:	05 00 32    	bra       Z, 0x4bbc <.L61>
    4bb2:	19 00 37    	bra       0x4be6 <.L59>

00004bb4 <.L60>:
                        case ADDRESS_STATE:
                            USB_error_flags |= REQUEST_ERROR;
    4bb4:	0c c8 bf    	mov.b     0x80c, WREG
    4bb6:	00 04 a0    	bset.b    w0, #0x0
    4bb8:	0c e8 b7    	mov.b     WREG, 0x80c
                            break;
    4bba:	15 00 37    	bra       0x4be6 <.L59>

00004bbc <.L61>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    4bbc:	40 80 20    	mov.w     #0x804, w0
    4bbe:	40 40 90    	mov.b     [w0+4], w0
    4bc0:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4bc2:	0e 00 3e    	bra       GTU, 0x4be0 <.L62>
                                BD[EP0IN].address[0] = 0;
    4bc4:	30 b0 80    	mov.w     0x1606, w0
    4bc6:	80 40 eb    	clr.b     w1
    4bc8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    4bca:	30 b0 80    	mov.w     0x1606, w0
    4bcc:	00 00 e8    	inc.w     w0, w0
    4bce:	80 40 eb    	clr.b     w1
    4bd0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    4bd2:	40 60 21    	mov.w     #0x1604, w0
    4bd4:	21 c0 b3    	mov.b     #0x2, w1
    4bd6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4bd8:	50 60 21    	mov.w     #0x1605, w0
    4bda:	81 cc b3    	mov.b     #0xc8, w1
    4bdc:	01 48 78    	mov.b     w1, [w0]
    4bde:	03 00 37    	bra       0x4be6 <.L59>

00004be0 <.L62>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4be0:	0c c8 bf    	mov.b     0x80c, WREG
    4be2:	00 04 a0    	bset.b    w0, #0x0
    4be4:	0c e8 b7    	mov.b     WREG, 0x80c

00004be6 <.L59>:
                            }
                    }
                    break;
    4be6:	70 00 37    	bra       0x4cc8 <.L58>

00004be8 <.L57>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    4be8:	10 c8 bf    	mov.b     0x810, WREG
    4bea:	00 80 fb    	ze        w0, w0
    4bec:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4bee:	03 00 32    	bra       Z, 0x4bf6 <.L64>
    4bf0:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4bf2:	29 00 32    	bra       Z, 0x4c46 <.L65>
    4bf4:	61 00 37    	bra       0x4cb8 <.L133>

00004bf6 <.L64>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit and see if it is EP0
    4bf6:	40 80 20    	mov.w     #0x804, w0
    4bf8:	40 40 90    	mov.b     [w0+4], w0
    4bfa:	00 80 fb    	ze        w0, w0
    4bfc:	6f 00 60    	and.w     w0, #0xf, w0
    4bfe:	00 00 e0    	cp0.w     w0
    4c00:	1e 00 3a    	bra       NZ, 0x4c3e <.L66>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0] & 0x80) ? BD[EP0IN].status : BD[EP0OUT].status) & 0x04) >> 2;   // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    4c02:	31 b0 80    	mov.w     0x1606, w1
    4c04:	40 80 20    	mov.w     #0x804, w0
    4c06:	40 40 90    	mov.b     [w0+4], w0
    4c08:	00 04 e0    	cp0.b     w0
    4c0a:	07 00 3d    	bra       GE, 0x4c1a <.L67>
    4c0c:	50 60 21    	mov.w     #0x1605, w0
    4c0e:	10 40 78    	mov.b     [w0], w0
    4c10:	00 80 fb    	ze        w0, w0
    4c12:	64 00 60    	and.w     w0, #0x4, w0
    4c14:	42 80 de    	asr.w     w0, #0x2, w0
    4c16:	00 40 78    	mov.b     w0, w0
    4c18:	06 00 37    	bra       0x4c26 <.L68>

00004c1a <.L67>:
    4c1a:	10 60 21    	mov.w     #0x1601, w0
    4c1c:	10 40 78    	mov.b     [w0], w0
    4c1e:	00 80 fb    	ze        w0, w0
    4c20:	64 00 60    	and.w     w0, #0x4, w0
    4c22:	42 80 de    	asr.w     w0, #0x2, w0
    4c24:	00 40 78    	mov.b     w0, w0

00004c26 <.L68>:
    4c26:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0;
    4c28:	30 b0 80    	mov.w     0x1606, w0
    4c2a:	00 00 e8    	inc.w     w0, w0
    4c2c:	80 40 eb    	clr.b     w1
    4c2e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    4c30:	40 60 21    	mov.w     #0x1604, w0
    4c32:	21 c0 b3    	mov.b     #0x2, w1
    4c34:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4c36:	50 60 21    	mov.w     #0x1605, w0
    4c38:	81 cc b3    	mov.b     #0xc8, w1
    4c3a:	01 48 78    	mov.b     w1, [w0]
    4c3c:	03 00 37    	bra       0x4c44 <.L69>

00004c3e <.L66>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4c3e:	0c c8 bf    	mov.b     0x80c, WREG
    4c40:	00 04 a0    	bset.b    w0, #0x0
    4c42:	0c e8 b7    	mov.b     WREG, 0x80c

00004c44 <.L69>:
                            }
                            break;
    4c44:	3c 00 37    	bra       0x4cbe <.L70>

00004c46 <.L65>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    4c46:	a0 4a 20    	mov.w     #0x4aa, w0
    4c48:	00 0f 78    	mov.w     w0, [w14]
                            ep = USB_setup.wIndex.b[0] & 0x0F;  // get EP and strip off direction bit for offset from U1EP0
    4c4a:	40 80 20    	mov.w     #0x804, w0
    4c4c:	40 40 90    	mov.b     [w0+4], w0
    4c4e:	6f 40 60    	and.b     w0, #0xf, w0
    4c50:	20 47 98    	mov.b     w0, [w14+2]
                            buf_desc_ptr = &BD[EP0OUT] + ((ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00));  // compute pointer to the buffer descriptor for the specified EP
    4c52:	2e 40 90    	mov.b     [w14+2], w0
    4c54:	00 80 fb    	ze        w0, w0
    4c56:	00 00 40    	add.w     w0, w0, w0
    4c58:	80 00 78    	mov.w     w0, w1
    4c5a:	40 80 20    	mov.w     #0x804, w0
    4c5c:	40 40 90    	mov.b     [w0+4], w0
    4c5e:	00 00 fb    	se        w0, w0
    4c60:	4f 00 de    	lsr.w     w0, #0xf, w0
    4c62:	01 00 70    	ior.w     w0, w1, w0
    4c64:	c2 00 dd    	sl.w      w0, #0x2, w1
    4c66:	00 60 21    	mov.w     #0x1600, w0
    4c68:	00 80 40    	add.w     w1, w0, w0
    4c6a:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[ep] & ((USB_setup.wIndex.b[0] & 0x80) ? 0x04 : 0x08)) {    // if the specified EP is enabled for transfers in the specified direction...
    4c6c:	2e 40 90    	mov.b     [w14+2], w0
    4c6e:	00 80 fb    	ze        w0, w0
    4c70:	00 00 40    	add.w     w0, w0, w0
    4c72:	1e 00 40    	add.w     w0, [w14], w0
    4c74:	90 00 78    	mov.w     [w0], w1
    4c76:	40 80 20    	mov.w     #0x804, w0
    4c78:	40 40 90    	mov.b     [w0+4], w0
    4c7a:	00 04 e0    	cp0.b     w0
    4c7c:	02 00 3d    	bra       GE, 0x4c82 <.L71>
    4c7e:	40 00 20    	mov.w     #0x4, w0
    4c80:	01 00 37    	bra       0x4c84 <.L72>

00004c82 <.L71>:
    4c82:	80 00 20    	mov.w     #0x8, w0

00004c84 <.L72>:
    4c84:	00 80 60    	and.w     w1, w0, w0
    4c86:	00 00 e0    	cp0.w     w0
    4c88:	13 00 32    	bra       Z, 0x4cb0 <.L73>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status) & 0x04) >> 2;    // ...return the BSTALL bit of the specified EP
    4c8a:	30 b0 80    	mov.w     0x1606, w0
    4c8c:	ae 00 90    	mov.w     [w14+4], w1
    4c8e:	91 40 90    	mov.b     [w1+1], w1
    4c90:	81 80 fb    	ze        w1, w1
    4c92:	e4 80 60    	and.w     w1, #0x4, w1
    4c94:	c2 88 de    	asr.w     w1, #0x2, w1
    4c96:	81 40 78    	mov.b     w1, w1
    4c98:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0;
    4c9a:	30 b0 80    	mov.w     0x1606, w0
    4c9c:	00 00 e8    	inc.w     w0, w0
    4c9e:	80 40 eb    	clr.b     w1
    4ca0:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 2;
    4ca2:	40 60 21    	mov.w     #0x1604, w0
    4ca4:	21 c0 b3    	mov.b     #0x2, w1
    4ca6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4ca8:	50 60 21    	mov.w     #0x1605, w0
    4caa:	81 cc b3    	mov.b     #0xc8, w1
    4cac:	01 48 78    	mov.b     w1, [w0]
    4cae:	03 00 37    	bra       0x4cb6 <.L74>

00004cb0 <.L73>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4cb0:	0c c8 bf    	mov.b     0x80c, WREG
    4cb2:	00 04 a0    	bset.b    w0, #0x0
    4cb4:	0c e8 b7    	mov.b     WREG, 0x80c

00004cb6 <.L74>:
                            }
                            break;
    4cb6:	03 00 37    	bra       0x4cbe <.L70>

00004cb8 <.L133>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    4cb8:	0c c8 bf    	mov.b     0x80c, WREG
    4cba:	00 04 a0    	bset.b    w0, #0x0
    4cbc:	0c e8 b7    	mov.b     WREG, 0x80c

00004cbe <.L70>:
                    }
                    break;
    4cbe:	04 00 37    	bra       0x4cc8 <.L58>

00004cc0 <.L132>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    4cc0:	0c c8 bf    	mov.b     0x80c, WREG
    4cc2:	00 04 a0    	bset.b    w0, #0x0
    4cc4:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    4cc6:	92 01 37    	bra       0x4fec <.L41>

00004cc8 <.L58>:
    4cc8:	91 01 37    	bra       0x4fec <.L41>

00004cca <.L44>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType & 0x1F) {       // extract request recipient bits
    4cca:	40 80 20    	mov.w     #0x804, w0
    4ccc:	10 40 78    	mov.b     [w0], w0
    4cce:	00 80 fb    	ze        w0, w0
    4cd0:	7f 00 60    	and.w     w0, #0x1f, w0
    4cd2:	00 00 e0    	cp0.w     w0
    4cd4:	03 00 32    	bra       Z, 0x4cdc <.L77>
    4cd6:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4cd8:	1c 00 32    	bra       Z, 0x4d12 <.L78>
    4cda:	88 00 37    	bra       0x4dec <.L134>

00004cdc <.L77>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    4cdc:	40 80 20    	mov.w     #0x804, w0
    4cde:	20 40 90    	mov.b     [w0+2], w0
    4ce0:	00 80 fb    	ze        w0, w0
    4ce2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4ce4:	12 00 3a    	bra       NZ, 0x4d0a <.L135>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest == CLEAR_FEATURE)
    4ce6:	40 80 20    	mov.w     #0x804, w0
    4ce8:	10 40 90    	mov.b     [w0+1], w0
    4cea:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4cec:	04 00 3a    	bra       NZ, 0x4cf6 <.L81>
                                USB_device_status &= 0xFE;
    4cee:	0e c8 bf    	mov.b     0x80e, WREG
    4cf0:	00 04 a1    	bclr.b    w0, #0x0
    4cf2:	0e e8 b7    	mov.b     WREG, 0x80e
    4cf4:	03 00 37    	bra       0x4cfc <.L82>

00004cf6 <.L81>:
                            else
                                USB_device_status |= 0x01;
    4cf6:	0e c8 bf    	mov.b     0x80e, WREG
    4cf8:	00 04 a0    	bset.b    w0, #0x0
    4cfa:	0e e8 b7    	mov.b     WREG, 0x80e

00004cfc <.L82>:
                            BD[EP0IN].bytecount = 0;
    4cfc:	40 60 21    	mov.w     #0x1604, w0
    4cfe:	80 40 eb    	clr.b     w1
    4d00:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4d02:	50 60 21    	mov.w     #0x1605, w0
    4d04:	81 cc b3    	mov.b     #0xc8, w1
    4d06:	01 48 78    	mov.b     w1, [w0]
                            break;
    4d08:	03 00 37    	bra       0x4d10 <.L83>

00004d0a <.L135>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    4d0a:	0c c8 bf    	mov.b     0x80c, WREG
    4d0c:	00 04 a0    	bset.b    w0, #0x0
    4d0e:	0c e8 b7    	mov.b     WREG, 0x80c

00004d10 <.L83>:
                    }
                    break;
    4d10:	71 00 37    	bra       0x4df4 <.L84>

00004d12 <.L78>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    4d12:	10 c8 bf    	mov.b     0x810, WREG
    4d14:	00 80 fb    	ze        w0, w0
    4d16:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4d18:	03 00 32    	bra       Z, 0x4d20 <.L86>
    4d1a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4d1c:	12 00 32    	bra       Z, 0x4d42 <.L87>
    4d1e:	62 00 37    	bra       0x4de4 <.L136>

00004d20 <.L86>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0] & 0x0F)) {  // get EP, strip off direction bit, and see if its EP0
    4d20:	40 80 20    	mov.w     #0x804, w0
    4d22:	40 40 90    	mov.b     [w0+4], w0
    4d24:	00 80 fb    	ze        w0, w0
    4d26:	6f 00 60    	and.w     w0, #0xf, w0
    4d28:	00 00 e0    	cp0.w     w0
    4d2a:	07 00 3a    	bra       NZ, 0x4d3a <.L88>
                                BD[EP0IN].bytecount = 0;
    4d2c:	40 60 21    	mov.w     #0x1604, w0
    4d2e:	80 40 eb    	clr.b     w1
    4d30:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4d32:	50 60 21    	mov.w     #0x1605, w0
    4d34:	81 cc b3    	mov.b     #0xc8, w1
    4d36:	01 48 78    	mov.b     w1, [w0]
    4d38:	03 00 37    	bra       0x4d40 <.L89>

00004d3a <.L88>:
                            } else {
                                USB_error_flags |= REQUEST_ERROR;
    4d3a:	0c c8 bf    	mov.b     0x80c, WREG
    4d3c:	00 04 a0    	bset.b    w0, #0x0
    4d3e:	0c e8 b7    	mov.b     WREG, 0x80c

00004d40 <.L89>:
                            }
                            break;
    4d40:	54 00 37    	bra       0x4dea <.L90>

00004d42 <.L87>:
                        case CONFIG_STATE:
                            U1EP = (uint16_t *)&U1EP0;
    4d42:	a0 4a 20    	mov.w     #0x4aa, w0
    4d44:	00 0f 78    	mov.w     w0, [w14]
                            if (ep = USB_setup.wIndex.b[0] & 0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    4d46:	40 80 20    	mov.w     #0x804, w0
    4d48:	40 40 90    	mov.b     [w0+4], w0
    4d4a:	6f 40 60    	and.b     w0, #0xf, w0
    4d4c:	20 47 98    	mov.b     w0, [w14+2]
    4d4e:	2e 40 90    	mov.b     [w14+2], w0
    4d50:	00 04 e0    	cp0.b     w0
    4d52:	3c 00 32    	bra       Z, 0x4dcc <.L91>
                                buf_desc_ptr = &BD[(ep << 1) | ((USB_setup.wIndex.b[0] & 0x80) ? 0x01 : 0x00)]; // compute pointer to the buffer descriptor for the specified EP
    4d54:	2e 40 90    	mov.b     [w14+2], w0
    4d56:	00 80 fb    	ze        w0, w0
    4d58:	00 00 40    	add.w     w0, w0, w0
    4d5a:	80 00 78    	mov.w     w0, w1
    4d5c:	40 80 20    	mov.w     #0x804, w0
    4d5e:	40 40 90    	mov.b     [w0+4], w0
    4d60:	00 00 fb    	se        w0, w0
    4d62:	4f 00 de    	lsr.w     w0, #0xf, w0
    4d64:	01 00 70    	ior.w     w0, w1, w0
    4d66:	c2 00 dd    	sl.w      w0, #0x2, w1
    4d68:	00 60 21    	mov.w     #0x1600, w0
    4d6a:	00 80 40    	add.w     w1, w0, w0
    4d6c:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0] & 0x80) { // if the specified EP direction is IN...
    4d6e:	40 80 20    	mov.w     #0x804, w0
    4d70:	40 40 90    	mov.b     [w0+4], w0
    4d72:	00 04 e0    	cp0.b     w0
    4d74:	16 00 3d    	bra       GE, 0x4da2 <.L92>
                                    if (U1EP[ep] & 0x04) {          // if EPn is enabled for IN transfers...
    4d76:	2e 40 90    	mov.b     [w14+2], w0
    4d78:	00 80 fb    	ze        w0, w0
    4d7a:	00 00 40    	add.w     w0, w0, w0
    4d7c:	1e 00 40    	add.w     w0, [w14], w0
    4d7e:	10 00 78    	mov.w     [w0], w0
    4d80:	64 00 60    	and.w     w0, #0x4, w0
    4d82:	00 00 e0    	cp0.w     w0
    4d84:	0a 00 32    	bra       Z, 0x4d9a <.L93>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? 0 : (UOWN | BSTALL);
    4d86:	40 80 20    	mov.w     #0x804, w0
    4d88:	10 40 90    	mov.b     [w0+1], w0
    4d8a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4d8c:	02 00 3a    	bra       NZ, 0x4d92 <.L94>
    4d8e:	00 40 eb    	clr.b     w0
    4d90:	01 00 37    	bra       0x4d94 <.L95>

00004d92 <.L94>:
    4d92:	40 c8 b3    	mov.b     #0x84, w0

00004d94 <.L95>:
    4d94:	ae 00 90    	mov.w     [w14+4], w1
    4d96:	90 40 98    	mov.b     w0, [w1+1]
    4d98:	19 00 37    	bra       0x4dcc <.L91>

00004d9a <.L93>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    4d9a:	0c c8 bf    	mov.b     0x80c, WREG
    4d9c:	00 04 a0    	bset.b    w0, #0x0
    4d9e:	0c e8 b7    	mov.b     WREG, 0x80c
    4da0:	15 00 37    	bra       0x4dcc <.L91>

00004da2 <.L92>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[ep] & 0x08) {  // if the EP is enabled for OUT transfers...
    4da2:	2e 40 90    	mov.b     [w14+2], w0
    4da4:	00 80 fb    	ze        w0, w0
    4da6:	00 00 40    	add.w     w0, w0, w0
    4da8:	1e 00 40    	add.w     w0, [w14], w0
    4daa:	10 00 78    	mov.w     [w0], w0
    4dac:	68 00 60    	and.w     w0, #0x8, w0
    4dae:	00 00 e0    	cp0.w     w0
    4db0:	0a 00 32    	bra       Z, 0x4dc6 <.L96>
                                        buf_desc_ptr->status = (USB_setup.bRequest == CLEAR_FEATURE) ? (UOWN | DTSEN) : (UOWN | BSTALL);
    4db2:	40 80 20    	mov.w     #0x804, w0
    4db4:	10 40 90    	mov.b     [w0+1], w0
    4db6:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4db8:	02 00 3a    	bra       NZ, 0x4dbe <.L97>
    4dba:	80 c8 b3    	mov.b     #0x88, w0
    4dbc:	01 00 37    	bra       0x4dc0 <.L98>

00004dbe <.L97>:
    4dbe:	40 c8 b3    	mov.b     #0x84, w0

00004dc0 <.L98>:
    4dc0:	ae 00 90    	mov.w     [w14+4], w1
    4dc2:	90 40 98    	mov.b     w0, [w1+1]
    4dc4:	03 00 37    	bra       0x4dcc <.L91>

00004dc6 <.L96>:
                                    } else {
                                        USB_error_flags |= REQUEST_ERROR;
    4dc6:	0c c8 bf    	mov.b     0x80c, WREG
    4dc8:	00 04 a0    	bset.b    w0, #0x0
    4dca:	0c e8 b7    	mov.b     WREG, 0x80c

00004dcc <.L91>:
                                    }
                                }
                            }
                            if (!(USB_error_flags & REQUEST_ERROR)) {   // if there was no Request Error...
    4dcc:	0c c8 bf    	mov.b     0x80c, WREG
    4dce:	00 80 fb    	ze        w0, w0
    4dd0:	61 00 60    	and.w     w0, #0x1, w0
    4dd2:	00 00 e0    	cp0.w     w0
    4dd4:	06 00 3a    	bra       NZ, 0x4de2 <.L99>
                                BD[EP0IN].bytecount = 0;
    4dd6:	40 60 21    	mov.w     #0x1604, w0
    4dd8:	80 40 eb    	clr.b     w1
    4dda:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // ...send packet as DATA1, set UOWN bit
    4ddc:	50 60 21    	mov.w     #0x1605, w0
    4dde:	81 cc b3    	mov.b     #0xc8, w1
    4de0:	01 48 78    	mov.b     w1, [w0]

00004de2 <.L99>:
                            }
                            break;
    4de2:	03 00 37    	bra       0x4dea <.L90>

00004de4 <.L136>:
                        default:
                            USB_error_flags |= REQUEST_ERROR;
    4de4:	0c c8 bf    	mov.b     0x80c, WREG
    4de6:	00 04 a0    	bset.b    w0, #0x0
    4de8:	0c e8 b7    	mov.b     WREG, 0x80c

00004dea <.L90>:
                    }
                    break;
    4dea:	04 00 37    	bra       0x4df4 <.L84>

00004dec <.L134>:
                default:
                    USB_error_flags |= REQUEST_ERROR;
    4dec:	0c c8 bf    	mov.b     0x80c, WREG
    4dee:	00 04 a0    	bset.b    w0, #0x0
    4df0:	0c e8 b7    	mov.b     WREG, 0x80c
            }
            break;
    4df2:	fc 00 37    	bra       0x4fec <.L41>

00004df4 <.L84>:
    4df4:	fb 00 37    	bra       0x4fec <.L41>

00004df6 <.L45>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0] > 0x7F) {     // if new device address is illegal, send Request Error
    4df6:	40 80 20    	mov.w     #0x804, w0
    4df8:	20 40 90    	mov.b     [w0+2], w0
    4dfa:	00 04 e0    	cp0.b     w0
    4dfc:	04 00 3d    	bra       GE, 0x4e06 <.L100>
                USB_error_flags |= REQUEST_ERROR;
    4dfe:	0c c8 bf    	mov.b     0x80c, WREG
    4e00:	00 04 a0    	bset.b    w0, #0x0
    4e02:	0c e8 b7    	mov.b     WREG, 0x80c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                USB_in_callbacks[0] = usb_set_address_callback;
                BD[EP0IN].bytecount = 0;
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
            }
            break;
    4e04:	f3 00 37    	bra       0x4fec <.L41>

00004e06 <.L100>:
    4e06:	40 80 20    	mov.w     #0x804, w0
    4e08:	90 40 78    	mov.b     [w0], w1
    4e0a:	e0 58 21    	mov.w     #0x158e, w0
    4e0c:	01 48 78    	mov.b     w1, [w0]
    4e0e:	40 80 20    	mov.w     #0x804, w0
    4e10:	90 40 90    	mov.b     [w0+1], w1
    4e12:	f0 58 21    	mov.w     #0x158f, w0
    4e14:	01 48 78    	mov.b     w1, [w0]
    4e16:	40 80 20    	mov.w     #0x804, w0
    4e18:	10 00 90    	mov.w     [w0+2], w0
    4e1a:	80 ac 88    	mov.w     w0, 0x1590
    4e1c:	40 80 20    	mov.w     #0x804, w0
    4e1e:	20 00 90    	mov.w     [w0+4], w0
    4e20:	90 ac 88    	mov.w     w0, 0x1592
    4e22:	40 80 20    	mov.w     #0x804, w0
    4e24:	30 00 90    	mov.w     [w0+6], w0
    4e26:	a0 ac 88    	mov.w     w0, 0x1594
    4e28:	40 83 24    	mov.w     #0x4834, w0
    4e2a:	e0 ac 88    	mov.w     w0, 0x159c
    4e2c:	40 60 21    	mov.w     #0x1604, w0
    4e2e:	80 40 eb    	clr.b     w1
    4e30:	01 48 78    	mov.b     w1, [w0]
    4e32:	50 60 21    	mov.w     #0x1605, w0
    4e34:	81 cc b3    	mov.b     #0xc8, w1
    4e36:	01 48 78    	mov.b     w1, [w0]
    4e38:	d9 00 37    	bra       0x4fec <.L41>

00004e3a <.L46>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    4e3a:	40 80 20    	mov.w     #0x804, w0
    4e3c:	90 40 78    	mov.b     [w0], w1
    4e3e:	e0 58 21    	mov.w     #0x158e, w0
    4e40:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    4e42:	40 80 20    	mov.w     #0x804, w0
    4e44:	90 40 90    	mov.b     [w0+1], w1
    4e46:	f0 58 21    	mov.w     #0x158f, w0
    4e48:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    4e4a:	40 80 20    	mov.w     #0x804, w0
    4e4c:	10 00 90    	mov.w     [w0+2], w0
    4e4e:	80 ac 88    	mov.w     w0, 0x1590
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    4e50:	40 80 20    	mov.w     #0x804, w0
    4e52:	20 00 90    	mov.w     [w0+4], w0
    4e54:	90 ac 88    	mov.w     w0, 0x1592
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    4e56:	40 80 20    	mov.w     #0x804, w0
    4e58:	30 00 90    	mov.w     [w0+6], w0
    4e5a:	a0 ac 88    	mov.w     w0, 0x1594
            switch (USB_setup.wValue.b[1]) {
    4e5c:	40 80 20    	mov.w     #0x804, w0
    4e5e:	30 40 90    	mov.b     [w0+3], w0
    4e60:	00 80 fb    	ze        w0, w0
    4e62:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    4e64:	0b 00 32    	bra       Z, 0x4e7c <.L104>
    4e66:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4e68:	24 00 32    	bra       Z, 0x4eb2 <.L105>
    4e6a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    4e6c:	37 00 3a    	bra       NZ, 0x4edc <.L137>
                case DEVICE:
                    USB_request.data_ptr = Device;
    4e6e:	40 67 29    	mov.w     #0x9674, w0
    4e70:	b0 ac 88    	mov.w     w0, 0x1596
                    USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    4e72:	b0 ac 80    	mov.w     0x1596, w0
    4e74:	10 40 78    	mov.b     [w0], w0
    4e76:	00 80 fb    	ze        w0, w0
    4e78:	c0 ac 88    	mov.w     w0, 0x1598
                    break;
    4e7a:	39 00 37    	bra       0x4eee <.L106>

00004e7c <.L104>:
                case CONFIGURATION:
                    if (USB_setup.wValue.b[0] < NUM_CONFIGURATIONS) {
    4e7c:	40 80 20    	mov.w     #0x804, w0
    4e7e:	20 40 90    	mov.b     [w0+2], w0
    4e80:	00 04 e0    	cp0.b     w0
    4e82:	13 00 3a    	bra       NZ, 0x4eaa <.L107>
                        USB_request.data_ptr = Configurations[USB_setup.wValue.b[0]];
    4e84:	40 80 20    	mov.w     #0x804, w0
    4e86:	20 40 90    	mov.b     [w0+2], w0
    4e88:	00 80 fb    	ze        w0, w0
    4e8a:	80 00 40    	add.w     w0, w0, w1
    4e8c:	a0 6c 29    	mov.w     #0x96ca, w0
    4e8e:	00 80 40    	add.w     w1, w0, w0
    4e90:	10 00 78    	mov.w     [w0], w0
    4e92:	b0 ac 88    	mov.w     w0, 0x1596
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];  // wTotalLength starting at an offset of 2
    4e94:	b0 ac 80    	mov.w     0x1596, w0
    4e96:	00 80 e8    	inc2.w    w0, w0
    4e98:	90 40 78    	mov.b     [w0], w1
    4e9a:	80 59 21    	mov.w     #0x1598, w0
    4e9c:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    4e9e:	b0 ac 80    	mov.w     0x1596, w0
    4ea0:	63 00 40    	add.w     w0, #0x3, w0
    4ea2:	90 40 78    	mov.b     [w0], w1
    4ea4:	90 59 21    	mov.w     #0x1599, w0
    4ea6:	01 48 78    	mov.b     w1, [w0]
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    4ea8:	22 00 37    	bra       0x4eee <.L106>

00004eaa <.L107>:
    4eaa:	0c c8 bf    	mov.b     0x80c, WREG
    4eac:	00 04 a0    	bset.b    w0, #0x0
    4eae:	0c e8 b7    	mov.b     WREG, 0x80c
    4eb0:	1e 00 37    	bra       0x4eee <.L106>

00004eb2 <.L105>:
                case STRING:
                    if (USB_setup.wValue.b[0] < NUM_STRINGS) {
    4eb2:	40 80 20    	mov.w     #0x804, w0
    4eb4:	20 40 90    	mov.b     [w0+2], w0
    4eb6:	e2 4f 50    	sub.b     w0, #0x2, [w15]
    4eb8:	0d 00 3e    	bra       GTU, 0x4ed4 <.L109>
                        USB_request.data_ptr = Strings[USB_setup.wValue.b[0]];
    4eba:	40 80 20    	mov.w     #0x804, w0
    4ebc:	20 40 90    	mov.b     [w0+2], w0
    4ebe:	00 80 fb    	ze        w0, w0
    4ec0:	80 00 40    	add.w     w0, w0, w1
    4ec2:	00 72 29    	mov.w     #0x9720, w0
    4ec4:	00 80 40    	add.w     w1, w0, w0
    4ec6:	10 00 78    	mov.w     [w0], w0
    4ec8:	b0 ac 88    	mov.w     w0, 0x1596
                        USB_request.bytes_left.w = (uint16_t)USB_request.data_ptr[0];
    4eca:	b0 ac 80    	mov.w     0x1596, w0
    4ecc:	10 40 78    	mov.b     [w0], w0
    4ece:	00 80 fb    	ze        w0, w0
    4ed0:	c0 ac 88    	mov.w     w0, 0x1598
                    } else
                        USB_error_flags |= REQUEST_ERROR;
                    break;
    4ed2:	0d 00 37    	bra       0x4eee <.L106>

00004ed4 <.L109>:
    4ed4:	0c c8 bf    	mov.b     0x80c, WREG
    4ed6:	00 04 a0    	bset.b    w0, #0x0
    4ed8:	0c e8 b7    	mov.b     WREG, 0x80c
    4eda:	09 00 37    	bra       0x4eee <.L106>

00004edc <.L137>:
                default:
                    if (USB_get_descriptor_callback)
    4edc:	a0 40 80    	mov.w     0x814, w0
    4ede:	00 00 e0    	cp0.w     w0
    4ee0:	03 00 32    	bra       Z, 0x4ee8 <.L111>
                        USB_get_descriptor_callback();
    4ee2:	a0 40 80    	mov.w     0x814, w0
    4ee4:	00 00 01    	call      w0
    4ee6:	03 00 37    	bra       0x4eee <.L106>

00004ee8 <.L111>:
                    else
                        USB_error_flags |= REQUEST_ERROR;
    4ee8:	0c c8 bf    	mov.b     0x80c, WREG
    4eea:	00 04 a0    	bset.b    w0, #0x0
    4eec:	0c e8 b7    	mov.b     WREG, 0x80c

00004eee <.L106>:
            }
            if (!(USB_error_flags & REQUEST_ERROR)) {
    4eee:	0c c8 bf    	mov.b     0x80c, WREG
    4ef0:	00 80 fb    	ze        w0, w0
    4ef2:	61 00 60    	and.w     w0, #0x1, w0
    4ef4:	00 00 e0    	cp0.w     w0
    4ef6:	79 00 3a    	bra       NZ, 0x4fea <.L142>
                USB_in_callbacks[0] = usb_send_data_packet;
    4ef8:	00 ff 24    	mov.w     #0x4ff0, w0
    4efa:	e0 ac 88    	mov.w     w0, 0x159c
                if (USB_setup.wLength.w < USB_request.bytes_left.w)
    4efc:	40 80 20    	mov.w     #0x804, w0
    4efe:	b0 00 90    	mov.w     [w0+6], w1
    4f00:	c0 ac 80    	mov.w     0x1598, w0
    4f02:	80 8f 50    	sub.w     w1, w0, [w15]
    4f04:	03 00 31    	bra       C, 0x4f0c <.L113>
                    USB_request.bytes_left.w = USB_setup.wLength.w;
    4f06:	40 80 20    	mov.w     #0x804, w0
    4f08:	30 00 90    	mov.w     [w0+6], w0
    4f0a:	c0 ac 88    	mov.w     w0, 0x1598

00004f0c <.L113>:
                usb_send_data_packet();
    4f0c:	71 00 07    	rcall     0x4ff0 <_usb_send_data_packet> <.LFB6> <.LFE5>
            }
            break;
    4f0e:	6e 00 37    	bra       0x4fec <.L41>

00004f10 <.L47>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config; // copy current device configuration to EP0 IN buffer
    4f10:	30 b0 80    	mov.w     0x1606, w0
    4f12:	d1 80 20    	mov.w     #0x80d, w1
    4f14:	91 40 78    	mov.b     [w1], w1
    4f16:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 1;
    4f18:	40 60 21    	mov.w     #0x1604, w0
    4f1a:	11 c0 b3    	mov.b     #0x1, w1
    4f1c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4f1e:	50 60 21    	mov.w     #0x1605, w0
    4f20:	81 cc b3    	mov.b     #0xc8, w1
    4f22:	01 48 78    	mov.b     w1, [w0]
            break;
    4f24:	63 00 37    	bra       0x4fec <.L41>

00004f26 <.L48>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0] <= NUM_CONFIGURATIONS) {
    4f26:	40 80 20    	mov.w     #0x804, w0
    4f28:	20 40 90    	mov.b     [w0+2], w0
    4f2a:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4f2c:	1a 00 3e    	bra       GTU, 0x4f62 <.L114>
                usb_disable_endpoints(1);           // disable all endpoints except EP0
    4f2e:	10 c0 b3    	mov.b     #0x1, w0
    4f30:	62 fc 07    	rcall     0x47f6 <_usb_disable_endpoints> <.L0> <.LFB0> <.LFE52> <.Letext0> <.Ltext0>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    4f32:	40 80 20    	mov.w     #0x804, w0
    4f34:	20 40 90    	mov.b     [w0+2], w0
    4f36:	0d e8 b7    	mov.b     WREG, 0x80d
    4f38:	0d c8 bf    	mov.b     0x80d, WREG
    4f3a:	00 80 fb    	ze        w0, w0
    4f3c:	00 00 e0    	cp0.w     w0
    4f3e:	03 00 3a    	bra       NZ, 0x4f46 <.L138>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    4f40:	20 c0 b3    	mov.b     #0x2, w0
    4f42:	10 e8 b7    	mov.b     WREG, 0x810
                        break;
    4f44:	07 00 37    	bra       0x4f54 <.L117>

00004f46 <.L138>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    4f46:	30 c0 b3    	mov.b     #0x3, w0
    4f48:	10 e8 b7    	mov.b     WREG, 0x810
                        if (USB_set_config_callback)
    4f4a:	90 40 80    	mov.w     0x812, w0
    4f4c:	00 00 e0    	cp0.w     w0
    4f4e:	02 00 32    	bra       Z, 0x4f54 <.L117>
                            USB_set_config_callback();
    4f50:	90 40 80    	mov.w     0x812, w0
    4f52:	00 00 01    	call      w0

00004f54 <.L117>:
                }
                BD[EP0IN].bytecount = 0;
    4f54:	40 60 21    	mov.w     #0x1604, w0
    4f56:	80 40 eb    	clr.b     w1
    4f58:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4f5a:	50 60 21    	mov.w     #0x1605, w0
    4f5c:	81 cc b3    	mov.b     #0xc8, w1
    4f5e:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4f60:	45 00 37    	bra       0x4fec <.L41>

00004f62 <.L114>:
    4f62:	0c c8 bf    	mov.b     0x80c, WREG
    4f64:	00 04 a0    	bset.b    w0, #0x0
    4f66:	0c e8 b7    	mov.b     WREG, 0x80c
    4f68:	41 00 37    	bra       0x4fec <.L41>

00004f6a <.L49>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    4f6a:	10 c8 bf    	mov.b     0x810, WREG
    4f6c:	00 80 fb    	ze        w0, w0
    4f6e:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4f70:	13 00 3a    	bra       NZ, 0x4f98 <.L139>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    4f72:	40 80 20    	mov.w     #0x804, w0
    4f74:	40 40 90    	mov.b     [w0+4], w0
    4f76:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4f78:	0a 00 3e    	bra       GTU, 0x4f8e <.L121>
                        BD[EP0IN].address[0] = 0;   // always send back 0 for bAlternateSetting
    4f7a:	30 b0 80    	mov.w     0x1606, w0
    4f7c:	80 40 eb    	clr.b     w1
    4f7e:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 1;
    4f80:	40 60 21    	mov.w     #0x1604, w0
    4f82:	11 c0 b3    	mov.b     #0x1, w1
    4f84:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4f86:	50 60 21    	mov.w     #0x1605, w0
    4f88:	81 cc b3    	mov.b     #0xc8, w1
    4f8a:	01 48 78    	mov.b     w1, [w0]
    4f8c:	03 00 37    	bra       0x4f94 <.L122>

00004f8e <.L121>:
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    4f8e:	0c c8 bf    	mov.b     0x80c, WREG
    4f90:	00 04 a0    	bset.b    w0, #0x0
    4f92:	0c e8 b7    	mov.b     WREG, 0x80c

00004f94 <.L122>:
                    }
                    break;
    4f94:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4f96:	2a 00 37    	bra       0x4fec <.L41>

00004f98 <.L139>:
    4f98:	0c c8 bf    	mov.b     0x80c, WREG
    4f9a:	00 04 a0    	bset.b    w0, #0x0
    4f9c:	0c e8 b7    	mov.b     WREG, 0x80c
    4f9e:	26 00 37    	bra       0x4fec <.L41>

00004fa0 <.L50>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    4fa0:	10 c8 bf    	mov.b     0x810, WREG
    4fa2:	00 80 fb    	ze        w0, w0
    4fa4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    4fa6:	19 00 3a    	bra       NZ, 0x4fda <.L140>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0] < NUM_INTERFACES) {
    4fa8:	40 80 20    	mov.w     #0x804, w0
    4faa:	40 40 90    	mov.b     [w0+4], w0
    4fac:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    4fae:	10 00 3e    	bra       GTU, 0x4fd0 <.L126>
                        switch (USB_setup.wValue.b[0]) {
    4fb0:	40 80 20    	mov.w     #0x804, w0
    4fb2:	20 40 90    	mov.b     [w0+2], w0
    4fb4:	00 80 fb    	ze        w0, w0
    4fb6:	00 00 e0    	cp0.w     w0
    4fb8:	07 00 3a    	bra       NZ, 0x4fc8 <.L141>
                            case 0:                 // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0;
    4fba:	40 60 21    	mov.w     #0x1604, w0
    4fbc:	80 40 eb    	clr.b     w1
    4fbe:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    4fc0:	50 60 21    	mov.w     #0x1605, w0
    4fc2:	81 cc b3    	mov.b     #0xc8, w1
    4fc4:	01 48 78    	mov.b     w1, [w0]
                                break;
    4fc6:	07 00 37    	bra       0x4fd6 <.L130>

00004fc8 <.L141>:
                            default:
                                USB_error_flags |= REQUEST_ERROR;
    4fc8:	0c c8 bf    	mov.b     0x80c, WREG
    4fca:	00 04 a0    	bset.b    w0, #0x0
    4fcc:	0c e8 b7    	mov.b     WREG, 0x80c
    4fce:	03 00 37    	bra       0x4fd6 <.L130>

00004fd0 <.L126>:
                        }
                    } else {
                        USB_error_flags |= REQUEST_ERROR;
    4fd0:	0c c8 bf    	mov.b     0x80c, WREG
    4fd2:	00 04 a0    	bset.b    w0, #0x0
    4fd4:	0c e8 b7    	mov.b     WREG, 0x80c

00004fd6 <.L130>:
                    }
                    break;
    4fd6:	00 00 00    	nop       
                default:
                    USB_error_flags |= REQUEST_ERROR;
            }
            break;
    4fd8:	09 00 37    	bra       0x4fec <.L41>

00004fda <.L140>:
    4fda:	0c c8 bf    	mov.b     0x80c, WREG
    4fdc:	00 04 a0    	bset.b    w0, #0x0
    4fde:	0c e8 b7    	mov.b     WREG, 0x80c
    4fe0:	05 00 37    	bra       0x4fec <.L41>

00004fe2 <.L42>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= REQUEST_ERROR;
    4fe2:	0c c8 bf    	mov.b     0x80c, WREG
    4fe4:	00 04 a0    	bset.b    w0, #0x0
    4fe6:	0c e8 b7    	mov.b     WREG, 0x80c
    4fe8:	01 00 37    	bra       0x4fec <.L41>

00004fea <.L142>:
    4fea:	00 00 00    	nop       

00004fec <.L41>:
    }
}
    4fec:	00 80 fa    	ulnk      
    4fee:	00 00 06    	return    

00004ff0 <_usb_send_data_packet>:

void usb_send_data_packet(void) {
    4ff0:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (USB_request.bytes_left.w < MAX_PACKET_SIZE) {
    4ff2:	c1 ac 80    	mov.w     0x1598, w1
    4ff4:	f0 03 20    	mov.w     #0x3f, w0
    4ff6:	80 8f 50    	sub.w     w1, w0, [w15]
    4ff8:	05 00 3e    	bra       GTU, 0x5004 <.L144>
        packet_length = (uint8_t)USB_request.bytes_left.w;
    4ffa:	c0 ac 80    	mov.w     0x1598, w0
    4ffc:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    4ffe:	00 00 eb    	clr.w     w0
    5000:	c0 ac 88    	mov.w     w0, 0x1598
    5002:	05 00 37    	bra       0x500e <.L145>

00005004 <.L144>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    5004:	00 c4 b3    	mov.b     #0x40, w0
    5006:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    5008:	c0 ac 80    	mov.w     0x1598, w0
    500a:	00 04 b1    	sub.w     #0x40, w0
    500c:	c0 ac 88    	mov.w     w0, 0x1598

0000500e <.L145>:
    }
    for (i = 0; i < packet_length; i++) {
    500e:	00 40 eb    	clr.b     w0
    5010:	10 47 98    	mov.b     w0, [w14+1]
    5012:	0c 00 37    	bra       0x502c <.L146>

00005014 <.L147>:
        BD[EP0IN].address[i] = *USB_request.data_ptr++;
    5014:	31 b0 80    	mov.w     0x1606, w1
    5016:	1e 40 90    	mov.b     [w14+1], w0
    5018:	00 80 fb    	ze        w0, w0
    501a:	80 80 40    	add.w     w1, w0, w1
    501c:	b0 ac 80    	mov.w     0x1596, w0
    501e:	10 41 78    	mov.b     [w0], w2
    5020:	82 48 78    	mov.b     w2, [w1]
    5022:	00 00 e8    	inc.w     w0, w0
    5024:	b0 ac 88    	mov.w     w0, 0x1596
    5026:	1e 40 90    	mov.b     [w14+1], w0
    5028:	00 40 e8    	inc.b     w0, w0
    502a:	10 47 98    	mov.b     w0, [w14+1]

0000502c <.L146>:
    502c:	1e 40 90    	mov.b     [w14+1], w0
    502e:	9e 4f 50    	sub.b     w0, [w14], [w15]
    5030:	f1 ff 39    	bra       NC, 0x5014 <.L147>
    }
    BD[EP0IN].bytecount = packet_length;
    5032:	40 60 21    	mov.w     #0x1604, w0
    5034:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    5036:	50 60 21    	mov.w     #0x1605, w0
    5038:	10 40 78    	mov.b     [w0], w0
    503a:	00 c0 ea    	com.b     w0, w0
    503c:	02 c4 b3    	mov.b     #0x40, w2
    503e:	82 40 60    	and.b     w0, w2, w1
    5040:	80 c8 b3    	mov.b     #0x88, w0
    5042:	00 c0 70    	ior.b     w1, w0, w0
    5044:	80 40 78    	mov.b     w0, w1
    5046:	50 60 21    	mov.w     #0x1605, w0
    5048:	01 48 78    	mov.b     w1, [w0]
    if (USB_request.bytes_left.w == 0) {
    504a:	c0 ac 80    	mov.w     0x1598, w0
    504c:	00 00 e0    	cp0.w     w0
    504e:	0f 00 3a    	bra       NZ, 0x506e <.L143>
        if (USB_request.done_callback)
    5050:	d0 ac 80    	mov.w     0x159a, w0
    5052:	00 00 e0    	cp0.w     w0
    5054:	02 00 32    	bra       Z, 0x505a <.L149>
            USB_request.done_callback();
    5056:	d0 ac 80    	mov.w     0x159a, w0
    5058:	00 00 01    	call      w0

0000505a <.L149>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    505a:	e0 58 21    	mov.w     #0x158e, w0
    505c:	80 c0 eb    	setm.b    w1
    505e:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    5060:	f0 58 21    	mov.w     #0x158f, w0
    5062:	80 c0 eb    	setm.b    w1
    5064:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    5066:	00 00 eb    	clr.w     w0
    5068:	d0 ac 88    	mov.w     w0, 0x159a
        USB_in_callbacks[0] = (USB_CALLBACK_T)NULL;
    506a:	00 00 eb    	clr.w     w0
    506c:	e0 ac 88    	mov.w     w0, 0x159c

0000506e <.L143>:
    }
}
    506e:	00 80 fa    	ulnk      
    5070:	00 00 06    	return    

00005072 <_usb_receive_data_packet>:

void usb_receive_data_packet(void) {
    5072:	02 00 fa    	lnk       #0x2
    uint8_t i;

    for (i = 0; i < BD[EP0OUT].bytecount; i++) {
    5074:	00 40 eb    	clr.b     w0
    5076:	00 4f 78    	mov.b     w0, [w14]
    5078:	09 00 37    	bra       0x508c <.L151>

0000507a <.L152>:
        *USB_request.data_ptr++ = BD[EP0OUT].address[i];
    507a:	b0 ac 80    	mov.w     0x1596, w0
    507c:	12 b0 80    	mov.w     0x1602, w2
    507e:	9e 80 fb    	ze        [w14], w1
    5080:	81 00 41    	add.w     w2, w1, w1
    5082:	91 40 78    	mov.b     [w1], w1
    5084:	01 48 78    	mov.b     w1, [w0]
    5086:	00 00 e8    	inc.w     w0, w0
    5088:	b0 ac 88    	mov.w     w0, 0x1596
    508a:	1e 4f e8    	inc.b     [w14], [w14]

0000508c <.L151>:
    508c:	00 60 21    	mov.w     #0x1600, w0
    508e:	10 40 78    	mov.b     [w0], w0
    5090:	9e 4f 50    	sub.b     w0, [w14], [w15]
    5092:	f3 ff 3e    	bra       GTU, 0x507a <.L152>
    }
    USB_request.bytes_left.w -= BD[EP0OUT].bytecount;
    5094:	c1 ac 80    	mov.w     0x1598, w1
    5096:	00 60 21    	mov.w     #0x1600, w0
    5098:	10 40 78    	mov.b     [w0], w0
    509a:	00 80 fb    	ze        w0, w0
    509c:	00 80 50    	sub.w     w1, w0, w0
    509e:	c0 ac 88    	mov.w     w0, 0x1598
    if (USB_request.bytes_left.w > 0) {
    50a0:	c0 ac 80    	mov.w     0x1598, w0
    50a2:	00 00 e0    	cp0.w     w0
    50a4:	0e 00 32    	bra       Z, 0x50c2 <.L153>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    50a6:	00 60 21    	mov.w     #0x1600, w0
    50a8:	01 c4 b3    	mov.b     #0x40, w1
    50aa:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].status = ((BD[EP0OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    50ac:	10 60 21    	mov.w     #0x1601, w0
    50ae:	10 40 78    	mov.b     [w0], w0
    50b0:	00 c0 ea    	com.b     w0, w0
    50b2:	02 c4 b3    	mov.b     #0x40, w2
    50b4:	82 40 60    	and.b     w0, w2, w1
    50b6:	80 c8 b3    	mov.b     #0x88, w0
    50b8:	00 c0 70    	ior.b     w1, w0, w0
    50ba:	80 40 78    	mov.b     w0, w1
    50bc:	10 60 21    	mov.w     #0x1601, w0
    50be:	01 48 78    	mov.b     w1, [w0]
    50c0:	0f 00 37    	bra       0x50e0 <.L150>

000050c2 <.L153>:
    } else {
        if (USB_request.done_callback)
    50c2:	d0 ac 80    	mov.w     0x159a, w0
    50c4:	00 00 e0    	cp0.w     w0
    50c6:	02 00 32    	bra       Z, 0x50cc <.L155>
            USB_request.done_callback();
    50c8:	d0 ac 80    	mov.w     0x159a, w0
    50ca:	00 00 01    	call      w0

000050cc <.L155>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // all data received, so clear device request
    50cc:	e0 58 21    	mov.w     #0x158e, w0
    50ce:	80 c0 eb    	setm.b    w1
    50d0:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    50d2:	f0 58 21    	mov.w     #0x158f, w0
    50d4:	80 c0 eb    	setm.b    w1
    50d6:	01 48 78    	mov.b     w1, [w0]
        USB_request.done_callback = (USB_CALLBACK_T)NULL;
    50d8:	00 00 eb    	clr.w     w0
    50da:	d0 ac 88    	mov.w     w0, 0x159a
        USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    50dc:	00 00 eb    	clr.w     w0
    50de:	e0 ad 88    	mov.w     w0, 0x15bc

000050e0 <.L150>:
    }
}
    50e0:	00 80 fa    	ulnk      
    50e2:	00 00 06    	return    

000050e4 <_cdc_set_line_coding_out_callback>:
} CDC_TX_buffer, CDC_RX_buffer;

uint8_t TXbuf[TX_BUFFER_SIZE], RXbuf[RX_BUFFER_SIZE];

void cdc_set_line_coding_out_callback(void) {
    50e4:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.b[0] = BD[EP0OUT].address[0];
    50e6:	10 b0 80    	mov.w     0x1602, w0
    50e8:	90 40 78    	mov.b     [w0], w1
    50ea:	60 84 20    	mov.w     #0x846, w0
    50ec:	01 48 78    	mov.b     w1, [w0]
    CDC_line_coding.dwDTERate.b[1] = BD[EP0OUT].address[1];
    50ee:	10 b0 80    	mov.w     0x1602, w0
    50f0:	00 00 e8    	inc.w     w0, w0
    50f2:	90 40 78    	mov.b     [w0], w1
    50f4:	60 84 20    	mov.w     #0x846, w0
    50f6:	11 40 98    	mov.b     w1, [w0+1]
    CDC_line_coding.dwDTERate.b[2] = BD[EP0OUT].address[2];
    50f8:	10 b0 80    	mov.w     0x1602, w0
    50fa:	00 80 e8    	inc2.w    w0, w0
    50fc:	90 40 78    	mov.b     [w0], w1
    50fe:	60 84 20    	mov.w     #0x846, w0
    5100:	21 40 98    	mov.b     w1, [w0+2]
    CDC_line_coding.dwDTERate.b[3] = BD[EP0OUT].address[3];
    5102:	10 b0 80    	mov.w     0x1602, w0
    5104:	63 00 40    	add.w     w0, #0x3, w0
    5106:	90 40 78    	mov.b     [w0], w1
    5108:	60 84 20    	mov.w     #0x846, w0
    510a:	31 40 98    	mov.b     w1, [w0+3]
    CDC_line_coding.bCharFormat = BD[EP0OUT].address[4];
    510c:	10 b0 80    	mov.w     0x1602, w0
    510e:	64 00 40    	add.w     w0, #0x4, w0
    5110:	90 40 78    	mov.b     [w0], w1
    5112:	60 84 20    	mov.w     #0x846, w0
    5114:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = BD[EP0OUT].address[5];
    5116:	10 b0 80    	mov.w     0x1602, w0
    5118:	65 00 40    	add.w     w0, #0x5, w0
    511a:	90 40 78    	mov.b     [w0], w1
    511c:	60 84 20    	mov.w     #0x846, w0
    511e:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = BD[EP0OUT].address[6];
    5120:	10 b0 80    	mov.w     0x1602, w0
    5122:	66 00 40    	add.w     w0, #0x6, w0
    5124:	90 40 78    	mov.b     [w0], w1
    5126:	60 84 20    	mov.w     #0x846, w0
    5128:	61 40 98    	mov.b     w1, [w0+6]
    USB_out_callbacks[0] = (USB_CALLBACK_T)NULL;
    512a:	00 00 eb    	clr.w     w0
    512c:	e0 ad 88    	mov.w     w0, 0x15bc
}
    512e:	00 80 fa    	ulnk      
    5130:	00 00 06    	return    

00005132 <_cdc_setup_callback>:

void cdc_setup_callback(void) {
    5132:	00 00 fa    	lnk       #0x0
    switch (USB_setup.bRequest) {
    5134:	40 80 20    	mov.w     #0x804, w0
    5136:	10 40 90    	mov.b     [w0+1], w0
    5138:	00 80 fb    	ze        w0, w0
    513a:	01 02 20    	mov.w     #0x20, w1
    513c:	81 0f 50    	sub.w     w0, w1, [w15]
    513e:	1d 00 32    	bra       Z, 0x517a <.L6>
    5140:	01 02 20    	mov.w     #0x20, w1
    5142:	81 0f 50    	sub.w     w0, w1, [w15]
    5144:	05 00 3c    	bra       GT, 0x5150 <.L9>
    5146:	00 00 e0    	cp0.w     w0
    5148:	0a 00 32    	bra       Z, 0x515e <.L4>
    514a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    514c:	0f 00 32    	bra       Z, 0x516c <.L5>
    514e:	5c 00 37    	bra       0x5208 <.L3>

00005150 <.L9>:
    5150:	11 02 20    	mov.w     #0x21, w1
    5152:	81 0f 50    	sub.w     w0, w1, [w15]
    5154:	26 00 32    	bra       Z, 0x51a2 <.L7>
    5156:	21 02 20    	mov.w     #0x22, w1
    5158:	81 0f 50    	sub.w     w0, w1, [w15]
    515a:	4c 00 32    	bra       Z, 0x51f4 <.L8>
    515c:	55 00 37    	bra       0x5208 <.L3>

0000515e <.L4>:
        case SEND_ENCAPSULATED_COMMAND:
            BD[EP0IN].bytecount = 0;
    515e:	40 60 21    	mov.w     #0x1604, w0
    5160:	80 40 eb    	clr.b     w1
    5162:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5164:	50 60 21    	mov.w     #0x1605, w0
    5166:	81 cc b3    	mov.b     #0xc8, w1
    5168:	01 48 78    	mov.b     w1, [w0]
            break;
    516a:	51 00 37    	bra       0x520e <.L2>

0000516c <.L5>:
        case GET_ENCAPSULATED_RESPONSE:
            BD[EP0IN].bytecount = 0;
    516c:	40 60 21    	mov.w     #0x1604, w0
    516e:	80 40 eb    	clr.b     w1
    5170:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5172:	50 60 21    	mov.w     #0x1605, w0
    5174:	81 cc b3    	mov.b     #0xc8, w1
    5176:	01 48 78    	mov.b     w1, [w0]
            break;
    5178:	4a 00 37    	bra       0x520e <.L2>

0000517a <.L6>:
        case SET_LINE_CODING:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // save setup packet to continue processing 
    517a:	40 80 20    	mov.w     #0x804, w0
    517c:	90 40 78    	mov.b     [w0], w1
    517e:	e0 58 21    	mov.w     #0x158e, w0
    5180:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;            // a SET_LINE_CODING request when the OUT 
    5182:	40 80 20    	mov.w     #0x804, w0
    5184:	90 40 90    	mov.b     [w0+1], w1
    5186:	f0 58 21    	mov.w     #0x158f, w0
    5188:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;            // request arrives
    518a:	40 80 20    	mov.w     #0x804, w0
    518c:	10 00 90    	mov.w     [w0+2], w0
    518e:	80 ac 88    	mov.w     w0, 0x1590
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    5190:	40 80 20    	mov.w     #0x804, w0
    5192:	20 00 90    	mov.w     [w0+4], w0
    5194:	90 ac 88    	mov.w     w0, 0x1592
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    5196:	40 80 20    	mov.w     #0x804, w0
    5198:	30 00 90    	mov.w     [w0+6], w0
    519a:	a0 ac 88    	mov.w     w0, 0x1594
            USB_out_callbacks[0] = cdc_set_line_coding_out_callback;
    519c:	40 0e 25    	mov.w     #0x50e4, w0
    519e:	e0 ad 88    	mov.w     w0, 0x15bc
            break;
    51a0:	36 00 37    	bra       0x520e <.L2>

000051a2 <.L7>:
        case GET_LINE_CODING:
            BD[EP0IN].address[0] = CDC_line_coding.dwDTERate.b[0];
    51a2:	30 b0 80    	mov.w     0x1606, w0
    51a4:	61 84 20    	mov.w     #0x846, w1
    51a6:	91 40 78    	mov.b     [w1], w1
    51a8:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[1] = CDC_line_coding.dwDTERate.b[1];
    51aa:	30 b0 80    	mov.w     0x1606, w0
    51ac:	00 00 e8    	inc.w     w0, w0
    51ae:	61 84 20    	mov.w     #0x846, w1
    51b0:	91 40 90    	mov.b     [w1+1], w1
    51b2:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[2] = CDC_line_coding.dwDTERate.b[2];
    51b4:	30 b0 80    	mov.w     0x1606, w0
    51b6:	00 80 e8    	inc2.w    w0, w0
    51b8:	61 84 20    	mov.w     #0x846, w1
    51ba:	a1 40 90    	mov.b     [w1+2], w1
    51bc:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[3] = CDC_line_coding.dwDTERate.b[3];
    51be:	30 b0 80    	mov.w     0x1606, w0
    51c0:	63 00 40    	add.w     w0, #0x3, w0
    51c2:	61 84 20    	mov.w     #0x846, w1
    51c4:	b1 40 90    	mov.b     [w1+3], w1
    51c6:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[4] = CDC_line_coding.bCharFormat;
    51c8:	30 b0 80    	mov.w     0x1606, w0
    51ca:	64 00 40    	add.w     w0, #0x4, w0
    51cc:	61 84 20    	mov.w     #0x846, w1
    51ce:	c1 40 90    	mov.b     [w1+4], w1
    51d0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[5] = CDC_line_coding.bParityType;
    51d2:	30 b0 80    	mov.w     0x1606, w0
    51d4:	65 00 40    	add.w     w0, #0x5, w0
    51d6:	61 84 20    	mov.w     #0x846, w1
    51d8:	d1 40 90    	mov.b     [w1+5], w1
    51da:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].address[6] = CDC_line_coding.bDataBits;
    51dc:	30 b0 80    	mov.w     0x1606, w0
    51de:	66 00 40    	add.w     w0, #0x6, w0
    51e0:	61 84 20    	mov.w     #0x846, w1
    51e2:	e1 40 90    	mov.b     [w1+6], w1
    51e4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 7;
    51e6:	40 60 21    	mov.w     #0x1604, w0
    51e8:	71 c0 b3    	mov.b     #0x7, w1
    51ea:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    51ec:	50 60 21    	mov.w     #0x1605, w0
    51ee:	81 cc b3    	mov.b     #0xc8, w1
    51f0:	01 48 78    	mov.b     w1, [w0]
            break;
    51f2:	0d 00 37    	bra       0x520e <.L2>

000051f4 <.L8>:
        case SET_CONTROL_LINE_STATE:
            CDC_control_signal_bitmap = USB_setup.wValue.w;
    51f4:	40 80 20    	mov.w     #0x804, w0
    51f6:	10 00 90    	mov.w     [w0+2], w0
    51f8:	70 42 88    	mov.w     w0, 0x84e
            BD[EP0IN].bytecount = 0;
    51fa:	40 60 21    	mov.w     #0x1604, w0
    51fc:	80 40 eb    	clr.b     w1
    51fe:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = UOWN | DTS | DTSEN;  // send packet as DATA1, set UOWN bit
    5200:	50 60 21    	mov.w     #0x1605, w0
    5202:	81 cc b3    	mov.b     #0xc8, w1
    5204:	01 48 78    	mov.b     w1, [w0]
            break;
    5206:	03 00 37    	bra       0x520e <.L2>

00005208 <.L3>:
        case SET_COMM_FEATURE:
        case GET_COMM_FEATURE:
        case CLEAR_COMM_FEATURE:
        case SEND_BREAK:
        default:
            USB_error_flags |= REQUEST_ERROR;
    5208:	0c c8 bf    	mov.b     0x80c, WREG
    520a:	00 04 a0    	bset.b    w0, #0x0
    520c:	0c e8 b7    	mov.b     WREG, 0x80c

0000520e <.L2>:
    }
}
    520e:	00 80 fa    	ulnk      
    5210:	00 00 06    	return    

00005212 <_init_cdc>:

void init_cdc(void) {
    5212:	00 00 fa    	lnk       #0x0
    CDC_line_coding.dwDTERate.ul = 115200;  // set initial line coding paramters to 115,200 baud
    5214:	62 84 20    	mov.w     #0x846, w2
    5216:	00 20 2c    	mov.w     #0xc200, w0
    5218:	11 00 20    	mov.w     #0x1, w1
    521a:	00 89 be    	mov.d     w0, [w2]
    CDC_line_coding.bCharFormat = 0;        // ...1 stop bit,
    521c:	60 84 20    	mov.w     #0x846, w0
    521e:	80 40 eb    	clr.b     w1
    5220:	41 40 98    	mov.b     w1, [w0+4]
    CDC_line_coding.bParityType = 0;        // ...no parity,
    5222:	60 84 20    	mov.w     #0x846, w0
    5224:	80 40 eb    	clr.b     w1
    5226:	51 40 98    	mov.b     w1, [w0+5]
    CDC_line_coding.bDataBits = 8;          // ...and 8 data bits
    5228:	60 84 20    	mov.w     #0x846, w0
    522a:	81 c0 b3    	mov.b     #0x8, w1
    522c:	61 40 98    	mov.b     w1, [w0+6]

    CDC_control_signal_bitmap = 0;
    522e:	4e 28 ef    	clr.w     0x84e

    CDC_TX_buffer.data = TXbuf;
    5230:	20 10 21    	mov.w     #0x1102, w0
    5232:	70 87 88    	mov.w     w0, 0x10ee
    CDC_TX_buffer.length = TX_BUFFER_SIZE;
    5234:	00 10 20    	mov.w     #0x100, w0
    5236:	80 87 88    	mov.w     w0, 0x10f0
    CDC_TX_buffer.head = 0;
    5238:	00 00 eb    	clr.w     w0
    523a:	90 87 88    	mov.w     w0, 0x10f2
    CDC_TX_buffer.tail = 0;
    523c:	00 00 eb    	clr.w     w0
    523e:	a0 87 88    	mov.w     w0, 0x10f4
    CDC_TX_buffer.count = 0;
    5240:	00 00 eb    	clr.w     w0
    5242:	b0 87 88    	mov.w     w0, 0x10f6

    CDC_RX_buffer.data = RXbuf;
    5244:	20 20 21    	mov.w     #0x1202, w0
    5246:	c0 87 88    	mov.w     w0, 0x10f8
    CDC_RX_buffer.length = RX_BUFFER_SIZE;
    5248:	00 10 20    	mov.w     #0x100, w0
    524a:	d0 87 88    	mov.w     w0, 0x10fa
    CDC_RX_buffer.head = 0;
    524c:	00 00 eb    	clr.w     w0
    524e:	e0 87 88    	mov.w     w0, 0x10fc
    CDC_RX_buffer.tail = 0;
    5250:	00 00 eb    	clr.w     w0
    5252:	f0 87 88    	mov.w     w0, 0x10fe
    CDC_RX_buffer.count = 0;
    5254:	00 00 eb    	clr.w     w0
    5256:	00 88 88    	mov.w     w0, 0x1100
}
    5258:	00 80 fa    	ulnk      
    525a:	00 00 06    	return    

0000525c <_cdc_tx_service>:

void cdc_tx_service(void) {
    525c:	02 00 fa    	lnk       #0x2
    uint8_t packet_length, i;

    if (!(BD[EP2IN].status & UOWN)) {   // see if UOWN bit of EP2 IN status register is clear (i.e., PIC owns EP2 IN buffer)
    525e:	50 61 21    	mov.w     #0x1615, w0
    5260:	10 40 78    	mov.b     [w0], w0
    5262:	00 04 e0    	cp0.b     w0
    5264:	34 00 35    	bra       LT, 0x52ce <.L12>
        if (CDC_TX_buffer.count < MAX_PACKET_SIZE) 
    5266:	b1 87 80    	mov.w     0x10f6, w1
    5268:	f0 03 20    	mov.w     #0x3f, w0
    526a:	80 8f 50    	sub.w     w1, w0, [w15]
    526c:	03 00 3e    	bra       GTU, 0x5274 <.L14>
            packet_length = CDC_TX_buffer.count;
    526e:	b0 87 80    	mov.w     0x10f6, w0
    5270:	00 4f 78    	mov.b     w0, [w14]
    5272:	02 00 37    	bra       0x5278 <.L15>

00005274 <.L14>:
        else
            packet_length = MAX_PACKET_SIZE;
    5274:	00 c4 b3    	mov.b     #0x40, w0
    5276:	00 4f 78    	mov.b     w0, [w14]

00005278 <.L15>:
        for (i = 0; i < packet_length; i++) {
    5278:	00 40 eb    	clr.b     w0
    527a:	10 47 98    	mov.b     w0, [w14+1]
    527c:	15 00 37    	bra       0x52a8 <.L16>

0000527e <.L18>:
            BD[EP2IN].address[i] = CDC_TX_buffer.data[CDC_TX_buffer.head];
    527e:	b1 b0 80    	mov.w     0x1616, w1
    5280:	1e 40 90    	mov.b     [w14+1], w0
    5282:	00 80 fb    	ze        w0, w0
    5284:	00 80 40    	add.w     w1, w0, w0
    5286:	72 87 80    	mov.w     0x10ee, w2
    5288:	91 87 80    	mov.w     0x10f2, w1
    528a:	81 00 41    	add.w     w2, w1, w1
    528c:	91 40 78    	mov.b     [w1], w1
    528e:	01 48 78    	mov.b     w1, [w0]
            CDC_TX_buffer.head++;
    5290:	90 87 80    	mov.w     0x10f2, w0
    5292:	00 00 e8    	inc.w     w0, w0
    5294:	90 87 88    	mov.w     w0, 0x10f2
            if (CDC_TX_buffer.head == CDC_TX_buffer.length)
    5296:	91 87 80    	mov.w     0x10f2, w1
    5298:	80 87 80    	mov.w     0x10f0, w0
    529a:	80 8f 50    	sub.w     w1, w0, [w15]
    529c:	02 00 3a    	bra       NZ, 0x52a2 <.L17>
                CDC_TX_buffer.head = 0;
    529e:	00 00 eb    	clr.w     w0
    52a0:	90 87 88    	mov.w     w0, 0x10f2

000052a2 <.L17>:
    52a2:	1e 40 90    	mov.b     [w14+1], w0
    52a4:	00 40 e8    	inc.b     w0, w0
    52a6:	10 47 98    	mov.b     w0, [w14+1]

000052a8 <.L16>:
    52a8:	1e 40 90    	mov.b     [w14+1], w0
    52aa:	9e 4f 50    	sub.b     w0, [w14], [w15]
    52ac:	e8 ff 39    	bra       NC, 0x527e <.L18>
        }
        CDC_TX_buffer.count -= packet_length;
    52ae:	b1 87 80    	mov.w     0x10f6, w1
    52b0:	1e 80 fb    	ze        [w14], w0
    52b2:	00 80 50    	sub.w     w1, w0, w0
    52b4:	b0 87 88    	mov.w     w0, 0x10f6
        BD[EP2IN].bytecount = packet_length;
    52b6:	40 61 21    	mov.w     #0x1614, w0
    52b8:	1e 48 78    	mov.b     [w14], [w0]
        BD[EP2IN].status = ((BD[EP2IN].status ^ DTS) & DTS) | UOWN | DTSEN; // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    52ba:	50 61 21    	mov.w     #0x1615, w0
    52bc:	10 40 78    	mov.b     [w0], w0
    52be:	00 c0 ea    	com.b     w0, w0
    52c0:	02 c4 b3    	mov.b     #0x40, w2
    52c2:	82 40 60    	and.b     w0, w2, w1
    52c4:	80 c8 b3    	mov.b     #0x88, w0
    52c6:	00 c0 70    	ior.b     w1, w0, w0
    52c8:	80 40 78    	mov.b     w0, w1
    52ca:	50 61 21    	mov.w     #0x1615, w0
    52cc:	01 48 78    	mov.b     w1, [w0]

000052ce <.L12>:
    }
}
    52ce:	00 80 fa    	ulnk      
    52d0:	00 00 06    	return    

000052d2 <_cdc_rx_service>:

void cdc_rx_service(void) {
    52d2:	02 00 fa    	lnk       #0x2
    uint8_t i;

    if (!(BD[EP2OUT].status & UOWN)) {  // see if UOWN bit of EP2 OUT status register is clear (i.e., PIC owns EP2 OUT buffer)
    52d4:	10 61 21    	mov.w     #0x1611, w0
    52d6:	10 40 78    	mov.b     [w0], w0
    52d8:	00 04 e0    	cp0.b     w0
    52da:	38 00 35    	bra       LT, 0x534c <.L19>
        if ((BD[EP2OUT].bytecount + CDC_RX_buffer.count) <= CDC_RX_buffer.length) {
    52dc:	00 61 21    	mov.w     #0x1610, w0
    52de:	10 40 78    	mov.b     [w0], w0
    52e0:	80 80 fb    	ze        w0, w1
    52e2:	00 88 80    	mov.w     0x1100, w0
    52e4:	80 80 40    	add.w     w1, w0, w1
    52e6:	d0 87 80    	mov.w     0x10fa, w0
    52e8:	80 8f 50    	sub.w     w1, w0, [w15]
    52ea:	2d 00 3e    	bra       GTU, 0x5346 <.L21>
            for (i = 0; i < BD[EP2OUT].bytecount; i++) {
    52ec:	00 40 eb    	clr.b     w0
    52ee:	00 4f 78    	mov.b     w0, [w14]
    52f0:	12 00 37    	bra       0x5316 <.L22>

000052f2 <.L24>:
                CDC_RX_buffer.data[CDC_RX_buffer.tail] = BD[EP2OUT].address[i];
    52f2:	c1 87 80    	mov.w     0x10f8, w1
    52f4:	f0 87 80    	mov.w     0x10fe, w0
    52f6:	00 80 40    	add.w     w1, w0, w0
    52f8:	92 b0 80    	mov.w     0x1612, w2
    52fa:	9e 80 fb    	ze        [w14], w1
    52fc:	81 00 41    	add.w     w2, w1, w1
    52fe:	91 40 78    	mov.b     [w1], w1
    5300:	01 48 78    	mov.b     w1, [w0]
                CDC_RX_buffer.tail++;
    5302:	f0 87 80    	mov.w     0x10fe, w0
    5304:	00 00 e8    	inc.w     w0, w0
    5306:	f0 87 88    	mov.w     w0, 0x10fe
                if (CDC_RX_buffer.tail == CDC_RX_buffer.length)
    5308:	f1 87 80    	mov.w     0x10fe, w1
    530a:	d0 87 80    	mov.w     0x10fa, w0
    530c:	80 8f 50    	sub.w     w1, w0, [w15]
    530e:	02 00 3a    	bra       NZ, 0x5314 <.L23>
                    CDC_RX_buffer.tail = 0;
    5310:	00 00 eb    	clr.w     w0
    5312:	f0 87 88    	mov.w     w0, 0x10fe

00005314 <.L23>:
    5314:	1e 4f e8    	inc.b     [w14], [w14]

00005316 <.L22>:
    5316:	00 61 21    	mov.w     #0x1610, w0
    5318:	10 40 78    	mov.b     [w0], w0
    531a:	9e 4f 50    	sub.b     w0, [w14], [w15]
    531c:	ea ff 3e    	bra       GTU, 0x52f2 <.L24>
            }
            CDC_RX_buffer.count += BD[EP2OUT].bytecount;
    531e:	01 88 80    	mov.w     0x1100, w1
    5320:	00 61 21    	mov.w     #0x1610, w0
    5322:	10 40 78    	mov.b     [w0], w0
    5324:	00 80 fb    	ze        w0, w0
    5326:	00 80 40    	add.w     w1, w0, w0
    5328:	00 88 88    	mov.w     w0, 0x1100
            BD[EP2OUT].bytecount = 64;
    532a:	00 61 21    	mov.w     #0x1610, w0
    532c:	01 c4 b3    	mov.b     #0x40, w1
    532e:	01 48 78    	mov.b     w1, [w0]
            BD[EP2OUT].status = ((BD[EP2OUT].status ^ DTS) & DTS) | UOWN | DTSEN;   // toggle DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    5330:	10 61 21    	mov.w     #0x1611, w0
    5332:	10 40 78    	mov.b     [w0], w0
    5334:	00 c0 ea    	com.b     w0, w0
    5336:	02 c4 b3    	mov.b     #0x40, w2
    5338:	82 40 60    	and.b     w0, w2, w1
    533a:	80 c8 b3    	mov.b     #0x88, w0
    533c:	00 c0 70    	ior.b     w1, w0, w0
    533e:	80 40 78    	mov.b     w0, w1
    5340:	10 61 21    	mov.w     #0x1611, w0
    5342:	01 48 78    	mov.b     w1, [w0]
    5344:	03 00 37    	bra       0x534c <.L19>

00005346 <.L21>:
        } else
            USB_error_flags |= REQUEST_ERROR;
    5346:	0c c8 bf    	mov.b     0x80c, WREG
    5348:	00 04 a0    	bset.b    w0, #0x0
    534a:	0c e8 b7    	mov.b     WREG, 0x80c

0000534c <.L19>:
    }
}
    534c:	00 80 fa    	ulnk      
    534e:	00 00 06    	return    

00005350 <_cdc_in_waiting>:

uint16_t cdc_in_waiting(void) {
    5350:	00 00 fa    	lnk       #0x0
    return CDC_RX_buffer.count;
    5352:	00 88 80    	mov.w     0x1100, w0
}
    5354:	00 80 fa    	ulnk      
    5356:	00 00 06    	return    

00005358 <_cdc_tx_buffer_space>:

uint16_t cdc_tx_buffer_space(void) {
    5358:	00 00 fa    	lnk       #0x0
    return CDC_TX_buffer.length - CDC_TX_buffer.count;
    535a:	81 87 80    	mov.w     0x10f0, w1
    535c:	b0 87 80    	mov.w     0x10f6, w0
    535e:	00 80 50    	sub.w     w1, w0, w0
}
    5360:	00 80 fa    	ulnk      
    5362:	00 00 06    	return    

00005364 <_cdc_putc>:

void cdc_putc(uint8_t ch) {
    5364:	02 00 fa    	lnk       #0x2
    5366:	00 4f 78    	mov.b     w0, [w14]
    while (CDC_TX_buffer.count == CDC_TX_buffer.length) {
    5368:	01 00 37    	bra       0x536c <.L28>

0000536a <.L29>:
#ifndef USB_INTERRUPT
        usb_service();
    536a:	ac fa 07    	rcall     0x48c4 <_usb_service> <.LFB3> <.LFE2>

0000536c <.L28>:
    536c:	b1 87 80    	mov.w     0x10f6, w1
    536e:	80 87 80    	mov.w     0x10f0, w0
    5370:	80 8f 50    	sub.w     w1, w0, [w15]
    5372:	fb ff 32    	bra       Z, 0x536a <.L29>
#endif
    }
    disable_interrupts();
    5374:	ff 3f fc    	disi      #0x3fff
    CDC_TX_buffer.data[CDC_TX_buffer.tail] = ch;
    5376:	71 87 80    	mov.w     0x10ee, w1
    5378:	a0 87 80    	mov.w     0x10f4, w0
    537a:	00 80 40    	add.w     w1, w0, w0
    537c:	1e 48 78    	mov.b     [w14], [w0]
    CDC_TX_buffer.tail++;
    537e:	a0 87 80    	mov.w     0x10f4, w0
    5380:	00 00 e8    	inc.w     w0, w0
    5382:	a0 87 88    	mov.w     w0, 0x10f4
    if (CDC_TX_buffer.tail == CDC_TX_buffer.length)
    5384:	a1 87 80    	mov.w     0x10f4, w1
    5386:	80 87 80    	mov.w     0x10f0, w0
    5388:	80 8f 50    	sub.w     w1, w0, [w15]
    538a:	02 00 3a    	bra       NZ, 0x5390 <.L30>
        CDC_TX_buffer.tail = 0;
    538c:	00 00 eb    	clr.w     w0
    538e:	a0 87 88    	mov.w     w0, 0x10f4

00005390 <.L30>:
    CDC_TX_buffer.count++;
    5390:	b0 87 80    	mov.w     0x10f6, w0
    5392:	00 00 e8    	inc.w     w0, w0
    5394:	b0 87 88    	mov.w     w0, 0x10f6
    enable_interrupts();
    5396:	52 20 ef    	clr.w     0x52
}
    5398:	00 80 fa    	ulnk      
    539a:	00 00 06    	return    

0000539c <_cdc_getc>:

uint8_t cdc_getc(void) {
    539c:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    while (CDC_RX_buffer.count == 0) {
    539e:	01 00 37    	bra       0x53a2 <.L32>

000053a0 <.L33>:
#ifndef USB_INTERRUPT
        usb_service();
    53a0:	91 fa 07    	rcall     0x48c4 <_usb_service> <.LFB3> <.LFE2>

000053a2 <.L32>:
    53a2:	00 88 80    	mov.w     0x1100, w0
    53a4:	00 00 e0    	cp0.w     w0
    53a6:	fc ff 32    	bra       Z, 0x53a0 <.L33>
#endif
    }
    disable_interrupts();
    53a8:	ff 3f fc    	disi      #0x3fff
    ch = CDC_RX_buffer.data[CDC_RX_buffer.head];
    53aa:	c1 87 80    	mov.w     0x10f8, w1
    53ac:	e0 87 80    	mov.w     0x10fc, w0
    53ae:	00 80 40    	add.w     w1, w0, w0
    53b0:	10 4f 78    	mov.b     [w0], [w14]
    CDC_RX_buffer.head++;
    53b2:	e0 87 80    	mov.w     0x10fc, w0
    53b4:	00 00 e8    	inc.w     w0, w0
    53b6:	e0 87 88    	mov.w     w0, 0x10fc
    if (CDC_RX_buffer.head == CDC_RX_buffer.length)
    53b8:	e1 87 80    	mov.w     0x10fc, w1
    53ba:	d0 87 80    	mov.w     0x10fa, w0
    53bc:	80 8f 50    	sub.w     w1, w0, [w15]
    53be:	02 00 3a    	bra       NZ, 0x53c4 <.L34>
        CDC_RX_buffer.head = 0;
    53c0:	00 00 eb    	clr.w     w0
    53c2:	e0 87 88    	mov.w     w0, 0x10fc

000053c4 <.L34>:
    CDC_RX_buffer.count--;
    53c4:	00 88 80    	mov.w     0x1100, w0
    53c6:	00 00 e9    	dec.w     w0, w0
    53c8:	00 88 88    	mov.w     w0, 0x1100
    enable_interrupts();
    53ca:	52 20 ef    	clr.w     0x52
    return ch;
    53cc:	1e 40 78    	mov.b     [w14], w0
}
    53ce:	00 80 fa    	ulnk      
    53d0:	00 00 06    	return    

000053d2 <_cdc_puts>:

void cdc_puts(uint8_t *str) {
    53d2:	02 00 fa    	lnk       #0x2
    53d4:	00 0f 78    	mov.w     w0, [w14]
    while (*str)
    53d6:	04 00 37    	bra       0x53e0 <.L36>

000053d8 <.L37>:
        cdc_putc(*str++);
    53d8:	1e 00 78    	mov.w     [w14], w0
    53da:	10 40 78    	mov.b     [w0], w0
    53dc:	1e 0f e8    	inc.w     [w14], [w14]
    53de:	c2 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>

000053e0 <.L36>:
    53e0:	1e 00 78    	mov.w     [w14], w0
    53e2:	10 40 78    	mov.b     [w0], w0
    53e4:	00 04 e0    	cp0.b     w0
    53e6:	f8 ff 3a    	bra       NZ, 0x53d8 <.L37>
}
    53e8:	00 80 fa    	ulnk      
    53ea:	00 00 06    	return    

000053ec <_cdc_gets>:

void cdc_gets(uint8_t *str, uint16_t len) {
    53ec:	04 00 fa    	lnk       #0x4
    53ee:	00 0f 78    	mov.w     w0, [w14]
    53f0:	11 07 98    	mov.w     w1, [w14+2]
    if (len == 0)
    53f2:	1e 00 90    	mov.w     [w14+2], w0
    53f4:	00 00 e0    	cp0.w     w0
    53f6:	1a 00 32    	bra       Z, 0x542c <.L43>
        return;

    if (len == 1) {
    53f8:	1e 00 90    	mov.w     [w14+2], w0
    53fa:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    53fc:	04 00 3a    	bra       NZ, 0x5406 <.L41>
        *str = '\0';
    53fe:	1e 00 78    	mov.w     [w14], w0
    5400:	80 40 eb    	clr.b     w1
    5402:	01 48 78    	mov.b     w1, [w0]
        return;
    5404:	14 00 37    	bra       0x542e <.L38>

00005406 <.L41>:
    }

    while (1) {
        *str = cdc_getc();
    5406:	ca ff 07    	rcall     0x539c <_cdc_getc> <.LFB8> <.LFE7>
    5408:	9e 00 78    	mov.w     [w14], w1
    540a:	80 48 78    	mov.b     w0, [w1]
        if ((*str == '\r') || (len == 1))
    540c:	1e 00 78    	mov.w     [w14], w0
    540e:	10 40 78    	mov.b     [w0], w0
    5410:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    5412:	08 00 32    	bra       Z, 0x5424 <.L42>
    5414:	1e 00 90    	mov.w     [w14+2], w0
    5416:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5418:	05 00 32    	bra       Z, 0x5424 <.L42>
            break;
        str++;
    541a:	1e 0f e8    	inc.w     [w14], [w14]
        len--;
    541c:	1e 00 90    	mov.w     [w14+2], w0
    541e:	00 00 e9    	dec.w     w0, w0
    5420:	10 07 98    	mov.w     w0, [w14+2]
    }
    5422:	f1 ff 37    	bra       0x5406 <.L41>

00005424 <.L42>:
    *str = '\0';
    5424:	1e 00 78    	mov.w     [w14], w0
    5426:	80 40 eb    	clr.b     w1
    5428:	01 48 78    	mov.b     w1, [w0]
    542a:	01 00 37    	bra       0x542e <.L38>

0000542c <.L43>:
    542c:	00 00 00    	nop       

0000542e <.L38>:
}
    542e:	00 80 fa    	ulnk      
    5430:	00 00 06    	return    

00005432 <_cdc_gets_term>:

void cdc_gets_term(uint8_t *str, uint16_t len) {
    5432:	08 00 fa    	lnk       #0x8
    5434:	20 07 98    	mov.w     w0, [w14+4]
    5436:	31 07 98    	mov.w     w1, [w14+6]
    uint8_t *start;
    uint16_t left;

    if (len == 0)
    5438:	3e 00 90    	mov.w     [w14+6], w0
    543a:	00 00 e0    	cp0.w     w0
    543c:	68 00 32    	bra       Z, 0x550e <.L57>
        return;

    if (len == 1) {
    543e:	3e 00 90    	mov.w     [w14+6], w0
    5440:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    5442:	04 00 3a    	bra       NZ, 0x544c <.L47>
        *str = '\0';
    5444:	2e 00 90    	mov.w     [w14+4], w0
    5446:	80 40 eb    	clr.b     w1
    5448:	01 48 78    	mov.b     w1, [w0]
        return;
    544a:	62 00 37    	bra       0x5510 <.L44>

0000544c <.L47>:
    }

    cdc_putc(0x1B);                        // Save current cursor position
    544c:	b0 c1 b3    	mov.b     #0x1b, w0
    544e:	8a ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('7');
    5450:	70 c3 b3    	mov.b     #0x37, w0
    5452:	88 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    start = str;
    5454:	ae 00 90    	mov.w     [w14+4], w1
    5456:	11 07 98    	mov.w     w1, [w14+2]
    left = len;
    5458:	be 00 90    	mov.w     [w14+6], w1
    545a:	01 0f 78    	mov.w     w1, [w14]
    545c:	03 00 37    	bra       0x5464 <.L56>

0000545e <.L58>:
    while (1) {
        *str = cdc_getc();                 // Get a character
        if (*str == '\r')                  // If character is return,
            break;                         //   end the loop.
        if (*str == 0x1B) {                // If character is escape,
            cdc_putc(0x1B);                //   restore cursor position,
            cdc_putc('8');
            cdc_putc(0x1B);                //   clear to end of line, and
            cdc_putc('[');
            cdc_putc('K');
            str = start;                   //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str == '\b') ||              // If character is backspace
            (*str == 0x7F)) {              //   or delete, 
            if (str > start) {             //   and we are not at the start, 
                cdc_putc('\b');            //   erase the last character and
                cdc_putc(' ');
                cdc_putc('\b');
                str--;                     //   back up the pointer,
                left++;
            } else                         //   otherwise
                cdc_putc('\a');            //   send alert/bell character.
            continue;
        }
        if (left == 1) {                   // If string buffer is full,
            cdc_putc('\a');                //   send alert/bell character
            continue;
        }
        if ((*str >= 32) && (*str < 127)) {// If character is printable,
            cdc_putc(*str);                //   echo the received character
            str++;                         //   and advance the pointer.
            left--;
        }
    }
    545e:	00 00 00    	nop       
    5460:	01 00 37    	bra       0x5464 <.L56>

00005462 <.L59>:
    5462:	00 00 00    	nop       

00005464 <.L56>:
    5464:	9b ff 07    	rcall     0x539c <_cdc_getc> <.LFB8> <.LFE7>
    5466:	ae 00 90    	mov.w     [w14+4], w1
    5468:	80 48 78    	mov.b     w0, [w1]
    546a:	2e 00 90    	mov.w     [w14+4], w0
    546c:	10 40 78    	mov.b     [w0], w0
    546e:	ed 4f 50    	sub.b     w0, #0xd, [w15]
    5470:	08 00 3a    	bra       NZ, 0x5482 <.L48>
    *str = '\0';                           // Terminarte the string with null
    5472:	2e 00 90    	mov.w     [w14+4], w0
    5474:	80 40 eb    	clr.b     w1
    5476:	01 48 78    	mov.b     w1, [w0]
    cdc_putc('\n');                        // Send newline and
    5478:	a0 c0 b3    	mov.b     #0xa, w0
    547a:	74 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    cdc_putc('\r');                        //   carriage return
    547c:	d0 c0 b3    	mov.b     #0xd, w0
    547e:	72 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    5480:	47 00 37    	bra       0x5510 <.L44>

00005482 <.L48>:
    5482:	2e 00 90    	mov.w     [w14+4], w0
    5484:	10 40 78    	mov.b     [w0], w0
    5486:	fb 4f 50    	sub.b     w0, #0x1b, [w15]
    5488:	0f 00 3a    	bra       NZ, 0x54a8 <.L49>
    548a:	b0 c1 b3    	mov.b     #0x1b, w0
    548c:	6b ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    548e:	80 c3 b3    	mov.b     #0x38, w0
    5490:	69 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    5492:	b0 c1 b3    	mov.b     #0x1b, w0
    5494:	67 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    5496:	b0 c5 b3    	mov.b     #0x5b, w0
    5498:	65 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    549a:	b0 c4 b3    	mov.b     #0x4b, w0
    549c:	63 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    549e:	9e 00 90    	mov.w     [w14+2], w1
    54a0:	21 07 98    	mov.w     w1, [w14+4]
    54a2:	be 00 90    	mov.w     [w14+6], w1
    54a4:	01 0f 78    	mov.w     w1, [w14]
    54a6:	32 00 37    	bra       0x550c <.L50>

000054a8 <.L49>:
    54a8:	2e 00 90    	mov.w     [w14+4], w0
    54aa:	10 40 78    	mov.b     [w0], w0
    54ac:	e8 4f 50    	sub.b     w0, #0x8, [w15]
    54ae:	05 00 32    	bra       Z, 0x54ba <.L51>
    54b0:	2e 00 90    	mov.w     [w14+4], w0
    54b2:	90 40 78    	mov.b     [w0], w1
    54b4:	f0 c7 b3    	mov.b     #0x7f, w0
    54b6:	80 cf 50    	sub.b     w1, w0, [w15]
    54b8:	12 00 3a    	bra       NZ, 0x54de <.L52>

000054ba <.L51>:
    54ba:	ae 00 90    	mov.w     [w14+4], w1
    54bc:	1e 00 90    	mov.w     [w14+2], w0
    54be:	80 8f 50    	sub.w     w1, w0, [w15]
    54c0:	0b 00 36    	bra       LEU, 0x54d8 <.L53>
    54c2:	80 c0 b3    	mov.b     #0x8, w0
    54c4:	4f ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    54c6:	00 c2 b3    	mov.b     #0x20, w0
    54c8:	4d ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    54ca:	80 c0 b3    	mov.b     #0x8, w0
    54cc:	4b ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    54ce:	2e 00 90    	mov.w     [w14+4], w0
    54d0:	00 00 e9    	dec.w     w0, w0
    54d2:	20 07 98    	mov.w     w0, [w14+4]
    54d4:	1e 0f e8    	inc.w     [w14], [w14]
    54d6:	02 00 37    	bra       0x54dc <.L54>

000054d8 <.L53>:
    54d8:	70 c0 b3    	mov.b     #0x7, w0
    54da:	44 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>

000054dc <.L54>:
    54dc:	17 00 37    	bra       0x550c <.L50>

000054de <.L52>:
    54de:	1e 00 78    	mov.w     [w14], w0
    54e0:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    54e2:	03 00 3a    	bra       NZ, 0x54ea <.L55>
    54e4:	70 c0 b3    	mov.b     #0x7, w0
    54e6:	3e ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    54e8:	11 00 37    	bra       0x550c <.L50>

000054ea <.L55>:
    54ea:	2e 00 90    	mov.w     [w14+4], w0
    54ec:	10 40 78    	mov.b     [w0], w0
    54ee:	ff 4f 50    	sub.b     w0, #0x1f, [w15]
    54f0:	b6 ff 36    	bra       LEU, 0x545e <.L58>
    54f2:	2e 00 90    	mov.w     [w14+4], w0
    54f4:	90 40 78    	mov.b     [w0], w1
    54f6:	e0 c7 b3    	mov.b     #0x7e, w0
    54f8:	80 cf 50    	sub.b     w1, w0, [w15]
    54fa:	b3 ff 3e    	bra       GTU, 0x5462 <.L59>
    54fc:	2e 00 90    	mov.w     [w14+4], w0
    54fe:	10 40 78    	mov.b     [w0], w0
    5500:	31 ff 07    	rcall     0x5364 <_cdc_putc> <.LFB7> <.LFE6>
    5502:	2e 00 90    	mov.w     [w14+4], w0
    5504:	00 00 e8    	inc.w     w0, w0
    5506:	20 07 98    	mov.w     w0, [w14+4]
    5508:	1e 0f e9    	dec.w     [w14], [w14]
    550a:	ac ff 37    	bra       0x5464 <.L56>

0000550c <.L50>:
    550c:	ab ff 37    	bra       0x5464 <.L56>

0000550e <.L57>:
    550e:	00 00 00    	nop       

00005510 <.L44>:
}
    5510:	00 80 fa    	ulnk      
    5512:	00 00 06    	return    
Disassembly of section .dinit:

00005514 <.dinit>:
    5514:	50 08 00    	nop       
    5516:	14 08 00    	nop       
    5518:	80 00 00    	nop       
    551a:	1a 08 00    	nop       
    551c:	18 00 00    	nop       
    551e:	80 00 00    	nop       
    5520:	02 13 00    	nop       
    5522:	8c 01 00    	nop       
    5524:	82 00 00    	nop       
    5526:	48 94 ae    	btss.b    0x1448, #0x4
    5528:	1a 4b 94    	mov.b     [w10-503], w6
    552a:	14 1d 4f    	addc.w    w14, [w4], [w10++]
    552c:	94 0c 1e    	subbr.w   w12, [w4], [w9]
    552e:	55 94 6a    	xor.w     w5, [++w5], [w8--]
    5530:	1f 5b 94    	mov.b     [w15-487], w6
    5532:	b4 21 61    	and.w     w2, [w4++], [--w3]
    5534:	94 e0 22    	mov.w     #0x2e09, w4
    5536:	67 94 62    	and.w     w5, #0x7, [w8--]
    5538:	27 6e 94    	mov.b     [w7-470], w12
    553a:	80 31 72    	.pword 0x723180
    553c:	94 90 32    	bra       Z, 0xffffffffffff7666
    553e:	78 94 00    	nop       
    5540:	1b 7d 94    	mov.b     [w11-455], w10
    5542:	8a 1b 83    	mov.w     0x6370, w10
    5544:	94 aa 1b    	subbr.w   w7, [w4], [++w5]
    5546:	88 94 2e    	mov.w     #0xe948, w8
    5548:	1c 8e 94    	mov.w     [w12-878], w12
    554a:	4c 1c 93    	mov.w     [w12+824], w8
    554c:	94 d4 1c    	subbr.b   w9, [w4], [w9--]
    554e:	99 94 f2    	mpy       w6 * w6, B, [w8]+=4, w5, [w10]-=4, w5
    5550:	1c 9e 94    	mov.w     [w12-846], w12
    5552:	66 1d a5    	.pword 0xa51d66
    5554:	94 ee 1d    	subbr.b   w11, [w4], [++w13]
    5556:	ad 94 5e    	subb.w    w13, [w13--], [w9--]
    5558:	1e b2 94    	mov.w     [w14-798], w4
    555a:	90 1e b8    	.pword 0xb81e90
    555c:	94 aa 1e    	subbr.w   w13, [w4], [++w5]
    555e:	bd 94 dc    	.pword 0xdc94bd
    5560:	1e c3 94    	mov.b     [w14-447], w6
    5562:	f6 1e c8    	sftac     A, #0x36
    5564:	94 4a 1f    	subbr.b   w14, [w4], [w5]
    5566:	ce 94 bc    	.pword 0xbc94ce
    5568:	1f d3 94    	mov.b     [w15-431], w6
    556a:	ea 1f ad    	.pword 0xad1fea
    556c:	94 04 20    	mov.w     #0x49, w4
    556e:	b2 94 32    	bra       Z, 0xffffffffffff7ed4
    5570:	20 b8 94    	mov.w     [w0-780], w0
    5572:	4c 20 bd    	subr.w    0x4c
    5574:	94 7a 20    	mov.w     #0x7a9, w4
    5576:	d9 94 94    	mov.w     [w9-854], w9
    5578:	20 de 94    	mov.b     [w0-422], w12
    557a:	c2 20 e4    	.pword 0xe420c2
    557c:	94 dc 20    	mov.w     #0xdc9, w4
    557e:	e8 94 1c    	subbr.w   w9, #0x8, [w9--]
    5580:	21 ed 94    	mov.b     [w1-406], w10
    5582:	48 21 f1    	mac       w5 * w5, A, [w8]-=6, w6, [w10]+=4, w4
    5584:	94 88 21    	mov.w     #0x1889, w4
    5586:	e8 94 06    	.pword 0x0694e8
    5588:	22 f1 94    	mov.b     [w2-398], w2
    558a:	20 22 f6    	.pword 0xf62220
    558c:	94 3a 22    	mov.w     #0x23a9, w4
    558e:	fe 94 54    	sub.w     w9, #0x1e, [w9--]
    5590:	22 06 95    	mov.w     [w2-764], w12
    5592:	6e 22 0e    	bra       SA, 0x9a70
    5594:	95 88 22    	mov.w     #0x2889, w5
    5596:	16 95 a2    	.pword 0xa29516
    5598:	22 20 95    	mov.w     [w2-700], w0
    559a:	ac 22 28    	mov.w     #0x822a, w12
    559c:	95 c6 22    	mov.w     #0x2c69, w5
    559e:	e8 94 32    	bra       Z, 0xffffffffffff7f70
    55a0:	23 f1 94    	mov.b     [w3-398], w2
    55a2:	6c 23 f6    	.pword 0xf6236c
    55a4:	94 aa 23    	mov.w     #0x3aa9, w4
    55a6:	fe 94 e4    	.pword 0xe494fe
    55a8:	23 06 95    	mov.w     [w3-764], w12
    55aa:	22 24 0e    	bra       SA, 0x9df0
    55ac:	95 5c 24    	mov.w     #0x45c9, w5
    55ae:	30 95 9a    	mov.w     w0, [w10+678]
    55b0:	24 3a 95    	mov.w     [w4-652], w4
    55b2:	e6 24 45    	add.w     w10, #0x6, [--w9]
    55b4:	95 1a 25    	mov.w     #0x51a9, w5
    55b6:	4f 95 66    	and.w     w13, [--w15], [w10--]
    55b8:	25 5a 95    	mov.b     [w5-358], w4
    55ba:	9a 25 60    	and.w     w0, [w10], [--w11]
    55bc:	95 02 26    	mov.w     #0x6029, w5
    55be:	69 95 6a    	xor.w     w5, #0x9, [w10--]
    55c0:	26 16 95    	mov.w     [w6-732], w12
    55c2:	d2 26 72    	ior.w     w4, [++w2], [--w13]
    55c4:	95 dc 26    	mov.w     #0x6dc9, w5
    55c6:	76 95 20    	mov.w     #0x957, w6
    55c8:	27 7b 95    	mov.b     [w7-326], w6
    55ca:	b4 27 81    	mov.w     0x24f6, w4
    55cc:	95 ee 27    	mov.w     #0x7ee9, w5
    55ce:	88 95 0c    	bra       OA, 0xffffffffffff80e0
    55d0:	28 8c 95    	mov.w     [w8-620], w8
    55d2:	90 28 91    	mov.w     [w0+338], w1
    55d4:	95 ae 28    	mov.w     #0x8ae9, w5
    55d6:	95 95 36    	bra       LEU, 0xffffffffffff8102
    55d8:	29 9a 95    	mov.w     [w9-588], w4
    55da:	54 29 9e    	mov.w     w4, [w2-422]
    55dc:	95 dc 29    	mov.w     #0x9dc9, w5
    55de:	a3 95 fa    	.pword 0xfa95a3
    55e0:	29 a7 95    	mov.w     [w9-572], w14
    55e2:	82 2a ac    	btsts.b   0xa82, #0x1
    55e4:	95 a0 2a    	mov.w     #0xaa09, w5
    55e6:	b0 95 28    	mov.w     #0x895b, w0
    55e8:	2b b5 95    	mov.w     [w11-540], w10
    55ea:	46 2b b9    	mul.su    w5, [--w6], w6
    55ec:	95 d0 2b    	mov.w     #0xbd09, w5
    55ee:	be 95 f0    	.pword 0xf095be
    55f0:	2b c2 95    	mov.b     [w11-318], w4
    55f2:	7a 2c c7    	movsac    A, [w8]+=2, w6, [w11]-=4, w7
    55f4:	95 9a 2c    	mov.w     #0xc9a9, w5
    55f6:	cd 95 d4    	.pword 0xd495cd
    55f8:	2c d4 95    	mov.b     [w12-302], w8
    55fa:	f2 2c d8    	.pword 0xd82cf2
    55fc:	95 76 2d    	mov.w     #0xd769, w5
    55fe:	dd 95 94    	mov.w     [w13-854], w11
    5600:	2d e1 95    	mov.b     [w13-286], w2
    5602:	1c 2e e6    	.pword 0xe62e1c
    5604:	95 3a 2e    	mov.w     #0xe3a9, w5
    5606:	ea 95 c2    	mac       w4 * w7, B, [w8]-=2, w5, [w11]+=4, w5
    5608:	2e ef 95    	mov.b     [w14-278], w14
    560a:	e0 2e f3    	mac       w7 * w7, A, [w9]+=6, w6, [w11], w7
    560c:	95 68 2f    	mov.w     #0xf689, w5
    560e:	f8 95 86    	mov.w     0xd2be, w8
    5610:	2f fc 95    	mov.b     [w15-262], w8
    5612:	0e 30 01    	call      w14
    5614:	96 2c 30    	bra       OV, 0xaf42
    5616:	05 96 b6    	xor.w     0x1605, WREG
    5618:	30 0a 96    	mov.w     [w0-490], w4
    561a:	d6 30 0e    	bra       SA, 0xb7c8
    561c:	96 60 31    	bra       C, 0x1174a
    561e:	13 96 d2    	rlc.w     [w3], [w12--]
    5620:	31 19 96    	mov.w     [w1-458], w2
    5622:	5c 32 20    	mov.w     #0x325, w12
    5624:	96 7c 32    	bra       Z, 0x14f52
    5626:	28 96 e2    	.pword 0xe29628
    5628:	32 2e 96    	mov.w     [w2-426], w12
    562a:	4c 33 33    	bra       N, 0xbcc4
    562c:	96 3a 34    	bra       LE, 0xcb5a
    562e:	8e 14 00    	nop       
    5630:	00 01 00    	nop       
    5632:	80 00 00    	nop       
    5634:	32 08 00    	nop       
    5636:	14 00 00    	nop       
    5638:	80 00 00    	nop       
    563a:	64 10 00    	nop       
    563c:	9e 02 00    	nop       
    563e:	80 00 00    	nop       
    5640:	46 08 00    	nop       
    5642:	0a 00 00    	nop       
    5644:	80 00 00    	nop       
    5646:	8e 15 00    	nop       
    5648:	4e 00 00    	nop       
    564a:	80 00 00    	nop       
    564c:	00 16 00    	nop       
    564e:	80 00 00    	nop       
    5650:	80 00 00    	nop       
    5652:	80 16 00    	nop       
    5654:	40 00 00    	nop       
    5656:	80 00 00    	nop       
    5658:	c0 16 00    	nop       
    565a:	40 00 00    	nop       
    565c:	80 00 00    	nop       
    565e:	00 08 00    	nop       
    5660:	1a 00 00    	nop       
    5662:	80 00 00    	nop       
    5664:	00 00 00    	nop       
Disassembly of section .isr.text:

00005666 <__U1TXInterrupt>:
void dummy_puts(uint8_t *str) {
    // Do nothing...
}

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    5666:	80 9f be    	mov.d     w0, [w15++]
    5668:	32 00 f8    	push      0x32
    566a:	34 00 f8    	push      0x34
    566c:	10 00 20    	mov.w     #0x1, w0
    566e:	a0 01 88    	mov.w     w0, 0x34
    5670:	00 20 20    	mov.w     #0x200, w0
    5672:	90 01 88    	mov.w     w0, 0x32
    5674:	02 00 fa    	lnk       #0x2
    uint8_t ch;

    IFS0bits.U1TXIF = 0;            // lower UART1 TX interrupt flag
    5676:	85 80 a9    	bclr.b    0x85, #0x4

    if (U1TXbuffer.count == 0)      // if nothing left in UART1 TX buffer, 
    5678:	c0 42 80    	mov.w     0x858, w0
    567a:	00 00 e0    	cp0.w     w0
    567c:	17 00 3a    	bra       NZ, 0x56ac <.L174>
        U1STAbits.UTXEN = 0;        //   disable data transmission
    567e:	23 42 a9    	bclr.b    0x223, #0x2

    while ((U1STAbits.UTXBF == 0) && (U1TXbuffer.count != 0)) {
    5680:	16 00 37    	bra       0x56ae <.L170>

00005682 <.L173>:
        disable_interrupts();
    5682:	ff 3f fc    	disi      #0x3fff
        ch = U1TXbuffer.data[U1TXbuffer.head];
    5684:	81 42 80    	mov.w     0x850, w1
    5686:	a0 42 80    	mov.w     0x854, w0
    5688:	00 80 40    	add.w     w1, w0, w0
    568a:	10 4f 78    	mov.b     [w0], [w14]
        U1TXbuffer.head++;
    568c:	a0 42 80    	mov.w     0x854, w0
    568e:	00 00 e8    	inc.w     w0, w0
    5690:	a0 42 88    	mov.w     w0, 0x854
        if (U1TXbuffer.head == U1TXbuffer.length)
    5692:	a1 42 80    	mov.w     0x854, w1
    5694:	90 42 80    	mov.w     0x852, w0
    5696:	80 8f 50    	sub.w     w1, w0, [w15]
    5698:	02 00 3a    	bra       NZ, 0x569e <.L171>
            U1TXbuffer.head = 0;
    569a:	00 00 eb    	clr.w     w0
    569c:	a0 42 88    	mov.w     w0, 0x854

0000569e <.L171>:
        U1TXbuffer.count--;
    569e:	c0 42 80    	mov.w     0x858, w0
    56a0:	00 00 e9    	dec.w     w0, w0
    56a2:	c0 42 88    	mov.w     w0, 0x858
        enable_interrupts();
    56a4:	52 20 ef    	clr.w     0x52
        U1TXREG = (uint16_t)ch;
    56a6:	1e 80 fb    	ze        [w14], w0
    56a8:	20 11 88    	mov.w     w0, 0x224
    56aa:	01 00 37    	bra       0x56ae <.L170>

000056ac <.L174>:
    56ac:	00 00 00    	nop       

000056ae <.L170>:
    56ae:	11 11 80    	mov.w     0x222, w1
    56b0:	00 20 20    	mov.w     #0x200, w0
    56b2:	00 80 60    	and.w     w1, w0, w0
    56b4:	00 00 e0    	cp0.w     w0
    56b6:	03 00 3a    	bra       NZ, 0x56be <.L168>
    56b8:	c0 42 80    	mov.w     0x858, w0
    56ba:	00 00 e0    	cp0.w     w0
    56bc:	e2 ff 3a    	bra       NZ, 0x5682 <.L173>

000056be <.L168>:
    }
}
    56be:	00 80 fa    	ulnk      
    56c0:	34 00 f9    	pop       0x34
    56c2:	32 00 f9    	pop       0x32
    56c4:	4f 00 be    	mov.d     [--w15], w0
    56c6:	00 40 06    	retfie    

000056c8 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    56c8:	80 9f be    	mov.d     w0, [w15++]
    56ca:	32 00 f8    	push      0x32
    56cc:	34 00 f8    	push      0x34
    56ce:	10 00 20    	mov.w     #0x1, w0
    56d0:	a0 01 88    	mov.w     w0, 0x34
    56d2:	00 20 20    	mov.w     #0x200, w0
    56d4:	90 01 88    	mov.w     w0, 0x32
    56d6:	00 00 fa    	lnk       #0x0
    IFS0bits.U1RXIF = 0;            // lower UART1 RX interrupt flag
    56d8:	85 60 a9    	bclr.b    0x85, #0x3

    while ((U1STAbits.URXDA == 1) && (U1RXbuffer.count != U1RXbuffer.length)) {
    56da:	14 00 37    	bra       0x5704 <.L176>

000056dc <.L179>:
        disable_interrupts();
    56dc:	ff 3f fc    	disi      #0x3fff
        U1RXbuffer.data[U1RXbuffer.tail] = (uint8_t)U1RXREG;
    56de:	d1 42 80    	mov.w     0x85a, w1
    56e0:	00 43 80    	mov.w     0x860, w0
    56e2:	00 80 40    	add.w     w1, w0, w0
    56e4:	31 11 80    	mov.w     0x226, w1
    56e6:	81 40 78    	mov.b     w1, w1
    56e8:	01 48 78    	mov.b     w1, [w0]
        U1RXbuffer.tail++;
    56ea:	00 43 80    	mov.w     0x860, w0
    56ec:	00 00 e8    	inc.w     w0, w0
    56ee:	00 43 88    	mov.w     w0, 0x860
        if (U1RXbuffer.tail == U1RXbuffer.length)
    56f0:	01 43 80    	mov.w     0x860, w1
    56f2:	e0 42 80    	mov.w     0x85c, w0
    56f4:	80 8f 50    	sub.w     w1, w0, [w15]
    56f6:	02 00 3a    	bra       NZ, 0x56fc <.L177>
            U1RXbuffer.tail = 0;
    56f8:	00 00 eb    	clr.w     w0
    56fa:	00 43 88    	mov.w     w0, 0x860

000056fc <.L177>:
        U1RXbuffer.count++;
    56fc:	10 43 80    	mov.w     0x862, w0
    56fe:	00 00 e8    	inc.w     w0, w0
    5700:	10 43 88    	mov.w     w0, 0x862
        enable_interrupts();
    5702:	52 20 ef    	clr.w     0x52

00005704 <.L176>:
    5704:	10 11 80    	mov.w     0x222, w0
    5706:	61 00 60    	and.w     w0, #0x1, w0
    5708:	00 00 e0    	cp0.w     w0
    570a:	04 00 32    	bra       Z, 0x5714 <.L175>
    570c:	11 43 80    	mov.w     0x862, w1
    570e:	e0 42 80    	mov.w     0x85c, w0
    5710:	80 8f 50    	sub.w     w1, w0, [w15]
    5712:	e4 ff 3a    	bra       NZ, 0x56dc <.L179>

00005714 <.L175>:
    }
}
    5714:	00 80 fa    	ulnk      
    5716:	34 00 f9    	pop       0x34
    5718:	32 00 f9    	pop       0x32
    571a:	4f 00 be    	mov.d     [--w15], w0
    571c:	00 40 06    	retfie    
Disassembly of section .text:

0000571e <_set_config_callback>:
#include "parser.h"
#include "usb.h"
#include "cdc.h"

void set_config_callback(void) {
    571e:	00 00 fa    	lnk       #0x0
    USB_setup_class_callback = cdc_setup_callback;
    5720:	20 13 25    	mov.w     #0x5132, w0
    5722:	b0 40 88    	mov.w     w0, 0x816

    BD[EP1IN].bytecount = 0;
    5724:	c0 60 21    	mov.w     #0x160c, w0
    5726:	80 40 eb    	clr.b     w1
    5728:	01 48 78    	mov.b     w1, [w0]
    BD[EP1IN].address = EP1_IN_buffer;
    572a:	40 06 21    	mov.w     #0x1064, w0
    572c:	70 b0 88    	mov.w     w0, 0x160e
    BD[EP1IN].status = UOWN | DTS | DTSEN;
    572e:	d0 60 21    	mov.w     #0x160d, w0
    5730:	81 cc b3    	mov.b     #0xc8, w1
    5732:	01 48 78    	mov.b     w1, [w0]
    U1EP1 = ENDPT_IN_ONLY;
    5734:	50 00 20    	mov.w     #0x5, w0
    5736:	60 25 88    	mov.w     w0, 0x4ac

    BD[EP2OUT].bytecount = 64;
    5738:	00 61 21    	mov.w     #0x1610, w0
    573a:	01 c4 b3    	mov.b     #0x40, w1
    573c:	01 48 78    	mov.b     w1, [w0]
    BD[EP2OUT].address = EP2_OUT_buffer;
    573e:	e0 06 21    	mov.w     #0x106e, w0
    5740:	90 b0 88    	mov.w     w0, 0x1612
    BD[EP2OUT].status = UOWN | DTSEN;
    5742:	10 61 21    	mov.w     #0x1611, w0
    5744:	81 c8 b3    	mov.b     #0x88, w1
    5746:	01 48 78    	mov.b     w1, [w0]
    USB_out_callbacks[2] = cdc_rx_service;
    5748:	20 2d 25    	mov.w     #0x52d2, w0
    574a:	00 ae 88    	mov.w     w0, 0x15c0

    BD[EP2IN].bytecount = 0;
    574c:	40 61 21    	mov.w     #0x1614, w0
    574e:	80 40 eb    	clr.b     w1
    5750:	01 48 78    	mov.b     w1, [w0]
    BD[EP2IN].address = EP2_IN_buffer;
    5752:	e0 0a 21    	mov.w     #0x10ae, w0
    5754:	b0 b0 88    	mov.w     w0, 0x1616
    BD[EP2IN].status = UOWN | DTS | DTSEN;
    5756:	50 61 21    	mov.w     #0x1615, w0
    5758:	81 cc b3    	mov.b     #0xc8, w1
    575a:	01 48 78    	mov.b     w1, [w0]
    U1EP2 = ENDPT_NON_CONTROL;
    575c:	d0 01 20    	mov.w     #0x1d, w0
    575e:	70 25 88    	mov.w     w0, 0x4ae
    USB_in_callbacks[2] = cdc_tx_service;
    5760:	c0 25 25    	mov.w     #0x525c, w0
    5762:	00 ad 88    	mov.w     w0, 0x15a0
}
    5764:	00 80 fa    	ulnk      
    5766:	00 00 06    	return    

00005768 <_main>:

int16_t main(void) {
    5768:	00 00 fa    	lnk       #0x0
    uint16_t i;

    init_smu_base();
    576a:	09 f1 07    	rcall     0x397e <_init_smu_base> <.L0> <.LFB0> <.LFE109> <.Letext0> <.Ltext0>

    init_parser();
    576c:	13 ef 07    	rcall     0x3594 <_init_parser> <.LFB106> <.LFE105>

    init_cdc();
    576e:	51 fd 07    	rcall     0x5212 <_init_cdc> <.LFB2> <.LFE1>
    USB_set_config_callback = set_config_callback;
    5770:	e0 71 25    	mov.w     #0x571e, w0
    5772:	90 40 88    	mov.w     w0, 0x812

    init_usb();
    5774:	70 f8 07    	rcall     0x4856 <_init_usb> <.LFB2> <.LFE1>

00005776 <.L3>:

//    while (USB_USWSTAT != CONFIG_STATE) {
//#ifndef USB_INTERRUPT
//        usb_service();
//#endif
//    }

    while (1) {
        parser_state();
    5776:	90 41 80    	mov.w     0x832, w0
    5778:	00 00 01    	call      w0

#ifndef USB_INTERRUPT
        usb_service();
    577a:	a4 f8 07    	rcall     0x48c4 <_usb_service> <.LFB3> <.LFE2>
#endif
    }
    577c:	fc ff 37    	bra       0x5776 <.L3>
Disassembly of section .isr:

0000577e <__DefaultInterrupt>:
    577e:	00 40 da    	break     
    5780:	00 00 fe    	reset     
